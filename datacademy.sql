-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Jul 22, 2022 at 02:33 AM
-- Server version: 10.4.24-MariaDB
-- PHP Version: 8.1.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `datacademy`
--

-- --------------------------------------------------------

--
-- Table structure for table `available_courses`
--

CREATE TABLE `available_courses` (
  `course_id` int(255) NOT NULL,
  `course_name` varchar(255) DEFAULT NULL,
  `course_image` varchar(255) DEFAULT NULL,
  `course_description` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `available_courses`
--

INSERT INTO `available_courses` (`course_id`, `course_name`, `course_image`, `course_description`) VALUES
(1, 'Python', 'uploadimg/PYTHON.png', 'Learn python programming'),
(2, 'R-Programming', 'uploadimg/R-Programming.png', 'Learn R-Programming'),
(3, 'SQL', 'uploadimg/Sql_logo.png', 'Learn SQL programming'),
(4, 'Machine Learning', 'uploadimg/machine_learning.png', 'Learn Machine Learning'),
(5, 'Deep Learning', 'uploadimg/Deep_learning.jpg', 'Learn Deep Learning'),
(6, 'Neural Networks', 'uploadimg/neural_networks.png', 'Learn Artificial Neural Networks');

-- --------------------------------------------------------

--
-- Table structure for table `commentsection`
--

CREATE TABLE `commentsection` (
  `comment_id` int(11) NOT NULL,
  `username` varchar(120) NOT NULL,
  `date` datetime NOT NULL,
  `message` text NOT NULL,
  `video_id` int(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `course_topics`
--

CREATE TABLE `course_topics` (
  `id` int(11) NOT NULL,
  `topic_name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `course_name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `course_topics`
--

INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(1, 'Python - Tutorial', '<h1 style=\"margin-left:160px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Python - Tutorial</strong></span></span></h1>\r\n\r\n<p>Python is a general-purpose interpreted, interactive, object-oriented, and high-level programming language. It was created by Guido van Rossum during 1985- 1990. Like Perl, Python source code is also available under the GNU General Public License (GPL). This tutorial gives enough understanding on Python programming language.</p>\r\n\r\n<h1>Audience</h1>\r\n\r\n<p>This tutorial is designed for software programmers who need to learn Python programming language from scratch.</p>\r\n\r\n<h1>Prerequisites</h1>\r\n\r\n<p>You should have a basic understanding of Computer Programming terminologies. A basic understanding of any of the programming languages is a plus.</p>\r\n', 'Python'),
(2, 'Python - Overview', '<p style=\"margin-left:160px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Python - Overview</strong></span></span></p>\r\n\r\n<p>Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly readable. It uses English keywords frequently where as other languages use punctuation, and it has fewer syntactical constructions than other languages.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Python is Interpreted</strong>&nbsp;&minus; Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python is Interactive</strong>&nbsp;&minus; You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python is Object-Oriented</strong>&nbsp;&minus; Python supports Object-Oriented style or technique of programming that encapsulates code within objects.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python is a Beginner&#39;s Language</strong>&nbsp;&minus; Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>History of Python</h2>\r\n\r\n<p>Python was developed by Guido van Rossum in the late eighties and early nineties at the National Research Institute for Mathematics and Computer Science in the Netherlands.</p>\r\n\r\n<p>Python is derived from many other languages, including ABC, Modula-3, C, C++, Algol-68, SmallTalk, and Unix shell and other scripting languages.</p>\r\n\r\n<p>Python is copyrighted. Like Perl, Python source code is now available under the GNU General Public License (GPL).</p>\r\n\r\n<p>Python is now maintained by a core development team at the institute, although Guido van Rossum still holds a vital role in directing its progress.</p>\r\n\r\n<h2>Python Features</h2>\r\n\r\n<p>Python&#39;s features include &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Easy-to-learn</strong>&nbsp;&minus; Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language quickly.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Easy-to-read</strong>&nbsp;&minus; Python code is more clearly defined and visible to the eyes.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Easy-to-maintain</strong>&nbsp;&minus; Python&#39;s source code is fairly easy-to-maintain.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>A broad standard library</strong>&nbsp;&minus; Python&#39;s bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Interactive Mode</strong>&nbsp;&minus; Python has support for an interactive mode which allows interactive testing and debugging of snippets of code.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Portable</strong>&nbsp;&minus; Python can run on a wide variety of hardware platforms and has the same interface on all platforms.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Extendable</strong>&nbsp;&minus; You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Databases</strong>&nbsp;&minus; Python provides interfaces to all major commercial databases.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>GUI Programming</strong>&nbsp;&minus; Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Scalable</strong>&nbsp;&minus; Python provides a better structure and support for large programs than shell scripting.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Apart from the above-mentioned features, Python has a big list of good features, few are listed below &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>It supports functional and structured programming methods as well as OOP.</p>\r\n	</li>\r\n	<li>\r\n	<p>It can be used as a scripting language or can be compiled to byte-code for building large applications.</p>\r\n	</li>\r\n	<li>\r\n	<p>It provides very high-level dynamic data types and supports dynamic type checking.</p>\r\n	</li>\r\n	<li>\r\n	<p>It supports automatic garbage collection.</p>\r\n	</li>\r\n	<li>\r\n	<p>It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.</p>\r\n	</li>\r\n</ul>\r\n', 'Python'),
(3, 'Python - Environment Setup', '<p style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Python - Environment Setup</strong></span></span></p>\r\n\r\n<p>Python is available on a wide variety of platforms including Linux and Mac OS X. Let&#39;s understand how to set up our Python environment.</p>\r\n\r\n<h2>Local Environment Setup</h2>\r\n\r\n<p>Open a terminal window and type &quot;python&quot; to find out if it is already installed and which version is installed.</p>\r\n\r\n<ul>\r\n	<li>Unix (Solaris, Linux, FreeBSD, AIX, HP/UX, SunOS, IRIX, etc.)</li>\r\n	<li>Win 9x/NT/2000</li>\r\n	<li>Macintosh (Intel, PPC, 68K)</li>\r\n	<li>OS/2</li>\r\n	<li>DOS (multiple versions)</li>\r\n	<li>PalmOS</li>\r\n	<li>Nokia mobile phones</li>\r\n	<li>Windows CE</li>\r\n	<li>Acorn/RISC OS</li>\r\n	<li>BeOS</li>\r\n	<li>Amiga</li>\r\n	<li>VMS/OpenVMS</li>\r\n	<li>QNX</li>\r\n	<li>VxWorks</li>\r\n	<li>Psion</li>\r\n	<li>Python has also been ported to the Java and .NET virtual machines</li>\r\n</ul>\r\n\r\n<h2>Getting Python</h2>\r\n\r\n<p>The most up-to-date and current source code, binaries, documentation, news, etc., is available on the official website of Python&nbsp;<a href=\"https://www.python.org/\" rel=\"nofollow\" target=\"_blank\">https://www.python.org/</a></p>\r\n\r\n<p>You can download Python documentation from&nbsp;<a href=\"https://www.python.org/doc/\" rel=\"nofollow\" target=\"_blank\">https://www.python.org/doc/</a>. The documentation is available in HTML, PDF, and PostScript formats.</p>\r\n\r\n<h2>Installing Python</h2>\r\n\r\n<p>Python distribution is available for a wide variety of platforms. You need to download only the binary code applicable for your platform and install Python.</p>\r\n\r\n<p>If the binary code for your platform is not available, you need a C compiler to compile the source code manually. Compiling the source code offers more flexibility in terms of choice of features that you require in your installation.</p>\r\n\r\n<p>Here is a quick overview of installing Python on various platforms &minus;</p>\r\n\r\n<h3>Unix and Linux Installation</h3>\r\n\r\n<p>Here are the simple steps to install Python on Unix/Linux machine.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Open a Web browser and go to&nbsp;<a href=\"https://www.python.org/downloads/\" rel=\"nofollow\" target=\"_blank\">https://www.python.org/downloads/</a>.</p>\r\n	</li>\r\n	<li>\r\n	<p>Follow the link to download zipped source code available for Unix/Linux.</p>\r\n	</li>\r\n	<li>\r\n	<p>Download and extract files.</p>\r\n	</li>\r\n	<li>\r\n	<p>Editing the&nbsp;<em>Modules/Setup</em>&nbsp;file if you want to customize some options.</p>\r\n	</li>\r\n	<li>\r\n	<p>run ./configure script</p>\r\n	</li>\r\n	<li>\r\n	<p>make</p>\r\n	</li>\r\n	<li>\r\n	<p>make install</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>This installs Python at standard location&nbsp;<em>/usr/local/bin</em>&nbsp;and its libraries at&nbsp;<em>/usr/local/lib/pythonXX</em>&nbsp;where XX is the version of Python.</p>\r\n\r\n<h3>Windows Installation</h3>\r\n\r\n<p>Here are the steps to install Python on Windows machine.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Open a Web browser and go to&nbsp;<a href=\"https://www.python.org/downloads/\" rel=\"nofollow\" target=\"_blank\">https://www.python.org/downloads/</a>.</p>\r\n	</li>\r\n	<li>\r\n	<p>Follow the link for the Windows installer&nbsp;<em>python-XYZ.msi</em>&nbsp;file where XYZ is the version you need to install.</p>\r\n	</li>\r\n	<li>\r\n	<p>To use this installer&nbsp;<em>python-XYZ.msi</em>, the Windows system must support Microsoft Installer 2.0. Save the installer file to your local machine and then run it to find out if your machine supports MSI.</p>\r\n	</li>\r\n	<li>\r\n	<p>Run the downloaded file. This brings up the Python install wizard, which is really easy to use. Just accept the default settings, wait until the install is finished, and you are done.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Macintosh Installation</h3>\r\n\r\n<p>Recent Macs come with Python installed, but it may be several years out of date. See&nbsp;<a href=\"https://www.python.org/download/mac/\" rel=\"nofollow\" target=\"_blank\">http://www.python.org/download/mac/</a>&nbsp;for instructions on getting the current version along with extra tools to support development on the Mac. For older Mac OS&#39;s before Mac OS X 10.3 (released in 2003), MacPython is available.</p>\r\n\r\n<p>Jack Jansen maintains it and you can have full access to the entire documentation at his website &minus;&nbsp;<a href=\"http://www.cwi.nl/~jack/macpython.html\" rel=\"nofollow\" target=\"_blank\">http://www.cwi.nl/~jack/macpython.html</a>. You can find complete installation details for Mac OS installation.</p>\r\n\r\n<h2>Setting up PATH</h2>\r\n\r\n<p>Programs and other executable files can be in many directories, so operating systems provide a search path that lists the directories that the OS searches for executables.</p>\r\n\r\n<p>The path is stored in an environment variable, which is a named string maintained by the operating system. This variable contains information available to the command shell and other programs.</p>\r\n\r\n<p>The&nbsp;<strong>path</strong>&nbsp;variable is named as PATH in Unix or Path in Windows (Unix is case sensitive; Windows is not).</p>\r\n\r\n<p>In Mac OS, the installer handles the path details. To invoke the Python interpreter from any particular directory, you must add the Python directory to your path.</p>\r\n\r\n<h2>Setting path at Unix/Linux</h2>\r\n\r\n<p>To add the Python directory to the path for a particular session in Unix &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>In the csh shell</strong>&nbsp;&minus; type setenv PATH &quot;$PATH:/usr/local/bin/python&quot; and press Enter.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>In the bash shell (Linux)</strong>&nbsp;&minus; type export PATH=&quot;$PATH:/usr/local/bin/python&quot; and press Enter.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>In the sh or ksh shell</strong>&nbsp;&minus; type PATH=&quot;$PATH:/usr/local/bin/python&quot; and press Enter.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Note</strong>&nbsp;&minus; /usr/local/bin/python is the path of the Python directory</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Setting path at Windows</h2>\r\n\r\n<p>To add the Python directory to the path for a particular session in Windows &minus;</p>\r\n\r\n<p><strong>At the command prompt</strong>&nbsp;&minus; type path %path%;C:Python and press Enter.</p>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; C:Python is the path of the Python directory</p>\r\n\r\n<h2>Python Environment Variables</h2>\r\n\r\n<p>Here are important environment variables, which can be recognized by Python &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Variable &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>PYTHONPATH</strong></p>\r\n\r\n			<p>It has a role similar to PATH. This variable tells the Python interpreter where to locate the module files imported into a program. It should include the Python source library directory and the directories containing Python source code. PYTHONPATH is sometimes preset by the Python installer.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>PYTHONSTARTUP</strong></p>\r\n\r\n			<p>It contains the path of an initialization file containing Python source code. It is executed every time you start the interpreter. It is named as .pythonrc.py in Unix and it contains commands that load utilities or modify PYTHONPATH.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>PYTHONCASEOK</strong></p>\r\n\r\n			<p>It is used in Windows to instruct Python to find the first case-insensitive match in an import statement. Set this variable to any value to activate it.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>PYTHONHOME</strong></p>\r\n\r\n			<p>It is an alternative module search path. It is usually embedded in the PYTHONSTARTUP or PYTHONPATH directories to make switching module libraries easy.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Running Python</h2>\r\n\r\n<p>There are three different ways to start Python &minus;</p>\r\n\r\n<h3>Interactive Interpreter</h3>\r\n\r\n<p>You can start Python from Unix, DOS, or any other system that provides you a command-line interpreter or shell window.</p>\r\n\r\n<p>Enter&nbsp;<strong>python</strong>&nbsp;the command line.</p>\r\n\r\n<p>Start coding right away in the interactive interpreter.</p>\r\n\r\n<pre>\r\n$python # Unix/Linux\r\nor\r\npython% # Unix/Linux\r\nor\r\nC:&gt; python # Windows/DOS\r\n</pre>\r\n\r\n<p>Here is the list of all the available command line options &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Option &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>-d</strong></p>\r\n\r\n			<p>It provides debug output.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>-O</strong></p>\r\n\r\n			<p>It generates optimized bytecode (resulting in .pyo files).</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>-S</strong></p>\r\n\r\n			<p>Do not run import site to look for Python paths on startup.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>-v</strong></p>\r\n\r\n			<p>verbose output (detailed trace on import statements).</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td>\r\n			<p><strong>-X</strong></p>\r\n\r\n			<p>disable class-based built-in exceptions (just use strings); obsolete starting with version 1.6.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td>\r\n			<p><strong>-c cmd</strong></p>\r\n\r\n			<p>run Python script sent in as cmd string</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td>\r\n			<p><strong>file</strong></p>\r\n\r\n			<p>run Python script from given file</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>Script from the Command-line</h3>\r\n\r\n<p>A Python script can be executed at command line by invoking the interpreter on your application, as in the following &minus;</p>\r\n\r\n<pre>\r\n$python script.py # Unix/Linux\r\n\r\nor\r\n\r\npython% script.py # Unix/Linux\r\n\r\nor \r\n\r\nC: &gt;python script.py # Windows/DOS\r\n</pre>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; Be sure the file permission mode allows execution.</p>\r\n\r\n<h3>Integrated Development Environment</h3>\r\n\r\n<p>You can run Python from a Graphical User Interface (GUI) environment as well, if you have a GUI application on your system that supports Python.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Unix</strong>&nbsp;&minus; IDLE is the very first Unix IDE for Python.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Windows</strong>&nbsp;&minus; PythonWin is the first Windows interface for Python and is an IDE with a GUI.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Macintosh</strong>&nbsp;&minus; The Macintosh version of Python along with the IDLE IDE is available from the main website, downloadable as either MacBinary or BinHex&#39;d files.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>If you are not able to set up the environment properly, then you can take help from your system admin. Make sure the Python environment is properly set up and working perfectly fine.</p>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; All the examples given in subsequent chapters are executed with Python 2.4.3 version available on CentOS flavor of Linux.</p>\r\n\r\n<p>We already have set up Python Programming environment online, so that you can execute all the available examples online at the same time when you are learning theory. Feel free to modify any example and execute it online</p>\r\n', 'Python'),
(4, 'Python - Basic Syntax', '<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Python - Basic Syntax</strong></span></span></h1>\r\n\r\n<p>The Python language has many similarities to Perl, C, and Java. However, there are some definite differences between the languages.</p>\r\n\r\n<h2>First Python Program</h2>\r\n\r\n<p>Let us execute programs in different modes of programming.</p>\r\n\r\n<h3>Interactive Mode Programming</h3>\r\n\r\n<p>Invoking the interpreter without passing a script file as a parameter brings up the following prompt &minus;</p>\r\n\r\n<pre>\r\n$ python\r\nPython 2.4.3 (#1, Nov 11 2010, 13:34:43)\r\n[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2\r\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n&gt;&gt;&gt;</pre>\r\n\r\n<p>Type the following text at the Python prompt and press the Enter &minus;</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; print &quot;Hello, Python!&quot;</pre>\r\n\r\n<p>If you are running new version of Python, then you would need to use print statement with parenthesis as in&nbsp;<strong>print (&quot;Hello, Python!&quot;);</strong>. However in Python version 2.4.3, this produces the following result &minus;</p>\r\n\r\n<pre>\r\nHello, Python!\r\n</pre>\r\n\r\n<h3>Script Mode Programming</h3>\r\n\r\n<p>Invoking the interpreter with a script parameter begins execution of the script and continues until the script is finished. When the script is finished, the interpreter is no longer active.</p>\r\n\r\n<p>Let us write a simple Python program in a script. Python files have extension&nbsp;<strong>.py</strong>. Type the following source code in a test.py file &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/lsYEBf\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nprint &quot;Hello, Python!&quot;</pre>\r\n\r\n<p>We assume that you have Python interpreter set in PATH variable. Now, try to run this program as follows &minus;</p>\r\n\r\n<pre>\r\n$ python test.py</pre>\r\n\r\n<p>This produces the following result &minus;</p>\r\n\r\n<pre>\r\nHello, Python!\r\n</pre>\r\n\r\n<p>Let us try another way to execute a Python script. Here is the modified test.py file &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/2hIf1p\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nprint &quot;Hello, Python!&quot;</pre>\r\n\r\n<p>We assume that you have Python interpreter available in /usr/bin directory. Now, try to run this program as follows &minus;</p>\r\n\r\n<pre>\r\n$ chmod +x test.py     # This is to make file executable\r\n$./test.py</pre>\r\n\r\n<p>This produces the following result &minus;</p>\r\n\r\n<pre>\r\nHello, Python!\r\n</pre>\r\n\r\n<h2>Python Identifiers</h2>\r\n\r\n<p>A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).</p>\r\n\r\n<p>Python does not allow punctuation characters such as @, $, and % within identifiers. Python is a case sensitive programming language. Thus,&nbsp;<strong>Manpower</strong>&nbsp;and&nbsp;<strong>manpower</strong>&nbsp;are two different identifiers in Python.</p>\r\n\r\n<p>Here are naming conventions for Python identifiers &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Class names start with an uppercase letter. All other identifiers start with a lowercase letter.</p>\r\n	</li>\r\n	<li>\r\n	<p>Starting an identifier with a single leading underscore indicates that the identifier is private.</p>\r\n	</li>\r\n	<li>\r\n	<p>Starting an identifier with two leading underscores indicates a strongly private identifier.</p>\r\n	</li>\r\n	<li>\r\n	<p>If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Reserved Words</h2>\r\n\r\n<p>The following list shows the Python keywords. These are reserved words and you cannot use them as constant or variable or any other identifier names. All the Python keywords contain lowercase letters only.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>and</td>\r\n			<td>exec</td>\r\n			<td>not</td>\r\n		</tr>\r\n		<tr>\r\n			<td>assert</td>\r\n			<td>finally</td>\r\n			<td>or</td>\r\n		</tr>\r\n		<tr>\r\n			<td>break</td>\r\n			<td>for</td>\r\n			<td>pass</td>\r\n		</tr>\r\n		<tr>\r\n			<td>class</td>\r\n			<td>from</td>\r\n			<td>print</td>\r\n		</tr>\r\n		<tr>\r\n			<td>continue</td>\r\n			<td>global</td>\r\n			<td>raise</td>\r\n		</tr>\r\n		<tr>\r\n			<td>def</td>\r\n			<td>if</td>\r\n			<td>return</td>\r\n		</tr>\r\n		<tr>\r\n			<td>del</td>\r\n			<td>import</td>\r\n			<td>try</td>\r\n		</tr>\r\n		<tr>\r\n			<td>elif</td>\r\n			<td>in</td>\r\n			<td>while</td>\r\n		</tr>\r\n		<tr>\r\n			<td>else</td>\r\n			<td>is</td>\r\n			<td>with</td>\r\n		</tr>\r\n		<tr>\r\n			<td>except</td>\r\n			<td>lambda</td>\r\n			<td>yield</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Lines and Indentation</h2>\r\n\r\n<p>Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.</p>\r\n\r\n<p>The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example &minus;</p>\r\n\r\n<pre>\r\nif True:\r\n   print &quot;True&quot;\r\nelse:\r\n   print &quot;False&quot;\r\n</pre>\r\n\r\n<p>However, the following block generates an error &minus;</p>\r\n\r\n<pre>\r\nif True:\r\nprint &quot;Answer&quot;\r\nprint &quot;True&quot;\r\nelse:\r\nprint &quot;Answer&quot;\r\nprint &quot;False&quot;</pre>\r\n\r\n<p>Thus, in Python all the continuous lines indented with same number of spaces would form a block. The following example has various statement blocks &minus;</p>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; Do not try to understand the logic at this point of time. Just make sure you understood various blocks even if they are without braces.</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nimport sys\r\n\r\ntry:\r\n   # open file stream\r\n   file = open(file_name, &quot;w&quot;)\r\nexcept IOError:\r\n   print &quot;There was an error writing to&quot;, file_name\r\n   sys.exit()\r\nprint &quot;Enter &#39;&quot;, file_finish,\r\nprint &quot;&#39; When finished&quot;\r\nwhile file_text != file_finish:\r\n   file_text = raw_input(&quot;Enter text: &quot;)\r\n   if file_text == file_finish:\r\n      # close the file\r\n      file.close\r\n      break\r\n   file.write(file_text)\r\n   file.write(&quot;\n&quot;)\r\nfile.close()\r\nfile_name = raw_input(&quot;Enter filename: &quot;)\r\nif len(file_name) == 0:\r\n   print &quot;Next time please enter something&quot;\r\n   sys.exit()\r\ntry:\r\n   file = open(file_name, &quot;r&quot;)\r\nexcept IOError:\r\n   print &quot;There was an error reading file&quot;\r\n   sys.exit()\r\nfile_text = file.read()\r\nfile.close()\r\nprint file_text</pre>\r\n\r\n<h2>Multi-Line Statements</h2>\r\n\r\n<p>Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character () to denote that the line should continue. For example &minus;</p>\r\n\r\n<pre>\r\ntotal = item_one + \r\n        item_two + \r\n        item_three\r\n</pre>\r\n\r\n<p>Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example &minus;</p>\r\n\r\n<pre>\r\ndays = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;,\r\n        &#39;Thursday&#39;, &#39;Friday&#39;]\r\n</pre>\r\n\r\n<h2>Quotation in Python</h2>\r\n\r\n<p>Python accepts single (&#39;), double (&quot;) and triple (&#39;&#39;&#39; or &quot;&quot;&quot;) quotes to denote string literals, as long as the same type of quote starts and ends the string.</p>\r\n\r\n<p>The triple quotes are used to span the string across multiple lines. For example, all the following are legal &minus;</p>\r\n\r\n<pre>\r\nword = &#39;word&#39;\r\nsentence = &quot;This is a sentence.&quot;\r\nparagraph = &quot;&quot;&quot;This is a paragraph. It is\r\nmade up of multiple lines and sentences.&quot;&quot;&quot;\r\n</pre>\r\n\r\n<h2>Comments in Python</h2>\r\n\r\n<p>A hash sign (#) that is not inside a string literal begins a comment. All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them.</p>\r\n\r\n<p><a href=\"http://tpcg.io/VgbqMb\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# First comment\r\nprint &quot;Hello, Python!&quot; # second comment</pre>\r\n\r\n<p>This produces the following result &minus;</p>\r\n\r\n<pre>\r\nHello, Python!\r\n</pre>\r\n\r\n<p>You can type a comment on the same line after a statement or expression &minus;</p>\r\n\r\n<pre>\r\nname = &quot;Madisetti&quot; # This is again comment\r\n</pre>\r\n\r\n<p>You can comment multiple lines as follows &minus;</p>\r\n\r\n<pre>\r\n# This is a comment.\r\n# This is a comment, too.\r\n# This is a comment, too.\r\n# I said that already.\r\n</pre>\r\n\r\n<p>Following triple-quoted string is also ignored by Python interpreter and can be used as a multiline comments:</p>\r\n\r\n<pre>\r\n&#39;&#39;&#39;\r\nThis is a multiline\r\ncomment.\r\n&#39;&#39;&#39;\r\n</pre>\r\n\r\n<h2>Using Blank Lines</h2>\r\n\r\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.</p>\r\n\r\n<p>In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.</p>\r\n\r\n<h2>Waiting for the User</h2>\r\n\r\n<p>The following line of the program displays the prompt, the statement saying &ldquo;Press the enter key to exit&rdquo;, and waits for the user to take action &minus;</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nraw_input(&quot;\n\nPress the enter key to exit.&quot;)</pre>\r\n\r\n<p>Here, &quot;\n\n&quot; is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.</p>\r\n\r\n<h2>Multiple Statements on a Single Line</h2>\r\n\r\n<p>The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon &minus;</p>\r\n\r\n<pre>\r\nimport sys; x = &#39;foo&#39;; sys.stdout.write(x + &#39;\n&#39;)</pre>\r\n\r\n<h2>Multiple Statement Groups as Suites</h2>\r\n\r\n<p>A group of individual statements, which make a single code block are called&nbsp;<strong>suites</strong>&nbsp;in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.</p>\r\n\r\n<p>Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example &minus;</p>\r\n\r\n<pre>\r\nif expression : \r\n   suite\r\nelif expression : \r\n   suite \r\nelse : \r\n   suite\r\n</pre>\r\n\r\n<h2>Command Line Arguments</h2>\r\n\r\n<p>Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h &minus;</p>\r\n\r\n<pre>\r\n$ python -h\r\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\r\nOptions and arguments (and corresponding environment variables):\r\n-c cmd : program passed in as string (terminates option list)\r\n-d     : debug output from parser (also PYTHONDEBUG=x)\r\n-E     : ignore environment variables (such as PYTHONPATH)\r\n-h     : print this help message and exit\r\n\r\n[ etc. ]</pre>\r\n\r\n<p>You can also program your script in such a way that it should accept various options.&nbsp;<a href=\"https://www.tutorialspoint.com/python/python_command_line_arguments.htm\">Command Line Arguments</a>&nbsp;is an advanced topic and should be studied a bit later once you have gone through rest of the Python concepts.</p>\r\n', 'Python'),
(5, 'Python - Variable Types', '<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Python - Variable Types</strong></span></span></h1>\r\n\r\n<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>\r\n\r\n<p>Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals or characters in these variables.</p>\r\n\r\n<h2>Assigning Values to Variables</h2>\r\n\r\n<p>Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables.</p>\r\n\r\n<p>The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/Eh9FoM\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ncounter = 100          # An integer assignment\r\nmiles   = 1000.0       # A floating point\r\nname    = &quot;John&quot;       # A string\r\n\r\nprint counter\r\nprint miles\r\nprint name</pre>\r\n\r\n<p>Here, 100, 1000.0 and &quot;John&quot; are the values assigned to&nbsp;<em>counter</em>,&nbsp;<em>miles</em>, and&nbsp;<em>name</em>&nbsp;variables, respectively. This produces the following result &minus;</p>\r\n\r\n<pre>\r\n100\r\n1000.0\r\nJohn\r\n</pre>\r\n\r\n<h2>Multiple Assignment</h2>\r\n\r\n<p>Python allows you to assign a single value to several variables simultaneously. For example &minus;</p>\r\n\r\n<pre>\r\na = b = c = 1\r\n</pre>\r\n\r\n<p>Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example &minus;</p>\r\n\r\n<pre>\r\na,b,c = 1,2,&quot;john&quot;\r\n</pre>\r\n\r\n<p>Here, two integer objects with values 1 and 2 are assigned to variables a and b respectively, and one string object with the value &quot;john&quot; is assigned to the variable c.</p>\r\n\r\n<h2>Standard Data Types</h2>\r\n\r\n<p>The data stored in memory can be of many types. For example, a person&#39;s age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.</p>\r\n\r\n<p>Python has five standard data types &minus;</p>\r\n\r\n<ul>\r\n	<li>Numbers</li>\r\n	<li>String</li>\r\n	<li>List</li>\r\n	<li>Tuple</li>\r\n	<li>Dictionary</li>\r\n</ul>\r\n\r\n<h2>Python Numbers</h2>\r\n\r\n<p>Number data types store numeric values. Number objects are created when you assign a value to them. For example &minus;</p>\r\n\r\n<pre>\r\nvar1 = 1\r\nvar2 = 10\r\n</pre>\r\n\r\n<p>You can also delete the reference to a number object by using the del statement. The syntax of the del statement is &minus;</p>\r\n\r\n<pre>\r\ndel var1[,var2[,var3[....,varN]]]]\r\n</pre>\r\n\r\n<p>You can delete a single object or multiple objects by using the del statement. For example &minus;</p>\r\n\r\n<pre>\r\ndel var\r\ndel var_a, var_b\r\n</pre>\r\n\r\n<p>Python supports four different numerical types &minus;</p>\r\n\r\n<ul>\r\n	<li>int (signed integers)</li>\r\n	<li>long (long integers, they can also be represented in octal and hexadecimal)</li>\r\n	<li>float (floating point real values)</li>\r\n	<li>complex (complex numbers)</li>\r\n</ul>\r\n\r\n<h3>Examples</h3>\r\n\r\n<p>Here are some examples of numbers &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>int</th>\r\n			<th>long</th>\r\n			<th>float</th>\r\n			<th>complex</th>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td>51924361L</td>\r\n			<td>0.0</td>\r\n			<td>3.14j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>100</td>\r\n			<td>-0x19323L</td>\r\n			<td>15.20</td>\r\n			<td>45.j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-786</td>\r\n			<td>0122L</td>\r\n			<td>-21.9</td>\r\n			<td>9.322e-36j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>080</td>\r\n			<td>0xDEFABCECBDAECBFBAEl</td>\r\n			<td>32.3+e18</td>\r\n			<td>.876j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-0490</td>\r\n			<td>535633629843L</td>\r\n			<td>-90.</td>\r\n			<td>-.6545+0J</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-0x260</td>\r\n			<td>-052318172735L</td>\r\n			<td>-32.54e100</td>\r\n			<td>3e+26J</td>\r\n		</tr>\r\n		<tr>\r\n			<td>0x69</td>\r\n			<td>-4721885298529L</td>\r\n			<td>70.2-E12</td>\r\n			<td>4.53e-7j</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Python allows you to use a lowercase l with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.</p>\r\n	</li>\r\n	<li>\r\n	<p>A complex number consists of an ordered pair of real floating-point numbers denoted by x + yj, where x and y are the real numbers and j is the imaginary unit.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Python Strings</h2>\r\n\r\n<p>Strings in Python are identified as a contiguous set of characters represented in the quotation marks. Python allows for either pairs of single or double quotes. Subsets of strings can be taken using the slice operator ([ ] and [:] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end.</p>\r\n\r\n<p>The plus (+) sign is the string concatenation operator and the asterisk (*) is the repetition operator. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/PsSj6c\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nstr = &#39;Hello World!&#39;\r\n\r\nprint str          # Prints complete string\r\nprint str[0]       # Prints first character of the string\r\nprint str[2:5]     # Prints characters starting from 3rd to 5th\r\nprint str[2:]      # Prints string starting from 3rd character\r\nprint str * 2      # Prints string two times\r\nprint str + &quot;TEST&quot; # Prints concatenated string</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<pre>\r\nHello World!\r\nH\r\nllo\r\nllo World!\r\nHello World!Hello World!\r\nHello World!TEST\r\n</pre>\r\n\r\n<h2>Python Lists</h2>\r\n\r\n<p>Lists are the most versatile of Python&#39;s compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.</p>\r\n\r\n<p>The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator. For example &minus;</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nlist = [ &#39;abcd&#39;, 786 , 2.23, &#39;john&#39;, 70.2 ]\r\ntinylist = [123, &#39;john&#39;]\r\n\r\nprint list          # Prints complete list\r\nprint list[0]       # Prints first element of the list\r\nprint list[1:3]     # Prints elements starting from 2nd till 3rd \r\nprint list[2:]      # Prints elements starting from 3rd element\r\nprint tinylist * 2  # Prints list two times\r\nprint list + tinylist # Prints concatenated lists</pre>\r\n\r\n<p>This produce the following result &minus;</p>\r\n\r\n<pre>\r\n[&#39;abcd&#39;, 786, 2.23, &#39;john&#39;, 70.2]\r\nabcd\r\n[786, 2.23]\r\n[2.23, &#39;john&#39;, 70.2]\r\n[123, &#39;john&#39;, 123, &#39;john&#39;]\r\n[&#39;abcd&#39;, 786, 2.23, &#39;john&#39;, 70.2, 123, &#39;john&#39;]\r\n</pre>\r\n\r\n<h2>Python Tuples</h2>\r\n\r\n<p>A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.</p>\r\n\r\n<p>The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as&nbsp;<strong>read-only</strong>&nbsp;lists. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/XYBk9k\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntuple = ( &#39;abcd&#39;, 786 , 2.23, &#39;john&#39;, 70.2  )\r\ntinytuple = (123, &#39;john&#39;)\r\n\r\nprint tuple           # Prints complete list\r\nprint tuple[0]        # Prints first element of the list\r\nprint tuple[1:3]      # Prints elements starting from 2nd till 3rd \r\nprint tuple[2:]       # Prints elements starting from 3rd element\r\nprint tinytuple * 2   # Prints list two times\r\nprint tuple + tinytuple # Prints concatenated lists</pre>\r\n\r\n<p>This produce the following result &minus;</p>\r\n\r\n<pre>\r\n(&#39;abcd&#39;, 786, 2.23, &#39;john&#39;, 70.2)\r\nabcd\r\n(786, 2.23)\r\n(2.23, &#39;john&#39;, 70.2)\r\n(123, &#39;john&#39;, 123, &#39;john&#39;)\r\n(&#39;abcd&#39;, 786, 2.23, &#39;john&#39;, 70.2, 123, &#39;john&#39;)\r\n</pre>\r\n\r\n<p>The following code is invalid with tuple, because we attempted to update a tuple, which is not allowed. Similar case is possible with lists &minus;</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntuple = ( &#39;abcd&#39;, 786 , 2.23, &#39;john&#39;, 70.2  )\r\nlist = [ &#39;abcd&#39;, 786 , 2.23, &#39;john&#39;, 70.2  ]\r\ntuple[2] = 1000    # Invalid syntax with tuple\r\nlist[2] = 1000     # Valid syntax with list</pre>\r\n\r\n<h2>Python Dictionary</h2>\r\n\r\n<p>Python&#39;s dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.</p>\r\n\r\n<p>Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]). For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/DlY1Gc\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ndict = {}\r\ndict[&#39;one&#39;] = &quot;This is one&quot;\r\ndict[2]     = &quot;This is two&quot;\r\n\r\ntinydict = {&#39;name&#39;: &#39;john&#39;,&#39;code&#39;:6734, &#39;dept&#39;: &#39;sales&#39;}\r\n\r\n\r\nprint dict[&#39;one&#39;]       # Prints value for &#39;one&#39; key\r\nprint dict[2]           # Prints value for 2 key\r\nprint tinydict          # Prints complete dictionary\r\nprint tinydict.keys()   # Prints all the keys\r\nprint tinydict.values() # Prints all the values</pre>\r\n\r\n<p>This produce the following result &minus;</p>\r\n\r\n<pre>\r\nThis is one\r\nThis is two\r\n{&#39;dept&#39;: &#39;sales&#39;, &#39;code&#39;: 6734, &#39;name&#39;: &#39;john&#39;}\r\n[&#39;dept&#39;, &#39;code&#39;, &#39;name&#39;]\r\n[&#39;sales&#39;, 6734, &#39;john&#39;]\r\n</pre>\r\n\r\n<p>Dictionaries have no concept of order among elements. It is incorrect to say that the elements are &quot;out of order&quot;; they are simply unordered.</p>\r\n\r\n<h2>Data Type Conversion</h2>\r\n\r\n<p>Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type name as a function.</p>\r\n\r\n<p>There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Function &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>int(x [,base])</strong></p>\r\n\r\n			<p>Converts x to an integer. base specifies the base if x is a string.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>long(x [,base] )</strong></p>\r\n\r\n			<p>Converts x to a long integer. base specifies the base if x is a string.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>float(x)</strong></p>\r\n\r\n			<p>Converts x to a floating-point number.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>complex(real [,imag])</strong></p>\r\n\r\n			<p>Creates a complex number.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td>\r\n			<p><strong>str(x)</strong></p>\r\n\r\n			<p>Converts object x to a string representation.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td>\r\n			<p><strong>repr(x)</strong></p>\r\n\r\n			<p>Converts object x to an expression string.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td>\r\n			<p><strong>eval(str)</strong></p>\r\n\r\n			<p>Evaluates a string and returns an object.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td>\r\n			<p><strong>tuple(s)</strong></p>\r\n\r\n			<p>Converts s to a tuple.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td>\r\n			<p><strong>list(s)</strong></p>\r\n\r\n			<p>Converts s to a list.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td>\r\n			<p><strong>set(s)</strong></p>\r\n\r\n			<p>Converts s to a set.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11</td>\r\n			<td>\r\n			<p><strong>dict(d)</strong></p>\r\n\r\n			<p>Creates a dictionary. d must be a sequence of (key,value) tuples.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12</td>\r\n			<td>\r\n			<p><strong>frozenset(s)</strong></p>\r\n\r\n			<p>Converts s to a frozen set.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>13</td>\r\n			<td>\r\n			<p><strong>chr(x)</strong></p>\r\n\r\n			<p>Converts an integer to a character.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>14</td>\r\n			<td>\r\n			<p><strong>unichr(x)</strong></p>\r\n\r\n			<p>Converts an integer to a Unicode character.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>15</td>\r\n			<td>\r\n			<p><strong>ord(x)</strong></p>\r\n\r\n			<p>Converts a single character to its integer value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>16</td>\r\n			<td>\r\n			<p><strong>hex(x)</strong></p>\r\n\r\n			<p>Converts an integer to a hexadecimal string.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>17</td>\r\n			<td>\r\n			<p><strong>oct(x)</strong></p>\r\n\r\n			<p>Converts an integer to an octal string.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 'Python');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(6, 'Python - Basic Operators', '<h1 style=\"margin-left:120px\"><span style=\"font-size:24px\"><span style=\"color:#3498db\"><strong>Python - Basic Operators</strong></span></span></h1>\r\n\r\n<p>Operators are the constructs which can manipulate the value of operands.</p>\r\n\r\n<p>Consider the expression 4 + 5 = 9. Here, 4 and 5 are called operands and + is called operator.</p>\r\n\r\n<h2>Types of Operator</h2>\r\n\r\n<p>Python language supports the following types of operators.</p>\r\n\r\n<ul>\r\n	<li>Arithmetic Operators</li>\r\n	<li>Comparison (Relational) Operators</li>\r\n	<li>Assignment Operators</li>\r\n	<li>Logical Operators</li>\r\n	<li>Bitwise Operators</li>\r\n	<li>Membership Operators</li>\r\n	<li>Identity Operators</li>\r\n</ul>\r\n\r\n<p>Let us have a look on all operators one by one.</p>\r\n\r\n<h2>Python Arithmetic Operators</h2>\r\n\r\n<p>Assume variable a holds 10 and variable b holds 20, then &minus;</p>\r\n\r\n<p>[&nbsp;<a href=\"https://www.tutorialspoint.com/python/arithmetic_operators_example.htm\">Show Example</a>&nbsp;]</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>+ Addition</td>\r\n			<td>Adds values on either side of the operator.</td>\r\n			<td>a + b = 30</td>\r\n		</tr>\r\n		<tr>\r\n			<td>- Subtraction</td>\r\n			<td>Subtracts right hand operand from left hand operand.</td>\r\n			<td>a &ndash; b = -10</td>\r\n		</tr>\r\n		<tr>\r\n			<td>* Multiplication</td>\r\n			<td>Multiplies values on either side of the operator</td>\r\n			<td>a * b = 200</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/ Division</td>\r\n			<td>Divides left hand operand by right hand operand</td>\r\n			<td>b / a = 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>% Modulus</td>\r\n			<td>Divides left hand operand by right hand operand and returns remainder</td>\r\n			<td>b % a = 0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>** Exponent</td>\r\n			<td>Performs exponential (power) calculation on operators</td>\r\n			<td>a**b =10 to the power 20</td>\r\n		</tr>\r\n		<tr>\r\n			<td>//</td>\r\n			<td>Floor Division - The division of operands where the result is the quotient in which the digits after the decimal point are removed. But if one of the operands is negative, the result is floored, i.e., rounded away from zero (towards negative infinity) &minus;</td>\r\n			<td>9//2 = 4 and 9.0//2.0 = 4.0, -11//3 = -4, -11.0//3 = -4.0</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Python Comparison Operators</h2>\r\n\r\n<p>These operators compare the values on either sides of them and decide the relation among them. They are also called Relational operators.</p>\r\n\r\n<p>Assume variable a holds 10 and variable b holds 20, then &minus;</p>\r\n\r\n<p>[&nbsp;<a href=\"https://www.tutorialspoint.com/python/comparison_operators_example.htm\">Show Example</a>&nbsp;]</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>==</td>\r\n			<td>If the values of two operands are equal, then the condition becomes true.</td>\r\n			<td>(a == b) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!=</td>\r\n			<td>If values of two operands are not equal, then condition becomes true.</td>\r\n			<td>(a != b) is true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&gt;</td>\r\n			<td>If values of two operands are not equal, then condition becomes true.</td>\r\n			<td>(a &lt;&gt; b) is true. This is similar to != operator.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;</td>\r\n			<td>If the value of left operand is greater than the value of right operand, then condition becomes true.</td>\r\n			<td>(a &gt; b) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;</td>\r\n			<td>If the value of left operand is less than the value of right operand, then condition becomes true.</td>\r\n			<td>(a &lt; b) is true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;=</td>\r\n			<td>If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.</td>\r\n			<td>(a &gt;= b) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;=</td>\r\n			<td>If the value of left operand is less than or equal to the value of right operand, then condition becomes true.</td>\r\n			<td>(a &lt;= b) is true.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Python Assignment Operators</h2>\r\n\r\n<p>Assume variable a holds 10 and variable b holds 20, then &minus;</p>\r\n\r\n<p>[&nbsp;<a href=\"https://www.tutorialspoint.com/python/assignment_operators_example.htm\">Show Example</a>&nbsp;]</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>=</td>\r\n			<td>Assigns values from right side operands to left side operand</td>\r\n			<td>c = a + b assigns value of a + b into c</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+= Add AND</td>\r\n			<td>It adds right operand to the left operand and assign the result to left operand</td>\r\n			<td>c += a is equivalent to c = c + a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-= Subtract AND</td>\r\n			<td>It subtracts right operand from the left operand and assign the result to left operand</td>\r\n			<td>c -= a is equivalent to c = c - a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*= Multiply AND</td>\r\n			<td>It multiplies right operand with the left operand and assign the result to left operand</td>\r\n			<td>c *= a is equivalent to c = c * a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/= Divide AND</td>\r\n			<td>It divides left operand with the right operand and assign the result to left operand</td>\r\n			<td>c /= a is equivalent to c = c / ac /= a is equivalent to c = c / a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%= Modulus AND</td>\r\n			<td>It takes modulus using two operands and assign the result to left operand</td>\r\n			<td>c %= a is equivalent to c = c % a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>**= Exponent AND</td>\r\n			<td>Performs exponential (power) calculation on operators and assign value to the left operand</td>\r\n			<td>c **= a is equivalent to c = c ** a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>//= Floor Division</td>\r\n			<td>It performs floor division on operators and assign value to the left operand</td>\r\n			<td>c //= a is equivalent to c = c // a</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Python Bitwise Operators</h2>\r\n\r\n<p>Bitwise operator works on bits and performs bit by bit operation. Assume if a = 60; and b = 13; Now in binary format they will be as follows &minus;</p>\r\n\r\n<p>a = 0011 1100</p>\r\n\r\n<p>b = 0000 1101</p>\r\n\r\n<p>-----------------</p>\r\n\r\n<p>a&amp;b = 0000 1100</p>\r\n\r\n<p>a|b = 0011 1101</p>\r\n\r\n<p>a^b = 0011 0001</p>\r\n\r\n<p>~a&nbsp; = 1100 0011</p>\r\n\r\n<p>There are following Bitwise operators supported by Python language</p>\r\n\r\n<p>[&nbsp;<a href=\"https://www.tutorialspoint.com/python/bitwise_operators_example.htm\">Show Example</a>&nbsp;]</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp; Binary AND</td>\r\n			<td>Operator copies a bit to the result if it exists in both operands</td>\r\n			<td>(a &amp; b) (means 0000 1100)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>| Binary OR</td>\r\n			<td>It copies a bit if it exists in either operand.</td>\r\n			<td>(a | b) = 61 (means 0011 1101)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^ Binary XOR</td>\r\n			<td>It copies the bit if it is set in one operand but not both.</td>\r\n			<td>(a ^ b) = 49 (means 0011 0001)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>~ Binary Ones Complement</td>\r\n			<td>It is unary and has the effect of &#39;flipping&#39; bits.</td>\r\n			<td>(~a ) = -61 (means 1100 0011 in 2&#39;s complement form due to a signed binary number.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt; Binary Left Shift</td>\r\n			<td>The left operands value is moved left by the number of bits specified by the right operand.</td>\r\n			<td>a &lt;&lt; 2 = 240 (means 1111 0000)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt; Binary Right Shift</td>\r\n			<td>The left operands value is moved right by the number of bits specified by the right operand.</td>\r\n			<td>a &gt;&gt; 2 = 15 (means 0000 1111)</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Python Logical Operators</h2>\r\n\r\n<p>There are following logical operators supported by Python language. Assume variable a holds 10 and variable b holds 20 then</p>\r\n\r\n<p>[&nbsp;<a href=\"https://www.tutorialspoint.com/python/logical_operators_example.htm\">Show Example</a>&nbsp;]</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>and Logical AND</td>\r\n			<td>If both the operands are true then condition becomes true.</td>\r\n			<td>(a and b) is true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>or Logical OR</td>\r\n			<td>If any of the two operands are non-zero then condition becomes true.</td>\r\n			<td>(a or b) is true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not Logical NOT</td>\r\n			<td>Used to reverse the logical state of its operand.</td>\r\n			<td>Not(a and b) is false.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Used to reverse the logical state of its operand.</p>\r\n\r\n<h2>Python Membership Operators</h2>\r\n\r\n<p>Python&rsquo;s membership operators test for membership in a sequence, such as strings, lists, or tuples. There are two membership operators as explained below &minus;</p>\r\n\r\n<p>[&nbsp;<a href=\"https://www.tutorialspoint.com/python/membership_operators_example.htm\">Show Example</a>&nbsp;]</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>in</td>\r\n			<td>Evaluates to true if it finds a variable in the specified sequence and false otherwise.</td>\r\n			<td>x in y, here in results in a 1 if x is a member of sequence y.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not in</td>\r\n			<td>Evaluates to true if it does not finds a variable in the specified sequence and false otherwise.</td>\r\n			<td>x not in y, here not in results in a 1 if x is not a member of sequence y.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Python Identity Operators</h2>\r\n\r\n<p>Identity operators compare the memory locations of two objects. There are two Identity operators explained below &minus;</p>\r\n\r\n<p>[&nbsp;<a href=\"https://www.tutorialspoint.com/python/identity_operators_example.htm\">Show Example</a>&nbsp;]</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>is</td>\r\n			<td>Evaluates to true if the variables on either side of the operator point to the same object and false otherwise.</td>\r\n			<td>x is y, here&nbsp;<strong>is</strong>&nbsp;results in 1 if id(x) equals id(y).</td>\r\n		</tr>\r\n		<tr>\r\n			<td>is not</td>\r\n			<td>Evaluates to false if the variables on either side of the operator point to the same object and true otherwise.</td>\r\n			<td>x is not y, here&nbsp;<strong>is not</strong>&nbsp;results in 1 if id(x) is not equal to id(y).</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Python Operators Precedence</h2>\r\n\r\n<p>The following table lists all operators from highest precedence to lowest.</p>\r\n\r\n<p>[&nbsp;<a href=\"https://www.tutorialspoint.com/python/operators_precedence_example.htm\">Show Example</a>&nbsp;]</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Operator &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>**</strong></p>\r\n\r\n			<p>Exponentiation (raise to the power)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>~ + -</strong></p>\r\n\r\n			<p>Complement, unary plus and minus (method names for the last two are +@ and -@)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>* / % //</strong></p>\r\n\r\n			<p>Multiply, divide, modulo and floor division</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>+ -</strong></p>\r\n\r\n			<p>Addition and subtraction</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td>\r\n			<p><strong>&gt;&gt; &lt;&lt;</strong></p>\r\n\r\n			<p>Right and left bitwise shift</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td>\r\n			<p><strong>&amp;</strong></p>\r\n\r\n			<p>Bitwise &#39;AND&#39;</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td>\r\n			<p><strong>^ |</strong></p>\r\n\r\n			<p>Bitwise exclusive `OR&#39; and regular `OR&#39;</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td>\r\n			<p><strong>&lt;= &lt; &gt; &gt;=</strong></p>\r\n\r\n			<p>Comparison operators</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td>\r\n			<p><strong>&lt;&gt; == !=</strong></p>\r\n\r\n			<p>Equality operators</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td>\r\n			<p><strong>= %= /= //= -= += *= **=</strong></p>\r\n\r\n			<p>Assignment operators</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11</td>\r\n			<td>\r\n			<p><strong>is is not</strong></p>\r\n\r\n			<p>Identity operators</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12</td>\r\n			<td>\r\n			<p><strong>in not in</strong></p>\r\n\r\n			<p>Membership operators</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>13</td>\r\n			<td>\r\n			<p><strong>not or and</strong></p>\r\n\r\n			<p>Logical operators</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 'Python'),
(7, 'R - Introduction', '<h1>Introduction to&nbsp;R&nbsp;</h1>\r\n\r\n<p>R is a programming language and software environment for statistical analysis, graphics representation and reporting. R was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is currently developed by the R Development Core Team. R is freely available under the GNU General Public License, and pre-compiled binary versions are provided for various operating systems like Linux, Windows and Mac. This programming language was named&nbsp;<strong>R</strong>, based on the first letter of first name of the two R authors (Robert Gentleman and Ross Ihaka), and partly a play on the name of the Bell Labs Language.</p>\r\n', 'R-Programming'),
(8, 'R - Environment Setup', '<h2>Local Environment Setup</h2>\r\n\r\n<p>If you are still willing to set up your environment for R, you can follow the steps given below.</p>\r\n\r\n<h3>Windows Installation</h3>\r\n\r\n<p>You can download the Windows installer version of R from&nbsp;<a href=\"https://cran.r-project.org/bin/windows/base/\" rel=\"nofollow\" target=\"_blank\">R-3.2.2 for Windows (32/64 bit)</a>&nbsp;and save it in a local directory.</p>\r\n\r\n<p>As it is a Windows installer (.exe) with a name &quot;R-version-win.exe&quot;. You can just double click and run the installer accepting the default settings. If your Windows is 32-bit version, it installs the 32-bit version. But if your windows is 64-bit, then it installs both the 32-bit and 64-bit versions.</p>\r\n\r\n<p>After installation you can locate the icon to run the Program in a directory structure &quot;RR3.2.2ini386Rgui.exe&quot; under the Windows Program Files. Clicking this icon brings up the R-GUI which is the R console to do R Programming.</p>\r\n\r\n<h3>Linux Installation</h3>\r\n\r\n<p>R is available as a binary for many versions of Linux at the location&nbsp;<a href=\"https://cran.r-project.org/bin/linux/\" rel=\"nofollow\" target=\"_blank\">R Binaries</a>.</p>\r\n\r\n<p>The instruction to install Linux varies from flavor to flavor. These steps are mentioned under each type of Linux version in the mentioned link. However, if you are in a hurry, then you can use&nbsp;<strong>yum</strong>&nbsp;command to install R as follows &minus;</p>\r\n\r\n<pre>\r\n$ yum install R\r\n</pre>\r\n\r\n<p>Above command will install core functionality of R programming along with standard packages, still you need additional package, then you can launch R prompt as follows &minus;</p>\r\n\r\n<pre>\r\n$ R\r\nR version 3.2.0 (2015-04-16) -- &quot;Full of Ingredients&quot;\r\nCopyright (C) 2015 The R Foundation for Statistical Computing\r\nPlatform: x86_64-redhat-linux-gnu (64-bit)\r\n\r\nR is free software and comes with ABSOLUTELY NO WARRANTY.\r\nYou are welcome to redistribute it under certain conditions.\r\nType &#39;license()&#39; or &#39;licence()&#39; for distribution details.\r\n\r\nR is a collaborative project with many contributors.\r\nType &#39;contributors()&#39; for more information and\r\n&#39;citation()&#39; on how to cite R or R packages in publications.\r\n\r\nType &#39;demo()&#39; for some demos, &#39;help()&#39; for on-line help, or\r\n&#39;help.start()&#39; for an HTML browser interface to help.\r\nType &#39;q()&#39; to quit R.\r\n&gt;\r\n</pre>\r\n\r\n<p>Now you can use install command at R prompt to install the required package. For example, the following command will install&nbsp;<strong>plotrix</strong>&nbsp;package which is required for 3D charts.</p>\r\n\r\n<pre>\r\n&gt; install.packages(&quot;plotrix&quot;)</pre>\r\n', 'R-Programming'),
(9, 'R - Basic Syntax', '<p>As a convention, we will start learning R programming by writing a &quot;Hello, World!&quot; program. Depending on the needs, you can program either at R command prompt or you can use an R script file to write your program. Let&#39;s check both one by one.</p>\r\n\r\n<h2>R Command Prompt</h2>\r\n\r\n<p>Once you have R environment setup, then it&rsquo;s easy to start your R command prompt by just typing the following command at your command prompt &minus;</p>\r\n\r\n<pre>\r\n$ R\r\n</pre>\r\n\r\n<p>This will launch R interpreter and you will get a prompt &gt; where you can start typing your program as follows &minus;</p>\r\n\r\n<pre>\r\n&gt; myString &lt;- &quot;Hello, World!&quot;\r\n&gt; print ( myString)\r\n[1] &quot;Hello, World!&quot;</pre>\r\n\r\n<p>Here first statement defines a string variable myString, where we assign a string &quot;Hello, World!&quot; and then next statement print() is being used to print the value stored in variable myString.</p>\r\n\r\n<h2>R Script File</h2>\r\n\r\n<p>Usually, you will do your programming by writing your programs in script files and then you execute those scripts at your command prompt with the help of R interpreter called&nbsp;<strong>Rscript</strong>. So let&#39;s start with writing following code in a text file called test.R as under &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/LnRW9U\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# My first program in R Programming\r\nmyString &lt;- &quot;Hello, World!&quot;\r\n\r\nprint ( myString)</pre>\r\n\r\n<p>Save the above code in a file test.R and execute it at Linux command prompt as given below. Even if you are using Windows or other system, syntax will remain same.</p>\r\n\r\n<pre>\r\n$ Rscript test.R\r\n</pre>\r\n\r\n<p>When we run the above program, it produces the following result.</p>\r\n\r\n<pre>\r\n[1] &quot;Hello, World!&quot;\r\n</pre>\r\n\r\n<h2>Comments</h2>\r\n\r\n<p>Comments are like helping text in your R program and they are ignored by the interpreter while executing your actual program. Single comment is written using # in the beginning of the statement as follows &minus;</p>\r\n\r\n<pre>\r\n# My first program in R Programming\r\n</pre>\r\n\r\n<p>R does not support multi-line comments but you can perform a trick which is something as follows &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/s8fswx\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nif(FALSE) {\r\n   &quot;This is a demo for multi-line comments and it should be put inside either a \r\n      single OR double quote&quot;\r\n}\r\n\r\nmyString &lt;- &quot;Hello, World!&quot;\r\nprint ( myString)</pre>\r\n\r\n<pre>\r\n[1] &quot;Hello, World!&quot;\r\n</pre>\r\n\r\n<p>Though above comments will be executed by R interpreter, they will not interfere with your actual program. You should put such comments inside, either single or double quote.</p>\r\n', 'R-Programming'),
(10, 'Python - Data structures', '<h1>Python - List</h1>\r\n\r\n<p>The most basic data structure in Python is the&nbsp;<strong>sequence</strong>. Each element of a sequence is assigned a number - its position or index. The first index is zero, the second index is one, and so forth.</p>\r\n\r\n<p>Python has six built-in types of sequences, but the most common ones are lists and tuples, which we would see in this tutorial.</p>\r\n\r\n<p>There are certain things you can do with all sequence types. These operations include indexing, slicing, adding, multiplying, and checking for membership. In addition, Python has built-in functions for finding the length of a sequence and for finding its largest and smallest elements.</p>\r\n\r\n<h2>Python Lists</h2>\r\n\r\n<p>The list is a most versatile datatype available in Python which can be written as a list of comma-separated values (items) between square brackets. Important thing about a list is that items in a list need not be of the same type.</p>\r\n\r\n<p>Creating a list is as simple as putting different comma-separated values between square brackets. For example &minus;</p>\r\n\r\n<pre>\r\nlist1 = [&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000];\r\nlist2 = [1, 2, 3, 4, 5 ];\r\nlist3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]\r\n</pre>\r\n\r\n<p>Similar to string indices, list indices start at 0, and lists can be sliced, concatenated and so on.</p>\r\n\r\n<h2>Accessing Values in Lists</h2>\r\n\r\n<p>To access values in lists, use the square brackets for slicing along with the index or indices to obtain value available at that index. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/GWTzcq\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nlist1 = [&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000];\r\nlist2 = [1, 2, 3, 4, 5, 6, 7 ];\r\nprint &quot;list1[0]: &quot;, list1[0]\r\nprint &quot;list2[1:5]: &quot;, list2[1:5]</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nlist1[0]: physics\r\nlist2[1:5]: [2, 3, 4, 5]\r\n</pre>\r\n\r\n<h2>Updating Lists</h2>\r\n\r\n<p>You can update single or multiple elements of lists by giving the slice on the left-hand side of the assignment operator, and you can add to elements in a list with the append() method. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/PHXpBD\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nlist = [&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000];\r\nprint &quot;Value available at index 2 : &quot;\r\nprint list[2]\r\nlist[2] = 2001;\r\nprint &quot;New value available at index 2 : &quot;\r\nprint list[2]</pre>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; append() method is discussed in subsequent section.</p>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nValue available at index 2 :\r\n1997\r\nNew value available at index 2 :\r\n2001\r\n</pre>\r\n\r\n<h2>Delete List Elements</h2>\r\n\r\n<p>To remove a list element, you can use either the del statement if you know exactly which element(s) you are deleting or the remove() method if you do not know. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/k3xK1x\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nlist1 = [&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000];\r\nprint list1\r\ndel list1[2];\r\nprint &quot;After deleting value at index 2 : &quot;\r\nprint list1</pre>\r\n\r\n<p>When the above code is executed, it produces following result &minus;</p>\r\n\r\n<pre>\r\n[&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000]\r\nAfter deleting value at index 2 :\r\n[&#39;physics&#39;, &#39;chemistry&#39;, 2000]\r\n</pre>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; remove() method is discussed in subsequent section.</p>\r\n\r\n<h2>Basic List Operations</h2>\r\n\r\n<p>Lists respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new list, not a string.</p>\r\n\r\n<p>In fact, lists respond to all of the general sequence operations we used on strings in the prior chapter.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Python Expression</th>\r\n			<th>Results</th>\r\n			<th>Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>len([1, 2, 3])</td>\r\n			<td>3</td>\r\n			<td>Length</td>\r\n		</tr>\r\n		<tr>\r\n			<td>[1, 2, 3] + [4, 5, 6]</td>\r\n			<td>[1, 2, 3, 4, 5, 6]</td>\r\n			<td>Concatenation</td>\r\n		</tr>\r\n		<tr>\r\n			<td>[&#39;Hi!&#39;] * 4</td>\r\n			<td>[&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;]</td>\r\n			<td>Repetition</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3 in [1, 2, 3]</td>\r\n			<td>True</td>\r\n			<td>Membership</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for x in [1, 2, 3]: print x,</td>\r\n			<td>1 2 3</td>\r\n			<td>Iteration</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Indexing, Slicing, and Matrixes</h2>\r\n\r\n<p>Because lists are sequences, indexing and slicing work the same way for lists as they do for strings.</p>\r\n\r\n<p>Assuming following input &minus;</p>\r\n\r\n<pre>\r\nL = [&#39;spam&#39;, &#39;Spam&#39;, &#39;SPAM!&#39;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Python Expression</th>\r\n			<th>Results</th>\r\n			<th>Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>L[2]</td>\r\n			<td>SPAM!</td>\r\n			<td>Offsets start at zero</td>\r\n		</tr>\r\n		<tr>\r\n			<td>L[-2]</td>\r\n			<td>Spam</td>\r\n			<td>Negative: count from the right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>L[1:]</td>\r\n			<td>[&#39;Spam&#39;, &#39;SPAM!&#39;]</td>\r\n			<td>Slicing fetches sections</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Built-in List Functions &amp; Methods</h2>\r\n\r\n<p>Python includes the following list functions &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Function with Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_cmp.htm\">cmp(list1, list2)</a>\r\n			<p>Compares elements of both lists.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_len.htm\">len(list)</a>\r\n			<p>Gives the total length of the list.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_max.htm\">max(list)</a>\r\n			<p>Returns item from the list with max value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_min.htm\">min(list)</a>\r\n			<p>Returns item from the list with min value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_list.htm\">list(seq)</a>\r\n			<p>Converts a tuple into list.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Python includes following list methods</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Methods with Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_append.htm\">list.append(obj)</a>\r\n			<p>Appends object obj to list</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_count.htm\">list.count(obj)</a>\r\n			<p>Returns count of how many times obj occurs in list</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_extend.htm\">list.extend(seq)</a>\r\n			<p>Appends the contents of seq to list</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_index.htm\">list.index(obj)</a>\r\n			<p>Returns the lowest index in list that obj appears</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_insert.htm\">list.insert(index, obj)</a>\r\n			<p>Inserts object obj into list at offset index</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_pop.htm\">list.pop(obj=list[-1])</a>\r\n			<p>Removes and returns last object or obj from list</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_remove.htm\">list.remove(obj)</a>\r\n			<p>Removes object obj from list</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_reverse.htm\">list.reverse()</a>\r\n			<p>Reverses objects of list in place</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/list_sort.htm\">list.sort([func])</a>\r\n			<p>Sorts objects of list, use compare func if given</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h1>Python - Tuples</h1>\r\n\r\n<p>A tuple is a collection of objects which ordered and immutable. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.</p>\r\n\r\n<p>Creating a tuple is as simple as putting different comma-separated values. Optionally you can put these comma-separated values between parentheses also. For example &minus;</p>\r\n\r\n<pre>\r\ntup1 = (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000);\r\ntup2 = (1, 2, 3, 4, 5 );\r\ntup3 = &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;;\r\n</pre>\r\n\r\n<p>The empty tuple is written as two parentheses containing nothing &minus;</p>\r\n\r\n<pre>\r\ntup1 = ();\r\n</pre>\r\n\r\n<p>To write a tuple containing a single value you have to include a comma, even though there is only one value &minus;</p>\r\n\r\n<pre>\r\ntup1 = (50,);\r\n</pre>\r\n\r\n<p>Like string indices, tuple indices start at 0, and they can be sliced, concatenated, and so on.</p>\r\n\r\n<h2>Accessing Values in Tuples</h2>\r\n\r\n<p>To access values in tuple, use the square brackets for slicing along with the index or indices to obtain value available at that index. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/ZnuXed\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntup1 = (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000);\r\ntup2 = (1, 2, 3, 4, 5, 6, 7 );\r\nprint &quot;tup1[0]: &quot;, tup1[0];\r\nprint &quot;tup2[1:5]: &quot;, tup2[1:5];</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\ntup1[0]: physics\r\ntup2[1:5]: [2, 3, 4, 5]\r\n</pre>\r\n\r\n<h2>Updating Tuples</h2>\r\n\r\n<p>Tuples are immutable which means you cannot update or change the values of tuple elements. You are able to take portions of existing tuples to create new tuples as the following example demonstrates &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/QjdQHf\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntup1 = (12, 34.56);\r\ntup2 = (&#39;abc&#39;, &#39;xyz&#39;);\r\n\r\n# Following action is not valid for tuples\r\n# tup1[0] = 100;\r\n\r\n# So let&#39;s create a new tuple as follows\r\ntup3 = tup1 + tup2;\r\nprint tup3;</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n(12, 34.56, &#39;abc&#39;, &#39;xyz&#39;)\r\n</pre>\r\n\r\n<h2>Delete Tuple Elements</h2>\r\n\r\n<p>Removing individual tuple elements is not possible. There is, of course, nothing wrong with putting together another tuple with the undesired elements discarded.</p>\r\n\r\n<p>To explicitly remove an entire tuple, just use the&nbsp;<strong>del</strong>&nbsp;statement. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/ANv9OB\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntup = (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000);\r\nprint tup;\r\ndel tup;\r\nprint &quot;After deleting tup : &quot;;\r\nprint tup;</pre>\r\n\r\n<p>This produces the following result. Note an exception raised, this is because after&nbsp;<strong>del tup</strong>&nbsp;tuple does not exist any more &minus;</p>\r\n\r\n<pre>\r\n(&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000)\r\nAfter deleting tup :\r\nTraceback (most recent call last):\r\nFile &quot;test.py&quot;, line 9, in &lt;module&gt;\r\nprint tup;\r\nNameError: name &#39;tup&#39; is not defined\r\n</pre>\r\n\r\n<h2>Basic Tuples Operations</h2>\r\n\r\n<p>Tuples respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new tuple, not a string.</p>\r\n\r\n<p>In fact, tuples respond to all of the general sequence operations we used on strings in the prior chapter &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Python Expression</th>\r\n			<th>Results</th>\r\n			<th>Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>len((1, 2, 3))</td>\r\n			<td>3</td>\r\n			<td>Length</td>\r\n		</tr>\r\n		<tr>\r\n			<td>(1, 2, 3) + (4, 5, 6)</td>\r\n			<td>(1, 2, 3, 4, 5, 6)</td>\r\n			<td>Concatenation</td>\r\n		</tr>\r\n		<tr>\r\n			<td>(&#39;Hi!&#39;,) * 4</td>\r\n			<td>(&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;)</td>\r\n			<td>Repetition</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3 in (1, 2, 3)</td>\r\n			<td>True</td>\r\n			<td>Membership</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for x in (1, 2, 3): print x,</td>\r\n			<td>1 2 3</td>\r\n			<td>Iteration</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Indexing, Slicing, and Matrixes</h2>\r\n\r\n<p>Because tuples are sequences, indexing and slicing work the same way for tuples as they do for strings. Assuming following input &minus;</p>\r\n\r\n<pre>\r\nL = (&#39;spam&#39;, &#39;Spam&#39;, &#39;SPAM!&#39;)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Python Expression</th>\r\n			<th>Results</th>\r\n			<th>Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>L[2]</td>\r\n			<td>&#39;SPAM!&#39;</td>\r\n			<td>Offsets start at zero</td>\r\n		</tr>\r\n		<tr>\r\n			<td>L[-2]</td>\r\n			<td>&#39;Spam&#39;</td>\r\n			<td>Negative: count from the right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>L[1:]</td>\r\n			<td>[&#39;Spam&#39;, &#39;SPAM!&#39;]</td>\r\n			<td>Slicing fetches sections</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>No Enclosing Delimiters</h2>\r\n\r\n<p>Any set of multiple objects, comma-separated, written without identifying symbols, i.e., brackets for lists, parentheses for tuples, etc., default to tuples, as indicated in these short examples &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/TO4E3c\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nprint &#39;abc&#39;, -4.24e93, 18+6.6j, &#39;xyz&#39;;\r\nx, y = 1, 2;\r\nprint &quot;Value of x , y : &quot;, x,y;</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nabc -4.24e+93 (18+6.6j) xyz\r\nValue of x , y : 1 2\r\n</pre>\r\n\r\n<h2>Built-in Tuple Functions</h2>\r\n\r\n<p>Python includes the following tuple functions &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Function with Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/tuple_cmp.htm\">cmp(tuple1, tuple2)</a>\r\n			<p>Compares elements of both tuples.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/tuple_len.htm\">len(tuple)</a>\r\n			<p>Gives the total length of the tuple.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/tuple_max.htm\">max(tuple)</a>\r\n			<p>Returns item from the tuple with max value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/tuple_min.htm\">min(tuple)</a>\r\n			<p>Returns item from the tuple with min value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/tuple_tuple.htm\">tuple(seq)</a>\r\n			<p>Converts a list into tuple.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h1>Python - Dictionary</h1>\r\n\r\n<p>Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces. An empty dictionary without any items is written with just two curly braces, like this: {}.</p>\r\n\r\n<p>Keys are unique within a dictionary while values may not be. The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.</p>\r\n\r\n<h2>Accessing Values in Dictionary</h2>\r\n\r\n<p>To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value. Following is a simple example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/KTBDvD\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ndict = {&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}\r\nprint &quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;]\r\nprint &quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;]</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\ndict[&#39;Name&#39;]: Zara\r\ndict[&#39;Age&#39;]: 7\r\n</pre>\r\n\r\n<p>If we attempt to access a data item with a key, which is not part of the dictionary, we get an error as follows &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/pzUOPx\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ndict = {&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}\r\nprint &quot;dict[&#39;Alice&#39;]: &quot;, dict[&#39;Alice&#39;]</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\ndict[&#39;Alice&#39;]:\r\nTraceback (most recent call last):\r\nFile &quot;test.py&quot;, line 4, in &lt;module&gt;\r\nprint &quot;dict[&#39;Alice&#39;]: &quot;, dict[&#39;Alice&#39;];\r\nKeyError: &#39;Alice&#39;\r\n</pre>\r\n\r\n<h2>Updating Dictionary</h2>\r\n\r\n<p>You can update a dictionary by adding a new entry or a key-value pair, modifying an existing entry, or deleting an existing entry as shown below in the simple example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/porcg2\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ndict = {&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}\r\ndict[&#39;Age&#39;] = 8; # update existing entry\r\ndict[&#39;School&#39;] = &quot;DPS School&quot;; # Add new entry\r\n\r\nprint &quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;]\r\nprint &quot;dict[&#39;School&#39;]: &quot;, dict[&#39;School&#39;]</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\ndict[&#39;Age&#39;]: 8\r\ndict[&#39;School&#39;]: DPS School\r\n</pre>\r\n\r\n<h2>Delete Dictionary Elements</h2>\r\n\r\n<p>You can either remove individual dictionary elements or clear the entire contents of a dictionary. You can also delete entire dictionary in a single operation.</p>\r\n\r\n<p>To explicitly remove an entire dictionary, just use the&nbsp;<strong>del</strong>&nbsp;statement. Following is a simple example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/mbvT73\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ndict = {&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}\r\ndel dict[&#39;Name&#39;]; # remove entry with key &#39;Name&#39;\r\ndict.clear();     # remove all entries in dict\r\ndel dict ;        # delete entire dictionary\r\n\r\nprint &quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;]\r\nprint &quot;dict[&#39;School&#39;]: &quot;, dict[&#39;School&#39;]</pre>\r\n\r\n<p>This produces the following result. Note that an exception is raised because after&nbsp;<strong>del dict</strong>&nbsp;dictionary does not exist any more &minus;</p>\r\n\r\n<pre>\r\ndict[&#39;Age&#39;]:\r\nTraceback (most recent call last):\r\nFile &quot;test.py&quot;, line 8, in &lt;module&gt;\r\nprint &quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;];\r\nTypeError: &#39;type&#39; object is unsubscriptable\r\n</pre>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; del() method is discussed in subsequent section.</p>\r\n\r\n<h2>Properties of Dictionary Keys</h2>\r\n\r\n<p>Dictionary values have no restrictions. They can be any arbitrary Python object, either standard objects or user-defined objects. However, same is not true for the keys.</p>\r\n\r\n<p>There are two important points to remember about dictionary keys &minus;</p>\r\n\r\n<p><strong>(a)</strong>&nbsp;More than one entry per key not allowed. Which means no duplicate key is allowed. When duplicate keys encountered during assignment, the last assignment wins. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/rEJFby\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ndict = {&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Manni&#39;}\r\nprint &quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;]</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\ndict[&#39;Name&#39;]: Manni\r\n</pre>\r\n\r\n<p><strong>(b)</strong>&nbsp;Keys must be immutable. Which means you can use strings, numbers or tuples as dictionary keys but something like [&#39;key&#39;] is not allowed. Following is a simple example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/BLKmXZ\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ndict = {[&#39;Name&#39;]: &#39;Zara&#39;, &#39;Age&#39;: 7}\r\nprint &quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;]</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nTraceback (most recent call last):\r\nFile &quot;test.py&quot;, line 3, in &lt;module&gt;\r\ndict = {[&#39;Name&#39;]: &#39;Zara&#39;, &#39;Age&#39;: 7};\r\nTypeError: unhashable type: &#39;list&#39;\r\n</pre>\r\n\r\n<h2>Built-in Dictionary Functions &amp; Methods</h2>\r\n\r\n<p>Python includes the following dictionary functions &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Function with Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_cmp.htm\">cmp(dict1, dict2)</a>\r\n			<p>Compares elements of both dict.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_len.htm\">len(dict)</a>\r\n			<p>Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_str.htm\">str(dict)</a>\r\n			<p>Produces a printable string representation of a dictionary</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_type.htm\">type(variable)</a>\r\n			<p>Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Python includes following dictionary methods &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Methods with Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_clear.htm\">dict.clear()</a>\r\n			<p>Removes all elements of dictionary&nbsp;<em>dict</em></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_copy.htm\">dict.copy()</a>\r\n			<p>Returns a shallow copy of dictionary&nbsp;<em>dict</em></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_fromkeys.htm\">dict.fromkeys()</a>\r\n			<p>Create a new dictionary with keys from seq and values&nbsp;<em>set</em>&nbsp;to&nbsp;<em>value</em>.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_get.htm\">dict.get(key, default=None)</a>\r\n			<p>For&nbsp;<em>key</em>&nbsp;key, returns value or default if key not in dictionary</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_has_key.htm\">dict.has_key(key)</a>\r\n			<p>Returns&nbsp;<em>true</em>&nbsp;if key in dictionary&nbsp;<em>dict</em>,&nbsp;<em>false</em>&nbsp;otherwise</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_items.htm\">dict.items()</a>\r\n			<p>Returns a list of&nbsp;<em>dict</em>&#39;s (key, value) tuple pairs</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_keys.htm\">dict.keys()</a>\r\n			<p>Returns list of dictionary dict&#39;s keys</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_setdefault.htm\">dict.setdefault(key, default=None)</a>\r\n			<p>Similar to get(), but will set dict[key]=default if&nbsp;<em>key</em>&nbsp;is not already in dict</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_update.htm\">dict.update(dict2)</a>\r\n			<p>Adds dictionary&nbsp;<em>dict2</em>&#39;s key-values pairs to&nbsp;<em>dict</em></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/python/dictionary_values.htm\">dict.values()</a>\r\n			<p>Returns list of dictionary&nbsp;<em>dict</em>&#39;s values</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n', 'Python');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(11, 'Python - Functions', '<h1>Python - Functions</h1>\r\n\r\n<p>A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing.</p>\r\n\r\n<p>As you already know, Python gives you many built-in functions like print(), etc. but you can also create your own functions. These functions are called&nbsp;<em>user-defined functions.</em></p>\r\n\r\n<h2>Defining a Function</h2>\r\n\r\n<p>You can define functions to provide the required functionality. Here are simple rules to define a function in Python.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Function blocks begin with the keyword&nbsp;<strong>def</strong>&nbsp;followed by the function name and parentheses ( ( ) ).</p>\r\n	</li>\r\n	<li>\r\n	<p>Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.</p>\r\n	</li>\r\n	<li>\r\n	<p>The first statement of a function can be an optional statement - the documentation string of the function or&nbsp;<em>docstring</em>.</p>\r\n	</li>\r\n	<li>\r\n	<p>The code block within every function starts with a colon (:) and is indented.</p>\r\n	</li>\r\n	<li>\r\n	<p>The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<pre>\r\ndef functionname( parameters ):\r\n&quot;function_docstring&quot;\r\nfunction_suite\r\nreturn [expression]\r\n</pre>\r\n\r\n<p>By default, parameters have a positional behavior and you need to inform them in the same order that they were defined.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>The following function takes a string as input parameter and prints it on standard screen.</p>\r\n\r\n<pre>\r\ndef printme( str ):\r\n   &quot;This prints a passed string into this function&quot;\r\n   print str\r\n   return</pre>\r\n\r\n<h2>Calling a Function</h2>\r\n\r\n<p>Defining a function only gives it a name, specifies the parameters that are to be included in the function and structures the blocks of code.</p>\r\n\r\n<p>Once the basic structure of a function is finalized, you can execute it by calling it from another function or directly from the Python prompt. Following is the example to call printme() function &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/3mrnYY\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef printme( str ):\r\n   &quot;This prints a passed string into this function&quot;\r\n   print str\r\n   return;\r\n\r\n# Now you can call printme function\r\nprintme(&quot;I&#39;m first call to user defined function!&quot;)\r\nprintme(&quot;Again second call to the same function&quot;)</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nI&#39;m first call to user defined function!\r\nAgain second call to the same function\r\n</pre>\r\n\r\n<h2>Pass by reference vs value</h2>\r\n\r\n<p>All parameters (arguments) in the Python language are passed by reference. It means if you change what a parameter refers to within a function, the change also reflects back in the calling function. For example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/ZwGczd\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef changeme( mylist ):\r\n   &quot;This changes a passed list into this function&quot;\r\n   mylist.append([1,2,3,4]);\r\n   print &quot;Values inside the function: &quot;, mylist\r\n   return\r\n\r\n# Now you can call changeme function\r\nmylist = [10,20,30];\r\nchangeme( mylist );\r\nprint &quot;Values outside the function: &quot;, mylist</pre>\r\n\r\n<p>Here, we are maintaining reference of the passed object and appending values in the same object. So, this would produce the following result &minus;</p>\r\n\r\n<pre>\r\nValues inside the function: [10, 20, 30, [1, 2, 3, 4]]\r\nValues outside the function: [10, 20, 30, [1, 2, 3, 4]]\r\n</pre>\r\n\r\n<p>There is one more example where argument is being passed by reference and the reference is being overwritten inside the called function.</p>\r\n\r\n<p><a href=\"http://tpcg.io/xgrZcs\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef changeme( mylist ):\r\n   &quot;This changes a passed list into this function&quot;\r\n   mylist = [1,2,3,4]; # This would assig new reference in mylist\r\n   print &quot;Values inside the function: &quot;, mylist\r\n   return\r\n\r\n# Now you can call changeme function\r\nmylist = [10,20,30];\r\nchangeme( mylist );\r\nprint &quot;Values outside the function: &quot;, mylist</pre>\r\n\r\n<p>The parameter&nbsp;<em>mylist</em>&nbsp;is local to the function changeme. Changing mylist within the function does not affect&nbsp;<em>mylist</em>. The function accomplishes nothing and finally this would produce the following result &minus;</p>\r\n\r\n<pre>\r\nValues inside the function: [1, 2, 3, 4]\r\nValues outside the function: [10, 20, 30]\r\n</pre>\r\n\r\n<h2>Function Arguments</h2>\r\n\r\n<p>You can call a function by using the following types of formal arguments &minus;</p>\r\n\r\n<ul>\r\n	<li>Required arguments</li>\r\n	<li>Keyword arguments</li>\r\n	<li>Default arguments</li>\r\n	<li>Variable-length arguments</li>\r\n</ul>\r\n\r\n<h2>Required arguments</h2>\r\n\r\n<p>Required arguments are the arguments passed to a function in correct positional order. Here, the number of arguments in the function call should match exactly with the function definition.</p>\r\n\r\n<p>To call the function&nbsp;<em>printme()</em>, you definitely need to pass one argument, otherwise it gives a syntax error as follows &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/KIgYav\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef printme( str ):\r\n   &quot;This prints a passed string into this function&quot;\r\n   print str\r\n   return;\r\n\r\n# Now you can call printme function\r\nprintme()</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nTraceback (most recent call last):\r\nFile &quot;test.py&quot;, line 11, in &lt;module&gt;\r\nprintme();\r\nTypeError: printme() takes exactly 1 argument (0 given)\r\n</pre>\r\n\r\n<h2>Keyword arguments</h2>\r\n\r\n<p>Keyword arguments are related to the function calls. When you use keyword arguments in a function call, the caller identifies the arguments by the parameter name.</p>\r\n\r\n<p>This allows you to skip arguments or place them out of order because the Python interpreter is able to use the keywords provided to match the values with parameters. You can also make keyword calls to the&nbsp;<em>printme()</em>&nbsp;function in the following ways &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/A0FJD1\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef printme( str ):\r\n   &quot;This prints a passed string into this function&quot;\r\n   print str\r\n   return;\r\n\r\n# Now you can call printme function\r\nprintme( str = &quot;My string&quot;)</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nMy string\r\n</pre>\r\n\r\n<p>The following example gives more clear picture. Note that the order of parameters does not matter.</p>\r\n\r\n<p><a href=\"http://tpcg.io/hdONo3\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef printinfo( name, age ):\r\n   &quot;This prints a passed info into this function&quot;\r\n   print &quot;Name: &quot;, name\r\n   print &quot;Age &quot;, age\r\n   return;\r\n\r\n# Now you can call printinfo function\r\nprintinfo( age=50, name=&quot;miki&quot; )</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nName: miki\r\nAge 50\r\n</pre>\r\n\r\n<h2>Default arguments</h2>\r\n\r\n<p>A default argument is an argument that assumes a default value if a value is not provided in the function call for that argument. The following example gives an idea on default arguments, it prints default age if it is not passed &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/JWyo6q\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef printinfo( name, age = 35 ):\r\n   &quot;This prints a passed info into this function&quot;\r\n   print &quot;Name: &quot;, name\r\n   print &quot;Age &quot;, age\r\n   return;\r\n\r\n# Now you can call printinfo function\r\nprintinfo( age=50, name=&quot;miki&quot; )\r\nprintinfo( name=&quot;miki&quot; )</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nName: miki\r\nAge 50\r\nName: miki\r\nAge 35\r\n</pre>\r\n\r\n<h2>Variable-length arguments</h2>\r\n\r\n<p>You may need to process a function for more arguments than you specified while defining the function. These arguments are called&nbsp;<em>variable-length</em>&nbsp;arguments and are not named in the function definition, unlike required and default arguments.</p>\r\n\r\n<p>Syntax for a function with non-keyword variable arguments is this &minus;</p>\r\n\r\n<pre>\r\ndef functionname([formal_args,] *var_args_tuple ):\r\n&quot;function_docstring&quot;\r\nfunction_suite\r\nreturn [expression]\r\n</pre>\r\n\r\n<p>An asterisk (*) is placed before the variable name that holds the values of all nonkeyword variable arguments. This tuple remains empty if no additional arguments are specified during the function call. Following is a simple example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/qofSxL\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef printinfo( arg1, *vartuple ):\r\n   &quot;This prints a variable passed arguments&quot;\r\n   print &quot;Output is: &quot;\r\n   print arg1\r\n   for var in vartuple:\r\n      print var\r\n   return;\r\n\r\n# Now you can call printinfo function\r\nprintinfo( 10 )\r\nprintinfo( 70, 60, 50 )</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nOutput is:\r\n10\r\nOutput is:\r\n70\r\n60\r\n50\r\n</pre>\r\n\r\n<h2>The&nbsp;<em>Anonymous</em>&nbsp;Functions</h2>\r\n\r\n<p>These functions are called anonymous because they are not declared in the standard manner by using the&nbsp;<em>def</em>&nbsp;keyword. You can use the&nbsp;<em>lambda</em>&nbsp;keyword to create small anonymous functions.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Lambda forms can take any number of arguments but return just one value in the form of an expression. They cannot contain commands or multiple expressions.</p>\r\n	</li>\r\n	<li>\r\n	<p>An anonymous function cannot be a direct call to print because lambda requires an expression</p>\r\n	</li>\r\n	<li>\r\n	<p>Lambda functions have their own local namespace and cannot access variables other than those in their parameter list and those in the global namespace.</p>\r\n	</li>\r\n	<li>\r\n	<p>Although it appears that lambda&#39;s are a one-line version of a function, they are not equivalent to inline statements in C or C++, whose purpose is by passing function stack allocation during invocation for performance reasons.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The syntax of&nbsp;<em>lambda</em>&nbsp;functions contains only a single statement, which is as follows &minus;</p>\r\n\r\n<pre>\r\nlambda [arg1 [,arg2,.....argn]]:expression\r\n</pre>\r\n\r\n<p>Following is the example to show how&nbsp;<em>lambda</em>&nbsp;form of function works &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/TGEvCu\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\nsum = lambda arg1, arg2: arg1 + arg2;\r\n\r\n# Now you can call sum as a function\r\nprint &quot;Value of total : &quot;, sum( 10, 20 )\r\nprint &quot;Value of total : &quot;, sum( 20, 20 )</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nValue of total : 30\r\nValue of total : 40\r\n</pre>\r\n\r\n<h2>The&nbsp;<em>return</em>&nbsp;Statement</h2>\r\n\r\n<p>The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.</p>\r\n\r\n<p>All the above examples are not returning any value. You can return a value from a function as follows &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/FHnLKA\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Function definition is here\r\ndef sum( arg1, arg2 ):\r\n   # Add both the parameters and return them.&quot;\r\n   total = arg1 + arg2\r\n   print &quot;Inside the function : &quot;, total\r\n   return total;\r\n\r\n# Now you can call sum function\r\ntotal = sum( 10, 20 );\r\nprint &quot;Outside the function : &quot;, total </pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nInside the function : 30\r\nOutside the function : 30\r\n</pre>\r\n\r\n<h2>Scope of Variables</h2>\r\n\r\n<p>All variables in a program may not be accessible at all locations in that program. This depends on where you have declared a variable.</p>\r\n\r\n<p>The scope of a variable determines the portion of the program where you can access a particular identifier. There are two basic scopes of variables in Python &minus;</p>\r\n\r\n<ul>\r\n	<li>Global variables</li>\r\n	<li>Local variables</li>\r\n</ul>\r\n\r\n<h2>Global vs. Local variables</h2>\r\n\r\n<p>Variables that are defined inside a function body have a local scope, and those defined outside have a global scope.</p>\r\n\r\n<p>This means that local variables can be accessed only inside the function in which they are declared, whereas global variables can be accessed throughout the program body by all functions. When you call a function, the variables declared inside it are brought into scope. Following is a simple example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/LFZtHG\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntotal = 0; # This is global variable.\r\n# Function definition is here\r\ndef sum( arg1, arg2 ):\r\n   # Add both the parameters and return them.&quot;\r\n   total = arg1 + arg2; # Here total is local variable.\r\n   print &quot;Inside the function local total : &quot;, total\r\n   return total;\r\n\r\n# Now you can call sum function\r\nsum( 10, 20 );\r\nprint &quot;Outside the function global total : &quot;, total </pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\nInside the function local total : 30\r\nOutside the function global total : 0</pre>\r\n', 'Python'),
(12, 'Python - Exceptions ', '<h1>Python - Exceptions Handling</h1>\r\n\r\n<p>Python provides two very important features to handle any unexpected error in your Python programs and to add debugging capabilities in them &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Exception Handling</strong>&nbsp;&minus; This would be covered in this tutorial. Here is a list standard Exceptions available in Python:&nbsp;<a href=\"https://www.tutorialspoint.com/python/standard_exceptions.htm\">Standard Exceptions</a>.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Assertions</strong>&nbsp;&minus; This would be covered in&nbsp;<a href=\"https://www.tutorialspoint.com/python/assertions_in_python.htm\">Assertions in Python</a>&nbsp;tutorial.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>List of Standard Exceptions &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Exception Name &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>Exception</strong></p>\r\n\r\n			<p>Base class for all exceptions</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>StopIteration</strong></p>\r\n\r\n			<p>Raised when the next() method of an iterator does not point to any object.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>SystemExit</strong></p>\r\n\r\n			<p>Raised by the sys.exit() function.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>StandardError</strong></p>\r\n\r\n			<p>Base class for all built-in exceptions except StopIteration and SystemExit.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td>\r\n			<p><strong>ArithmeticError</strong></p>\r\n\r\n			<p>Base class for all errors that occur for numeric calculation.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td>\r\n			<p><strong>OverflowError</strong></p>\r\n\r\n			<p>Raised when a calculation exceeds maximum limit for a numeric type.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td>\r\n			<p><strong>FloatingPointError</strong></p>\r\n\r\n			<p>Raised when a floating point calculation fails.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td>\r\n			<p><strong>ZeroDivisionError</strong></p>\r\n\r\n			<p>Raised when division or modulo by zero takes place for all numeric types.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td>\r\n			<p><strong>AssertionError</strong></p>\r\n\r\n			<p>Raised in case of failure of the Assert statement.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td>\r\n			<p><strong>AttributeError</strong></p>\r\n\r\n			<p>Raised in case of failure of attribute reference or assignment.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11</td>\r\n			<td>\r\n			<p><strong>EOFError</strong></p>\r\n\r\n			<p>Raised when there is no input from either the raw_input() or input() function and the end of file is reached.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12</td>\r\n			<td>\r\n			<p><strong>ImportError</strong></p>\r\n\r\n			<p>Raised when an import statement fails.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>13</td>\r\n			<td>\r\n			<p><strong>KeyboardInterrupt</strong></p>\r\n\r\n			<p>Raised when the user interrupts program execution, usually by pressing Ctrl+c.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>14</td>\r\n			<td>\r\n			<p><strong>LookupError</strong></p>\r\n\r\n			<p>Base class for all lookup errors.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>15</td>\r\n			<td>\r\n			<p><strong>IndexError</strong></p>\r\n\r\n			<p>Raised when an index is not found in a sequence.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>16</td>\r\n			<td>\r\n			<p><strong>KeyError</strong></p>\r\n\r\n			<p>Raised when the specified key is not found in the dictionary.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>17</td>\r\n			<td>\r\n			<p><strong>NameError</strong></p>\r\n\r\n			<p>Raised when an identifier is not found in the local or global namespace.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>18</td>\r\n			<td>\r\n			<p><strong>UnboundLocalError</strong></p>\r\n\r\n			<p>Raised when trying to access a local variable in a function or method but no value has been assigned to it.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>19</td>\r\n			<td>\r\n			<p><strong>EnvironmentError</strong></p>\r\n\r\n			<p>Base class for all exceptions that occur outside the Python environment.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>20</td>\r\n			<td>\r\n			<p><strong>IOError</strong></p>\r\n\r\n			<p>Raised when an input/ output operation fails, such as the print statement or the open() function when trying to open a file that does not exist.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>21</td>\r\n			<td>\r\n			<p><strong>IOError</strong></p>\r\n\r\n			<p>Raised for operating system-related errors.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>22</td>\r\n			<td>\r\n			<p><strong>SyntaxError</strong></p>\r\n\r\n			<p>Raised when there is an error in Python syntax.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>23</td>\r\n			<td>\r\n			<p><strong>IndentationError</strong></p>\r\n\r\n			<p>Raised when indentation is not specified properly.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>24</td>\r\n			<td>\r\n			<p><strong>SystemError</strong></p>\r\n\r\n			<p>Raised when the interpreter finds an internal problem, but when this error is encountered the Python interpreter does not exit.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>25</td>\r\n			<td>\r\n			<p><strong>SystemExit</strong></p>\r\n\r\n			<p>Raised when Python interpreter is quit by using the sys.exit() function. If not handled in the code, causes the interpreter to exit.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>26</td>\r\n			<td>\r\n			<p><strong>TypeError</strong></p>\r\n\r\n			<p>Raised when an operation or function is attempted that is invalid for the specified data type.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>27</td>\r\n			<td>\r\n			<p><strong>ValueError</strong></p>\r\n\r\n			<p>Raised when the built-in function for a data type has the valid type of arguments, but the arguments have invalid values specified.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>28</td>\r\n			<td>\r\n			<p><strong>RuntimeError</strong></p>\r\n\r\n			<p>Raised when a generated error does not fall into any category.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>29</td>\r\n			<td>\r\n			<p><strong>NotImplementedError</strong></p>\r\n\r\n			<p>Raised when an abstract method that needs to be implemented in an inherited class is not actually implemented.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>Assertions in Python</h3>\r\n\r\n<p>An assertion is a sanity-check that you can turn on or turn off when you are done with your testing of the program.</p>\r\n\r\n<p>The easiest way to think of an assertion is to liken it to a&nbsp;<strong>raise-if</strong>&nbsp;statement (or to be more accurate, a raise-if-not statement). An expression is tested, and if the result comes up false, an exception is raised.</p>\r\n\r\n<p>Assertions are carried out by the assert statement, the newest keyword to Python, introduced in version 1.5.</p>\r\n\r\n<p>Programmers often place assertions at the start of a function to check for valid input, and after a function call to check for valid output.</p>\r\n\r\n<h3>The&nbsp;<em>assert</em>&nbsp;Statement</h3>\r\n\r\n<p>When it encounters an assert statement, Python evaluates the accompanying expression, which is hopefully true. If the expression is false, Python raises an&nbsp;<em>AssertionError</em>&nbsp;exception.</p>\r\n\r\n<p>The&nbsp;<strong>syntax</strong>&nbsp;for assert is &minus;</p>\r\n\r\n<pre>\r\nassert Expression[, Arguments]\r\n</pre>\r\n\r\n<p>If the assertion fails, Python uses ArgumentExpression as the argument for the AssertionError. AssertionError exceptions can be caught and handled like any other exception using the try-except statement, but if not handled, they will terminate the program and produce a traceback.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Here is a function that converts a temperature from degrees Kelvin to degrees Fahrenheit. Since zero degrees Kelvin is as cold as it gets, the function bails out if it sees a negative temperature &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/fBXCk7\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\ndef KelvinToFahrenheit(Temperature):\r\n   assert (Temperature &gt;= 0),&quot;Colder than absolute zero!&quot;\r\n   return ((Temperature-273)*1.8)+32\r\nprint KelvinToFahrenheit(273)\r\nprint int(KelvinToFahrenheit(505.78))\r\nprint KelvinToFahrenheit(-5)</pre>\r\n\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n32.0\r\n451\r\nTraceback (most recent call last):\r\nFile &quot;test.py&quot;, line 9, in &lt;module&gt;\r\nprint KelvinToFahrenheit(-5)\r\nFile &quot;test.py&quot;, line 4, in KelvinToFahrenheit\r\nassert (Temperature &gt;= 0),&quot;Colder than absolute zero!&quot;\r\nAssertionError: Colder than absolute zero!\r\n</pre>\r\n\r\n<h2>What is Exception?</h2>\r\n\r\n<p>An exception is an event, which occurs during the execution of a program that disrupts the normal flow of the program&#39;s instructions. In general, when a Python script encounters a situation that it cannot cope with, it raises an exception. An exception is a Python object that represents an error.</p>\r\n\r\n<p>When a Python script raises an exception, it must either handle the exception immediately otherwise it terminates and quits.</p>\r\n\r\n<h2>Handling an exception</h2>\r\n\r\n<p>If you have some&nbsp;<em>suspicious</em>&nbsp;code that may raise an exception, you can defend your program by placing the suspicious code in a&nbsp;<strong>try:</strong>&nbsp;block. After the try: block, include an&nbsp;<strong>except:</strong>&nbsp;statement, followed by a block of code which handles the problem as elegantly as possible.</p>\r\n\r\n<h3>Syntax</h3>\r\n\r\n<p>Here is simple syntax of&nbsp;<em>try....except...else</em>&nbsp;blocks &minus;</p>\r\n\r\n<pre>\r\ntry:\r\nYou do your operations here;\r\n......................\r\nexcept <em>ExceptionI</em>:\r\nIf there is ExceptionI, then execute this block.\r\nexcept <em>ExceptionII</em>:\r\nIf there is ExceptionII, then execute this block.\r\n......................\r\nelse:\r\nIf there is no exception then execute this block.\r\n</pre>\r\n\r\n<p>Here are few important points about the above-mentioned syntax &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>A single try statement can have multiple except statements. This is useful when the try block contains statements that may throw different types of exceptions.</p>\r\n	</li>\r\n	<li>\r\n	<p>You can also provide a generic except clause, which handles any exception.</p>\r\n	</li>\r\n	<li>\r\n	<p>After the except clause(s), you can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception.</p>\r\n	</li>\r\n	<li>\r\n	<p>The else-block is a good place for code that does not need the try: block&#39;s protection.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>This example opens a file, writes content in the, file and comes out gracefully because there is no problem at all &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/wDwtP9\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntry:\r\n   fh = open(&quot;testfile&quot;, &quot;w&quot;)\r\n   fh.write(&quot;This is my test file for exception handling!!&quot;)\r\nexcept IOError:\r\n   print &quot;Error: can&#39;t find file or read data&quot;\r\nelse:\r\n   print &quot;Written content in the file successfully&quot;\r\n   fh.close()</pre>\r\n\r\n<p>This produces the following result &minus;</p>\r\n\r\n<pre>\r\nWritten content in the file successfully\r\n</pre>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>This example tries to open a file where you do not have write permission, so it raises an exception &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/guvZfU\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntry:\r\n   fh = open(&quot;testfile&quot;, &quot;r&quot;)\r\n   fh.write(&quot;This is my test file for exception handling!!&quot;)\r\nexcept IOError:\r\n   print &quot;Error: can&#39;t find file or read data&quot;\r\nelse:\r\n   print &quot;Written content in the file successfully&quot;</pre>\r\n\r\n<p>This produces the following result &minus;</p>\r\n\r\n<pre>\r\nError: can&#39;t find file or read data\r\n</pre>\r\n\r\n<h2>The&nbsp;<em>except</em>&nbsp;Clause with No Exceptions</h2>\r\n\r\n<p>You can also use the except statement with no exceptions defined as follows &minus;</p>\r\n\r\n<pre>\r\ntry:\r\nYou do your operations here;\r\n......................\r\nexcept:\r\nIf there is any exception, then execute this block.\r\n......................\r\nelse:\r\nIf there is no exception then execute this block.\r\n</pre>\r\n\r\n<p>This kind of a&nbsp;<strong>try-except</strong>&nbsp;statement catches all the exceptions that occur. Using this kind of try-except statement is not considered a good programming practice though, because it catches all exceptions but does not make the programmer identify the root cause of the problem that may occur.</p>\r\n\r\n<h2>The&nbsp;<em>except</em>&nbsp;Clause with Multiple Exceptions</h2>\r\n\r\n<p>You can also use the same&nbsp;<em>except</em>&nbsp;statement to handle multiple exceptions as follows &minus;</p>\r\n\r\n<pre>\r\ntry:\r\n   You do your operations here;\r\n   ......................\r\nexcept(Exception1[, Exception2[,...ExceptionN]]]):\r\n   If there is any exception from the given exception list, \r\n   then execute this block.\r\n   ......................\r\nelse:\r\n   If there is no exception then execute this block. </pre>\r\n\r\n<h2>The try-finally Clause</h2>\r\n\r\n<p>You can use a&nbsp;<strong>finally:</strong>&nbsp;block along with a&nbsp;<strong>try:</strong>&nbsp;block. The finally block is a place to put any code that must execute, whether the try-block raised an exception or not. The syntax of the try-finally statement is this &minus;</p>\r\n\r\n<pre>\r\ntry:\r\n   You do your operations here;\r\n   ......................\r\n   Due to any exception, this may be skipped.\r\nfinally:\r\n   This would always be executed.\r\n   ......................</pre>\r\n\r\n<p>You cannot use&nbsp;<em>else</em>&nbsp;clause as well along with a finally clause.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/Pfq1qs\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntry:\r\n   fh = open(&quot;testfile&quot;, &quot;w&quot;)\r\n   fh.write(&quot;This is my test file for exception handling!!&quot;)\r\nfinally:\r\n   print &quot;Error: can&#39;t find file or read data&quot;</pre>\r\n\r\n<p>If you do not have permission to open the file in writing mode, then this will produce the following result &minus;</p>\r\n\r\n<pre>\r\nError: can&#39;t find file or read data\r\n</pre>\r\n\r\n<p>Same example can be written more cleanly as follows &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/5p1Wkr\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\ntry:\r\n   fh = open(&quot;testfile&quot;, &quot;w&quot;)\r\n   try:\r\n      fh.write(&quot;This is my test file for exception handling!!&quot;)\r\n   finally:\r\n      print &quot;Going to close the file&quot;\r\n      fh.close()\r\nexcept IOError:\r\n   print &quot;Error: can&#39;t find file or read data&quot;</pre>\r\n\r\n<p>When an exception is thrown in the&nbsp;<em>try</em>&nbsp;block, the execution immediately passes to the&nbsp;<em>finally</em>&nbsp;block. After all the statements in the&nbsp;<em>finally</em>&nbsp;block are executed, the exception is raised again and is handled in the&nbsp;<em>except</em>&nbsp;statements if present in the next higher layer of the&nbsp;<em>try-except</em>&nbsp;statement.</p>\r\n\r\n<h2>Argument of an Exception</h2>\r\n\r\n<p>An exception can have an&nbsp;<em>argument</em>, which is a value that gives additional information about the problem. The contents of the argument vary by exception. You capture an exception&#39;s argument by supplying a variable in the except clause as follows &minus;</p>\r\n\r\n<pre>\r\ntry:\r\n   You do your operations here;\r\n   ......................\r\nexcept <em>ExceptionType, Argument</em>:\r\n   You can print value of Argument here...</pre>\r\n\r\n<p>If you write the code to handle a single exception, you can have a variable follow the name of the exception in the except statement. If you are trapping multiple exceptions, you can have a variable follow the tuple of the exception.</p>\r\n\r\n<p>This variable receives the value of the exception mostly containing the cause of the exception. The variable can receive a single value or multiple values in the form of a tuple. This tuple usually contains the error string, the error number, and an error location.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Following is an example for a single exception &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/Zr1ck8\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n# Define a function here.\r\ndef temp_convert(var):\r\n   try:\r\n      return int(var)\r\n   except ValueError, Argument:\r\n      print &quot;The argument does not contain numbers\n&quot;, Argument\r\n\r\n# Call above function here.\r\ntemp_convert(&quot;xyz&quot;);</pre>\r\n\r\n<p>This produces the following result &minus;</p>\r\n\r\n<pre>\r\nThe argument does not contain numbers\r\ninvalid literal for int() with base 10: &#39;xyz&#39;\r\n</pre>\r\n\r\n<h2>Raising an Exceptions</h2>\r\n\r\n<p>You can raise exceptions in several ways by using the raise statement. The general syntax for the&nbsp;<strong>raise</strong>&nbsp;statement is as follows.</p>\r\n\r\n<h3>Syntax</h3>\r\n\r\n<pre>\r\nraise [Exception [, args [, traceback]]]\r\n</pre>\r\n\r\n<p>Here,&nbsp;<em>Exception</em>&nbsp;is the type of exception (for example, NameError) and&nbsp;<em>argument</em>&nbsp;is a value for the exception argument. The argument is optional; if not supplied, the exception argument is None.</p>\r\n\r\n<p>The final argument, traceback, is also optional (and rarely used in practice), and if present, is the traceback object used for the exception.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>An exception can be a string, a class or an object. Most of the exceptions that the Python core raises are classes, with an argument that is an instance of the class. Defining new exceptions is quite easy and can be done as follows &minus;</p>\r\n\r\n<pre>\r\ndef functionName( level ):\r\n   if level &lt; 1:\r\n      raise &quot;Invalid level!&quot;, level\r\n      # The code below to this would not be executed\r\n      # if we raise the exception</pre>\r\n\r\n<p><strong>Note:</strong>&nbsp;In order to catch an exception, an &quot;except&quot; clause must refer to the same exception thrown either class object or simple string. For example, to capture above exception, we must write the except clause as follows &minus;</p>\r\n\r\n<pre>\r\ntry:\r\n   Business Logic here...\r\nexcept &quot;Invalid level!&quot;:\r\n   Exception handling here...\r\nelse:\r\n   Rest of the code here...</pre>\r\n\r\n<h2>User-Defined Exceptions</h2>\r\n\r\n<p>Python also allows you to create your own exceptions by deriving classes from the standard built-in exceptions.</p>\r\n\r\n<p>Here is an example related to&nbsp;<em>RuntimeError</em>. Here, a class is created that is subclassed from&nbsp;<em>RuntimeError</em>. This is useful when you need to display more specific information when an exception is caught.</p>\r\n\r\n<p>In the try block, the user-defined exception is raised and caught in the except block. The variable e is used to create an instance of the class&nbsp;<em>Networkerror</em>.</p>\r\n\r\n<pre>\r\nclass Networkerror(RuntimeError):\r\n   def __init__(self, arg):\r\n      self.args = arg</pre>\r\n\r\n<p>So once you defined above class, you can raise the exception as follows &minus;</p>\r\n\r\n<pre>\r\ntry:\r\n   raise Networkerror(&quot;Bad hostname&quot;)\r\nexcept Networkerror,e:\r\n   print e.args</pre>\r\n', 'Python'),
(13, 'R - Data types', '<h1>R - Data Types</h1>\r\n\r\n<p>Generally, while doing programming in any programming language, you need to use various variables to store various information. Variables are nothing but reserved memory locations to store values. This means that, when you create a variable you reserve some space in memory.</p>\r\n\r\n<p>You may like to store information of various data types like character, wide character, integer, floating point, double floating point, Boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.</p>\r\n\r\n<p>In contrast to other programming languages like C and java in R, the variables are not declared as some data type. The variables are assigned with R-Objects and the data type of the R-object becomes the data type of the variable. There are many types of R-objects. The frequently used ones are &minus;</p>\r\n\r\n<ul>\r\n	<li>Vectors</li>\r\n	<li>Lists</li>\r\n	<li>Matrices</li>\r\n	<li>Arrays</li>\r\n	<li>Factors</li>\r\n	<li>Data Frames</li>\r\n</ul>\r\n\r\n<p>The simplest of these objects is the&nbsp;<strong>vector object</strong>&nbsp;and there are six data types of these atomic vectors, also termed as six classes of vectors. The other R-Objects are built upon the atomic vectors.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Data Type</th>\r\n			<th>Example</th>\r\n			<th>Verify</th>\r\n		</tr>\r\n		<tr>\r\n			<td>Logical</td>\r\n			<td>TRUE, FALSE</td>\r\n			<td>\r\n			<p><a href=\"http://tpcg.io/JTJk0B\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n			<pre>\r\nv &lt;- TRUE \r\nprint(class(v))</pre>\r\n\r\n			<p>it produces the following result &minus;</p>\r\n\r\n			<pre>\r\n[1] &quot;logical&quot;\r\n</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Numeric</td>\r\n			<td>12.3, 5, 999</td>\r\n			<td>\r\n			<p><a href=\"http://tpcg.io/xZEowl\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n			<pre>\r\nv &lt;- 23.5\r\nprint(class(v))</pre>\r\n\r\n			<p>it produces the following result &minus;</p>\r\n\r\n			<pre>\r\n[1] &quot;numeric&quot;\r\n</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Integer</td>\r\n			<td>2L, 34L, 0L</td>\r\n			<td>\r\n			<p><a href=\"http://tpcg.io/NxIdEM\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n			<pre>\r\nv &lt;- 2L\r\nprint(class(v))</pre>\r\n\r\n			<p>it produces the following result &minus;</p>\r\n\r\n			<pre>\r\n[1] &quot;integer&quot;\r\n</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Complex</td>\r\n			<td>3 + 2i</td>\r\n			<td>\r\n			<p><a href=\"http://tpcg.io/4vSOmw\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n			<pre>\r\nv &lt;- 2+5i\r\nprint(class(v))</pre>\r\n\r\n			<p>it produces the following result &minus;</p>\r\n\r\n			<pre>\r\n[1] &quot;complex&quot;\r\n</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Character</td>\r\n			<td>&#39;a&#39; , &#39;&quot;good&quot;, &quot;TRUE&quot;, &#39;23.4&#39;</td>\r\n			<td>\r\n			<p><a href=\"http://tpcg.io/YKv1ut\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n			<pre>\r\nv &lt;- &quot;TRUE&quot;\r\nprint(class(v))</pre>\r\n\r\n			<p>it produces the following result &minus;</p>\r\n\r\n			<pre>\r\n[1] &quot;character&quot;\r\n</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Raw</td>\r\n			<td>&quot;Hello&quot; is stored as 48 65 6c 6c 6f</td>\r\n			<td>\r\n			<p><a href=\"http://tpcg.io/hJkXrL\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n			<pre>\r\nv &lt;- charToRaw(&quot;Hello&quot;)\r\nprint(class(v))</pre>\r\n\r\n			<p>it produces the following result &minus;</p>\r\n\r\n			<pre>\r\n[1] &quot;raw&quot;\r\n</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>In R programming, the very basic data types are the R-objects called&nbsp;<strong>vectors</strong>&nbsp;which hold elements of different classes as shown above. Please note in R the number of classes is not confined to only the above six types. For example, we can use many atomic vectors and create an array whose class will become array.</p>\r\n', 'R-Programming'),
(14, 'R - Data structures', '<h2>Vectors</h2>\r\n\r\n<p>When you want to create vector with more than one element, you should use&nbsp;<strong>c()</strong>&nbsp;function which means to combine the elements into a vector.</p>\r\n\r\n<p><a href=\"http://tpcg.io/LcQaXR\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a vector.\r\napple &lt;- c(&#39;red&#39;,&#39;green&#39;,&quot;yellow&quot;)\r\nprint(apple)\r\n\r\n# Get the class of the vector.\r\nprint(class(apple))</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[1] &quot;red&quot; &quot;green&quot; &quot;yellow&quot;\r\n[1] &quot;character&quot;\r\n</pre>\r\n\r\n<h2>Lists</h2>\r\n\r\n<p>A list is an R-object which can contain many different types of elements inside it like vectors, functions and even another list inside it.</p>\r\n\r\n<p><a href=\"http://tpcg.io/pueuoc\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a list.\r\nlist1 &lt;- list(c(2,5,3),21.3,sin)\r\n\r\n# Print the list.\r\nprint(list1)</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[[1]]\r\n[1] 2 5 3\r\n\r\n[[2]]\r\n[1] 21.3\r\n\r\n[[3]]\r\nfunction (x) .Primitive(&quot;sin&quot;)\r\n</pre>\r\n\r\n<h2>Matrices</h2>\r\n\r\n<p>A matrix is a two-dimensional rectangular data set. It can be created using a vector input to the matrix function.</p>\r\n\r\n<p><a href=\"http://tpcg.io/tV7jUF\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a matrix.\r\nM = matrix( c(&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;b&#39;,&#39;a&#39;), nrow = 2, ncol = 3, byrow = TRUE)\r\nprint(M)</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[,1] [,2] [,3]\r\n[1,] &quot;a&quot; &quot;a&quot; &quot;b&quot;\r\n[2,] &quot;c&quot; &quot;b&quot; &quot;a&quot;\r\n</pre>\r\n\r\n<h2>Arrays</h2>\r\n\r\n<p>While matrices are confined to two dimensions, arrays can be of any number of dimensions. The array function takes a dim attribute which creates the required number of dimension. In the below example we create an array with two elements which are 3x3 matrices each.</p>\r\n\r\n<p><a href=\"http://tpcg.io/Kewzed\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create an array.\r\na &lt;- array(c(&#39;green&#39;,&#39;yellow&#39;),dim = c(3,3,2))\r\nprint(a)</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n, , 1\r\n\r\n[,1] [,2] [,3]\r\n[1,] &quot;green&quot; &quot;yellow&quot; &quot;green&quot;\r\n[2,] &quot;yellow&quot; &quot;green&quot; &quot;yellow&quot;\r\n[3,] &quot;green&quot; &quot;yellow&quot; &quot;green&quot;\r\n\r\n, , 2\r\n\r\n[,1] [,2] [,3]\r\n[1,] &quot;yellow&quot; &quot;green&quot; &quot;yellow&quot;\r\n[2,] &quot;green&quot; &quot;yellow&quot; &quot;green&quot;\r\n[3,] &quot;yellow&quot; &quot;green&quot; &quot;yellow&quot;\r\n</pre>\r\n\r\n<h2>Factors</h2>\r\n\r\n<p>Factors are the r-objects which are created using a vector. It stores the vector along with the distinct values of the elements in the vector as labels. The labels are always character irrespective of whether it is numeric or character or Boolean etc. in the input vector. They are useful in statistical modeling.</p>\r\n\r\n<p>Factors are created using the&nbsp;<strong>factor()</strong>&nbsp;function. The&nbsp;<strong>nlevels</strong>&nbsp;functions gives the count of levels.</p>\r\n\r\n<p><a href=\"http://tpcg.io/oKREZj\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a vector.\r\napple_colors &lt;- c(&#39;green&#39;,&#39;green&#39;,&#39;yellow&#39;,&#39;red&#39;,&#39;red&#39;,&#39;red&#39;,&#39;green&#39;)\r\n\r\n# Create a factor object.\r\nfactor_apple &lt;- factor(apple_colors)\r\n\r\n# Print the factor.\r\nprint(factor_apple)\r\nprint(nlevels(factor_apple))</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[1] green green yellow red red red green\r\nLevels: green red yellow\r\n[1] 3\r\n</pre>\r\n\r\n<h2>Data Frames</h2>\r\n\r\n<p>Data frames are tabular data objects. Unlike a matrix in data frame each column can contain different modes of data. The first column can be numeric while the second column can be character and third column can be logical. It is a list of vectors of equal length.</p>\r\n\r\n<p>Data Frames are created using the&nbsp;<strong>data.frame()</strong>&nbsp;function.</p>\r\n\r\n<p><a href=\"http://tpcg.io/UiiDfw\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create the data frame.\r\nBMI &lt;- 	data.frame(\r\n   gender = c(&quot;Male&quot;, &quot;Male&quot;,&quot;Female&quot;), \r\n   height = c(152, 171.5, 165), \r\n   weight = c(81,93, 78),\r\n   Age = c(42,38,26)\r\n)\r\nprint(BMI)</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\ngender height weight Age\r\n1 Male 152.0 81 42\r\n2 Male 171.5 93 38\r\n3 Female 165.0 78 26</pre>\r\n', 'R-Programming');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(15, 'R - Functions', '<h1>R - Functions</h1>\r\n\r\n<p>A function is a set of statements organized together to perform a specific task. R has a large number of in-built functions and the user can create their own functions.</p>\r\n\r\n<p>In R, a function is an object so the R interpreter is able to pass control to the function, along with arguments that may be necessary for the function to accomplish the actions.</p>\r\n\r\n<p>The function in turn performs its task and returns control to the interpreter as well as any result which may be stored in other objects.</p>\r\n\r\n<h2>Function Definition</h2>\r\n\r\n<p>An R function is created by using the keyword&nbsp;<strong>function</strong>. The basic syntax of an R function definition is as follows &minus;</p>\r\n\r\n<pre>\r\nfunction_name &lt;- function(arg_1, arg_2, ...) {\r\nFunction body\r\n}\r\n</pre>\r\n\r\n<h2>Function Components</h2>\r\n\r\n<p>The different parts of a function are &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Function Name</strong>&nbsp;&minus; This is the actual name of the function. It is stored in R environment as an object with this name.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Arguments</strong>&nbsp;&minus; An argument is a placeholder. When a function is invoked, you pass a value to the argument. Arguments are optional; that is, a function may contain no arguments. Also arguments can have default values.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Function Body</strong>&nbsp;&minus; The function body contains a collection of statements that defines what the function does.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Return Value</strong>&nbsp;&minus; The return value of a function is the last expression in the function body to be evaluated.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>R has many&nbsp;<strong>in-built</strong>&nbsp;functions which can be directly called in the program without defining them first. We can also create and use our own functions referred as&nbsp;<strong>user defined</strong>&nbsp;functions.</p>\r\n\r\n<h2>Built-in Function</h2>\r\n\r\n<p>Simple examples of in-built functions are&nbsp;<strong>seq()</strong>,&nbsp;<strong>mean()</strong>,&nbsp;<strong>max()</strong>,&nbsp;<strong>sum(x)</strong>&nbsp;and&nbsp;<strong>paste(...)</strong>&nbsp;etc. They are directly called by user written programs. You can refer&nbsp;<a href=\"https://cran.r-project.org/doc/contrib/Short-refcard.pdf\" rel=\"nofollow\" target=\"_blank\">most widely used R functions.</a></p>\r\n\r\n<p><a href=\"http://tpcg.io/pcfp4i\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a sequence of numbers from 32 to 44.\r\nprint(seq(32,44))\r\n\r\n# Find mean of numbers from 25 to 82.\r\nprint(mean(25:82))\r\n\r\n# Find sum of numbers frm 41 to 68.\r\nprint(sum(41:68))</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[1] 32 33 34 35 36 37 38 39 40 41 42 43 44\r\n[1] 53.5\r\n[1] 1526\r\n</pre>\r\n\r\n<h2>User-defined Function</h2>\r\n\r\n<p>We can create user-defined functions in R. They are specific to what a user wants and once created they can be used like the built-in functions. Below is an example of how a function is created and used.</p>\r\n\r\n<pre>\r\n# Create a function to print squares of numbers in sequence.\r\nnew.function &lt;- function(a) {\r\n   for(i in 1:a) {\r\n      b &lt;- i^2\r\n      print(b)\r\n   }\r\n}	</pre>\r\n\r\n<h2>Calling a Function</h2>\r\n\r\n<p><a href=\"http://tpcg.io/WxqnYt\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a function to print squares of numbers in sequence.\r\nnew.function &lt;- function(a) {\r\n   for(i in 1:a) {\r\n      b &lt;- i^2\r\n      print(b)\r\n   }\r\n}\r\n\r\n# Call the function new.function supplying 6 as an argument.\r\nnew.function(6)</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[1] 1\r\n[1] 4\r\n[1] 9\r\n[1] 16\r\n[1] 25\r\n[1] 36\r\n</pre>\r\n\r\n<h3>Calling a Function without an Argument</h3>\r\n\r\n<p><a href=\"http://tpcg.io/QkSl0S\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a function without an argument.\r\nnew.function &lt;- function() {\r\n   for(i in 1:5) {\r\n      print(i^2)\r\n   }\r\n}	\r\n\r\n# Call the function without supplying an argument.\r\nnew.function()</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[1] 1\r\n[1] 4\r\n[1] 9\r\n[1] 16\r\n[1] 25\r\n</pre>\r\n\r\n<h3>Calling a Function with Argument Values (by position and by name)</h3>\r\n\r\n<p>The arguments to a function call can be supplied in the same sequence as defined in the function or they can be supplied in a different sequence but assigned to the names of the arguments.</p>\r\n\r\n<p><a href=\"http://tpcg.io/vb2nHS\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a function with arguments.\r\nnew.function &lt;- function(a,b,c) {\r\n   result &lt;- a * b + c\r\n   print(result)\r\n}\r\n\r\n# Call the function by position of arguments.\r\nnew.function(5,3,11)\r\n\r\n# Call the function by names of the arguments.\r\nnew.function(a = 11, b = 5, c = 3)</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[1] 26\r\n[1] 58\r\n</pre>\r\n\r\n<h3>Calling a Function with Default Argument</h3>\r\n\r\n<p>We can define the value of the arguments in the function definition and call the function without supplying any argument to get the default result. But we can also call such functions by supplying new values of the argument and get non default result.</p>\r\n\r\n<p><a href=\"http://tpcg.io/oCyF7z\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a function with arguments.\r\nnew.function &lt;- function(a = 3, b = 6) {\r\n   result &lt;- a * b\r\n   print(result)\r\n}\r\n\r\n# Call the function without giving any argument.\r\nnew.function()\r\n\r\n# Call the function with giving new values of the argument.\r\nnew.function(9,5)</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[1] 18\r\n[1] 45\r\n</pre>\r\n\r\n<h2>Lazy Evaluation of Function</h2>\r\n\r\n<p>Arguments to functions are evaluated lazily, which means so they are evaluated only when needed by the function body.</p>\r\n\r\n<p><a href=\"http://tpcg.io/Uiqyta\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n# Create a function with arguments.\r\nnew.function &lt;- function(a, b) {\r\n   print(a^2)\r\n   print(a)\r\n   print(b)\r\n}\r\n\r\n# Evaluate the function without supplying one of the arguments.\r\nnew.function(6)</pre>\r\n\r\n<p>When we execute the above code, it produces the following result &minus;</p>\r\n\r\n<pre>\r\n[1] 36\r\n[1] 6\r\nError in print(b) : argument &quot;b&quot; is missing, with no default</pre>\r\n', 'R-Programming'),
(16, 'R - Loops', '<h1>R - Loops</h1>\r\n\r\n<p>There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially. The first statement in a function is executed first, followed by the second, and so on.</p>\r\n\r\n<p>Programming languages provide various control structures that allow for more complicated execution paths.</p>\r\n\r\n<p>A loop statement allows us to execute a statement or group of statements multiple times and the following is the general form of a loop statement in most of the programming languages &minus;</p>\r\n\r\n<p><img alt=\"Loop Architecture\" src=\"https://www.tutorialspoint.com/r/images/loop_architecture.jpg\" /></p>\r\n\r\n<p>R programming language provides the following kinds of loop to handle looping requirements. Click the following links to check their detail.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Loop Type &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/r/r_repeat_loop.htm\">repeat loop</a>\r\n			<p>Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/r/r_while_loop.htm\">while loop</a>\r\n			<p>Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/r/r_for_loop.htm\">for loop</a>\r\n			<p>Like a while statement, except that it tests the condition at the end of the loop body.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Loop Control Statements</h2>\r\n\r\n<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>\r\n\r\n<p>R supports the following control statements. Click the following links to check their detail.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Control Statement &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/r/r_break_statement.htm\">break statement</a>\r\n			<p>Terminates the&nbsp;<strong>loop</strong>&nbsp;statement and transfers execution to the statement immediately following the loop.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/r/r_next_statement.htm\">Next statement</a>\r\n			<p>The&nbsp;<strong>next</strong>&nbsp;statement simulates the behavior of R switch.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 'R-Programming'),
(17, 'R - Packages', '<h1>R - Packages</h1>\r\n\r\n<p>R packages are a collection of R functions, complied code and sample data. They are stored under a directory called&nbsp;<strong>&quot;library&quot;</strong>&nbsp;in the R environment. By default, R installs a set of packages during installation. More packages are added later, when they are needed for some specific purpose. When we start the R console, only the default packages are available by default. Other packages which are already installed have to be loaded explicitly to be used by the R program that is going to use them.</p>\r\n\r\n<p>All the packages available in R language are listed at&nbsp;<a href=\"https://cran.r-project.org/web/packages/available_packages_by_name.html\" rel=\"nofollow\" target=\"_blank\">R Packages.</a></p>\r\n\r\n<p>Below is a list of commands to be used to check, verify and use the R packages.</p>\r\n\r\n<h2>Check Available R Packages</h2>\r\n\r\n<p>Get library locations containing R packages</p>\r\n\r\n<p><a href=\"http://tpcg.io/MfTDys\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\n.libPaths()</pre>\r\n\r\n<p>When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.</p>\r\n\r\n<pre>\r\n[2] &quot;C:/Program Files/R/R-3.2.2/library&quot;\r\n</pre>\r\n\r\n<h2>Get the list of all the packages installed</h2>\r\n\r\n<p><a href=\"http://tpcg.io/DEnHgl\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nlibrary()</pre>\r\n\r\n<p>When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.</p>\r\n\r\n<pre>\r\nPackages in library &lsquo;C:/Program Files/R/R-3.2.2/library&rsquo;:\r\n\r\nbase The R Base Package\r\nboot Bootstrap Functions (Originally by Angelo Canty\r\nfor S)\r\nclass Functions for Classification\r\ncluster &quot;Finding Groups in Data&quot;: Cluster Analysis\r\nExtended Rousseeuw et al.\r\ncodetools Code Analysis Tools for R\r\ncompiler The R Compiler Package\r\ndatasets The R Datasets Package\r\nforeign Read Data Stored by &#39;Minitab&#39;, &#39;S&#39;, &#39;SAS&#39;,\r\n&#39;SPSS&#39;, &#39;Stata&#39;, &#39;Systat&#39;, &#39;Weka&#39;, &#39;dBase&#39;, ...\r\ngraphics The R Graphics Package\r\ngrDevices The R Graphics Devices and Support for Colours\r\nand Fonts\r\ngrid The Grid Graphics Package\r\nKernSmooth Functions for Kernel Smoothing Supporting Wand\r\n&amp; Jones (1995)\r\nlattice Trellis Graphics for R\r\nMASS Support Functions and Datasets for Venables and\r\nRipley&#39;s MASS\r\nMatrix Sparse and Dense Matrix Classes and Methods\r\nmethods Formal Methods and Classes\r\nmgcv Mixed GAM Computation Vehicle with GCV/AIC/REML\r\nSmoothness Estimation\r\nnlme Linear and Nonlinear Mixed Effects Models\r\nnnet Feed-Forward Neural Networks and Multinomial\r\nLog-Linear Models\r\nparallel Support for Parallel computation in R\r\nrpart Recursive Partitioning and Regression Trees\r\nspatial Functions for Kriging and Point Pattern\r\nAnalysis\r\nsplines Regression Spline Functions and Classes\r\nstats The R Stats Package\r\nstats4 Statistical Functions using S4 Classes\r\nsurvival Survival Analysis\r\ntcltk Tcl/Tk Interface\r\ntools Tools for Package Development\r\nutils The R Utils Package\r\n</pre>\r\n\r\n<p>Get all packages currently loaded in the R environment</p>\r\n\r\n<p><a href=\"http://tpcg.io/VPFDZb\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nsearch()</pre>\r\n\r\n<p>When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.</p>\r\n\r\n<pre>\r\n[1] &quot;.GlobalEnv&quot; &quot;package:stats&quot; &quot;package:graphics&quot;\r\n[4] &quot;package:grDevices&quot; &quot;package:utils&quot; &quot;package:datasets&quot;\r\n[7] &quot;package:methods&quot; &quot;Autoloads&quot; &quot;package:base&quot;\r\n</pre>\r\n\r\n<h2>Install a New Package</h2>\r\n\r\n<p>There are two ways to add new R packages. One is installing directly from the CRAN directory and another is downloading the package to your local system and installing it manually.</p>\r\n\r\n<h2>Install directly from CRAN</h2>\r\n\r\n<p>The following command gets the packages directly from CRAN webpage and installs the package in the R environment. You may be prompted to choose a nearest mirror. Choose the one appropriate to your location.</p>\r\n\r\n<pre>\r\ninstall.packages(&quot;Package Name&quot;)\r\n\r\n# Install the package named &quot;XML&quot;.\r\ninstall.packages(&quot;XML&quot;)\r\n</pre>\r\n\r\n<h2>Install package manually</h2>\r\n\r\n<p>Go to the link&nbsp;<a href=\"https://cran.r-project.org/web/packages/available_packages_by_name.html\" rel=\"nofollow\" target=\"_blank\">R Packages</a>&nbsp;to download the package needed. Save the package as a&nbsp;<strong>.zip</strong>&nbsp;file in a suitable location in the local system.</p>\r\n\r\n<p>Now you can run the following command to install this package in the R environment.</p>\r\n\r\n<pre>\r\ninstall.packages(file_name_with_path, repos = NULL, type = &quot;source&quot;)\r\n\r\n# Install the package named &quot;XML&quot;\r\ninstall.packages(&quot;E:/XML_3.98-1.3.zip&quot;, repos = NULL, type = &quot;source&quot;)</pre>\r\n\r\n<h2>Load Package to Library</h2>\r\n\r\n<p>Before a package can be used in the code, it must be loaded to the current R environment. You also need to load a package that is already installed previously but not available in the current environment.</p>\r\n\r\n<p>A package is loaded using the following command &minus;</p>\r\n\r\n<pre>\r\nlibrary(&quot;package Name&quot;, lib.loc = &quot;path to library&quot;)\r\n\r\n# Load the package named &quot;XML&quot;\r\ninstall.packages(&quot;E:/XML_3.98-1.3.zip&quot;, repos = NULL, type = &quot;source&quot;)</pre>\r\n', 'R-Programming'),
(18, 'SQL - Overview', '<h1>SQL - Overview</h1>\r\n\r\n<p>SQL is a language to operate databases; it includes database creation, deletion, fetching rows, modifying rows, etc. SQL is an&nbsp;<strong>ANSI</strong>&nbsp;(American National Standards Institute) standard language, but there are many different versions of the SQL language.</p>\r\n\r\n<h2>What is SQL?</h2>\r\n\r\n<p>SQL is Structured Query Language, which is a computer language for storing, manipulating and retrieving data stored in a relational database.</p>\r\n\r\n<p>SQL is the standard language for Relational Database System. All the Relational Database Management Systems (RDMS) like MySQL, MS Access, Oracle, Sybase, Informix, Postgres and SQL Server use SQL as their standard database language.</p>\r\n\r\n<p>Also, they are using different dialects, such as &minus;</p>\r\n\r\n<ul>\r\n	<li>MS SQL Server using T-SQL,</li>\r\n	<li>Oracle using PL/SQL,</li>\r\n	<li>MS Access version of SQL is called JET SQL (native format) etc.</li>\r\n</ul>\r\n\r\n<h2>Why SQL?</h2>\r\n\r\n<p>SQL is widely popular because it offers the following advantages &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Allows users to access data in the relational database management systems.</p>\r\n	</li>\r\n	<li>\r\n	<p>Allows users to describe the data.</p>\r\n	</li>\r\n	<li>\r\n	<p>Allows users to define the data in a database and manipulate that data.</p>\r\n	</li>\r\n	<li>\r\n	<p>Allows to embed within other languages using SQL modules, libraries &amp; pre-compilers.</p>\r\n	</li>\r\n	<li>\r\n	<p>Allows users to create and drop databases and tables.</p>\r\n	</li>\r\n	<li>\r\n	<p>Allows users to create view, stored procedure, functions in a database.</p>\r\n	</li>\r\n	<li>\r\n	<p>Allows users to set permissions on tables, procedures and views.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>A Brief History of SQL</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>1970</strong>&nbsp;&minus; Dr. Edgar F. &quot;Ted&quot; Codd of IBM is known as the father of relational databases. He described a relational model for databases.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1974</strong>&nbsp;&minus; Structured Query Language appeared.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1978</strong>&nbsp;&minus; IBM worked to develop Codd&#39;s ideas and released a product named System/R.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1986</strong>&nbsp;&minus; IBM developed the first prototype of relational database and standardized by ANSI. The first relational database was released by Relational Software which later came to be known as Oracle.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>SQL Process</h2>\r\n\r\n<p>When you are executing an SQL command for any RDBMS, the system determines the best way to carry out your request and SQL engine figures out how to interpret the task.</p>\r\n\r\n<p>There are various components included in this process.</p>\r\n\r\n<p>These components are &minus;</p>\r\n\r\n<ul>\r\n	<li>Query Dispatcher</li>\r\n	<li>Optimization Engines</li>\r\n	<li>Classic Query Engine</li>\r\n	<li>SQL Query Engine, etc.</li>\r\n</ul>\r\n\r\n<p>A classic query engine handles all the non-SQL queries, but a SQL query engine won&#39;t handle logical files.</p>\r\n\r\n<p>Following is a simple diagram showing the SQL Architecture &minus;</p>\r\n\r\n<p><img alt=\"SQL Architecture\" src=\"https://www.tutorialspoint.com/sql/images/sql-architecture.jpg\" /></p>\r\n\r\n<h2>SQL Commands</h2>\r\n\r\n<p>The standard SQL commands to interact with relational databases are CREATE, SELECT, INSERT, UPDATE, DELETE and DROP. These commands can be classified into the following groups based on their nature &minus;</p>\r\n\r\n<h3>DDL - Data Definition Language</h3>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Command &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>CREATE</strong></p>\r\n\r\n			<p>Creates a new table, a view of a table, or other object in the database.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>ALTER</strong></p>\r\n\r\n			<p>Modifies an existing database object, such as a table.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>DROP</strong></p>\r\n\r\n			<p>Deletes an entire table, a view of a table or other objects in the database.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>DML - Data Manipulation Language</h3>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Command &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>SELECT</strong></p>\r\n\r\n			<p>Retrieves certain records from one or more tables.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>INSERT</strong></p>\r\n\r\n			<p>Creates a record.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>UPDATE</strong></p>\r\n\r\n			<p>Modifies records.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>DELETE</strong></p>\r\n\r\n			<p>Deletes records.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>DCL - Data Control Language</h3>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Command &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>GRANT</strong></p>\r\n\r\n			<p>Gives a privilege to user.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>REVOKE</strong></p>\r\n\r\n			<p>Takes back privileges granted from user.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 'SQL'),
(19, 'SQL - Databases', '<h1>SQL - RDBMS Databases</h1>\r\n\r\n<p>There are many popular RDBMS available to work with. This tutorial gives a brief overview of some of the most popular RDBMS&rsquo;s. This would help you to compare their basic features.</p>\r\n\r\n<h2>MySQL</h2>\r\n\r\n<p>MySQL is an open source SQL database, which is developed by a Swedish company &ndash; MySQL AB. MySQL is pronounced as &quot;my ess-que-ell,&quot; in contrast with SQL, pronounced &quot;sequel.&quot;</p>\r\n\r\n<p>MySQL is supporting many different platforms including Microsoft Windows, the major Linux distributions, UNIX, and Mac OS X.</p>\r\n\r\n<p>MySQL has free and paid versions, depending on its usage (non-commercial/commercial) and features. MySQL comes with a very fast, multi-threaded, multi-user and robust SQL database server.</p>\r\n\r\n<h3>History</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Development of MySQL by Michael Widenius &amp; David Axmark beginning in 1994.</p>\r\n	</li>\r\n	<li>\r\n	<p>First internal release on 23<sup>rd</sup>&nbsp;May 1995.</p>\r\n	</li>\r\n	<li>\r\n	<p>Windows Version was released on the 8<sup>th</sup>&nbsp;January 1998 for Windows 95 and NT.</p>\r\n	</li>\r\n	<li>\r\n	<p>Version 3.23: beta from June 2000, production release January 2001.</p>\r\n	</li>\r\n	<li>\r\n	<p>Version 4.0: beta from August 2002, production release March 2003 (unions).</p>\r\n	</li>\r\n	<li>\r\n	<p>Version 4.1: beta from June 2004, production release October 2004.</p>\r\n	</li>\r\n	<li>\r\n	<p>Version 5.0: beta from March 2005, production release October 2005.</p>\r\n	</li>\r\n	<li>\r\n	<p>Sun Microsystems acquired MySQL AB on the 26<sup>th</sup>&nbsp;February 2008.</p>\r\n	</li>\r\n	<li>\r\n	<p>Version 5.1: production release 27<sup>th</sup>&nbsp;November 2008.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Features</h3>\r\n\r\n<ul>\r\n	<li>High Performance.</li>\r\n	<li>High Availability.</li>\r\n	<li>Scalability and Flexibility Run anything.</li>\r\n	<li>Robust Transactional Support.</li>\r\n	<li>Web and Data Warehouse Strengths.</li>\r\n	<li>Strong Data Protection.</li>\r\n	<li>Comprehensive Application Development.</li>\r\n	<li>Management Ease.</li>\r\n	<li>Open Source Freedom and 24 x 7 Support.</li>\r\n	<li>Lowest Total Cost of Ownership.</li>\r\n</ul>\r\n\r\n<h2>MS SQL Server</h2>\r\n\r\n<p>MS SQL Server is a Relational Database Management System developed by Microsoft Inc. Its primary query languages are &minus;</p>\r\n\r\n<ul>\r\n	<li>T-SQL</li>\r\n	<li>ANSI SQL</li>\r\n</ul>\r\n\r\n<h3>History</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>1987 - Sybase releases SQL Server for UNIX.</p>\r\n	</li>\r\n	<li>\r\n	<p>1988 - Microsoft, Sybase, and Aston-Tate port SQL Server to OS/2.</p>\r\n	</li>\r\n	<li>\r\n	<p>1989 - Microsoft, Sybase, and Aston-Tate release SQL Server 1.0 for OS/2.</p>\r\n	</li>\r\n	<li>\r\n	<p>1990 - SQL Server 1.1 is released with support for Windows 3.0 clients.</p>\r\n	</li>\r\n	<li>\r\n	<p>Aston - Tate drops out of SQL Server development.</p>\r\n	</li>\r\n	<li>\r\n	<p>2000 - Microsoft releases SQL Server 2000.</p>\r\n	</li>\r\n	<li>\r\n	<p>2001 - Microsoft releases XML for SQL Server Web Release 1 (download).</p>\r\n	</li>\r\n	<li>\r\n	<p>2002 - Microsoft releases SQLXML 2.0 (renamed from XML for SQL Server).</p>\r\n	</li>\r\n	<li>\r\n	<p>2002 - Microsoft releases SQLXML 3.0.</p>\r\n	</li>\r\n	<li>\r\n	<p>2005 - Microsoft releases SQL Server 2005 on November 7th, 2005.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Features</h3>\r\n\r\n<ul>\r\n	<li>High Performance</li>\r\n	<li>High Availability</li>\r\n	<li>Database mirroring</li>\r\n	<li>Database snapshots</li>\r\n	<li>CLR integration</li>\r\n	<li>Service Broker</li>\r\n	<li>DDL triggers</li>\r\n	<li>Ranking functions</li>\r\n	<li>Row version-based isolation levels</li>\r\n	<li>XML integration</li>\r\n	<li>TRY...CATCH</li>\r\n	<li>Database Mail</li>\r\n</ul>\r\n\r\n<h2>ORACLE</h2>\r\n\r\n<p>It is a very large multi-user based database management system. Oracle is a relational database management system developed by &#39;Oracle Corporation&#39;.</p>\r\n\r\n<p>Oracle works to efficiently manage its resources, a database of information among the multiple clients requesting and sending data in the network.</p>\r\n\r\n<p>It is an excellent database server choice for client/server computing. Oracle supports all major operating systems for both clients and servers, including MSDOS, NetWare, UnixWare, OS/2 and most UNIX flavors.</p>\r\n\r\n<h3>History</h3>\r\n\r\n<p>Oracle began in 1977 and celebrating its 32 wonderful years in the industry (from 1977 to 2009).</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>1977 - Larry Ellison, Bob Miner and Ed Oates founded Software Development Laboratories to undertake development work.</p>\r\n	</li>\r\n	<li>\r\n	<p>1979 - Version 2.0 of Oracle was released and it became first commercial relational database and first SQL database. The company changed its name to Relational Software Inc. (RSI).</p>\r\n	</li>\r\n	<li>\r\n	<p>1981 - RSI started developing tools for Oracle.</p>\r\n	</li>\r\n	<li>\r\n	<p>1982 - RSI was renamed to Oracle Corporation.</p>\r\n	</li>\r\n	<li>\r\n	<p>1983 - Oracle released version 3.0, rewritten in C language and ran on multiple platforms.</p>\r\n	</li>\r\n	<li>\r\n	<p>1984 - Oracle version 4.0 was released. It contained features like concurrency control - multi-version read consistency, etc.</p>\r\n	</li>\r\n	<li>\r\n	<p>1985 - Oracle version 4.0 was released. It contained features like concurrency control - multi-version read consistency, etc.</p>\r\n	</li>\r\n	<li>\r\n	<p>2007 - Oracle released Oracle11g. The new version focused on better partitioning, easy migration, etc.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Features</h3>\r\n\r\n<ul>\r\n	<li>Concurrency</li>\r\n	<li>Read Consistency</li>\r\n	<li>Locking Mechanisms</li>\r\n	<li>Quiesce Database</li>\r\n	<li>Portability</li>\r\n	<li>Self-managing database</li>\r\n	<li>SQL*Plus</li>\r\n	<li>ASM</li>\r\n	<li>Scheduler</li>\r\n	<li>Resource Manager</li>\r\n	<li>Data Warehousing</li>\r\n	<li>Materialized views</li>\r\n	<li>Bitmap indexes</li>\r\n	<li>Table compression</li>\r\n	<li>Parallel Execution</li>\r\n	<li>Analytic SQL</li>\r\n	<li>Data mining</li>\r\n	<li>Partitioning</li>\r\n</ul>\r\n\r\n<h2>MS ACCESS</h2>\r\n\r\n<p>This is one of the most popular Microsoft products. Microsoft Access is an entry-level database management software. MS Access database is not only inexpensive but also a powerful database for small-scale projects.</p>\r\n\r\n<p>MS Access uses the Jet database engine, which utilizes a specific SQL language dialect (sometimes referred to as Jet SQL).</p>\r\n\r\n<p>MS Access comes with the professional edition of MS Office package. MS Access has easyto-use intuitive graphical interface.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>1992 - Access version 1.0 was released.</p>\r\n	</li>\r\n	<li>\r\n	<p>1993 - Access 1.1 released to improve compatibility with inclusion the Access Basic programming language.</p>\r\n	</li>\r\n	<li>\r\n	<p>The most significant transition was from Access 97 to Access 2000.</p>\r\n	</li>\r\n	<li>\r\n	<p>2007 - Access 2007, a new database format was introduced ACCDB which supports complex data types such as multi valued and attachment fields.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Features</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Users can create tables, queries, forms and reports and connect them together with macros.</p>\r\n	</li>\r\n	<li>\r\n	<p>Option of importing and exporting the data to many formats including Excel, Outlook, ASCII, dBase, Paradox, FoxPro, SQL Server, Oracle, ODBC, etc.</p>\r\n	</li>\r\n	<li>\r\n	<p>There is also the Jet Database format (MDB or ACCDB in Access 2007), which can contain the application and data in one file. This makes it very convenient to distribute the entire application to another user, who can run it in disconnected environments.</p>\r\n	</li>\r\n	<li>\r\n	<p>Microsoft Access offers parameterized queries. These queries and Access tables can be referenced from other programs like VB6 and .NET through DAO or ADO.</p>\r\n	</li>\r\n	<li>\r\n	<p>The desktop editions of Microsoft SQL Server can be used with Access as an alternative to the Jet Database Engine.</p>\r\n	</li>\r\n	<li>\r\n	<p>Microsoft Access is a file server-based database. Unlike the client-server relational database management systems (RDBMS), Microsoft Access does not implement database triggers, stored procedures or transaction logging.</p>\r\n	</li>\r\n</ul>\r\n', 'SQL'),
(20, 'SQL - Syntax', '<h1>SQL - Syntax</h1>\r\n\r\n<p>SQL is followed by a unique set of rules and guidelines called Syntax. This tutorial gives you a quick start with SQL by listing all the basic SQL Syntax.</p>\r\n\r\n<p>All the SQL statements start with any of the keywords like SELECT, INSERT, UPDATE, DELETE, ALTER, DROP, CREATE, USE, SHOW and all the statements end with a semicolon (;).</p>\r\n\r\n<p>The most important point to be noted here is that SQL is case insensitive, which means SELECT and select have same meaning in SQL statements. Whereas, MySQL makes difference in table names. So, if you are working with MySQL, then you need to give table names as they exist in the database.</p>\r\n\r\n<h2>Various Syntax in SQL</h2>\r\n\r\n<blockquote>All the examples given in this tutorial have been tested with a MySQL server.</blockquote>\r\n\r\n<h3>SQL SELECT Statement</h3>\r\n\r\n<pre>\r\nSELECT column1, column2....columnN\r\nFROM table_name;\r\n</pre>\r\n\r\n<h3>SQL DISTINCT Clause</h3>\r\n\r\n<pre>\r\nSELECT DISTINCT column1, column2....columnN\r\nFROM table_name;\r\n</pre>\r\n\r\n<h3>SQL WHERE Clause</h3>\r\n\r\n<pre>\r\nSELECT column1, column2....columnN\r\nFROM table_name\r\nWHERE CONDITION;\r\n</pre>\r\n\r\n<h3>SQL AND/OR Clause</h3>\r\n\r\n<pre>\r\nSELECT column1, column2....columnN\r\nFROM table_name\r\nWHERE CONDITION-1 {AND|OR} CONDITION-2;\r\n</pre>\r\n\r\n<h3>SQL IN Clause</h3>\r\n\r\n<pre>\r\nSELECT column1, column2....columnN\r\nFROM table_name\r\nWHERE column_name IN (val-1, val-2,...val-N);\r\n</pre>\r\n\r\n<h3>SQL BETWEEN Clause</h3>\r\n\r\n<pre>\r\nSELECT column1, column2....columnN\r\nFROM table_name\r\nWHERE column_name BETWEEN val-1 AND val-2;\r\n</pre>\r\n\r\n<h3>SQL LIKE Clause</h3>\r\n\r\n<pre>\r\nSELECT column1, column2....columnN\r\nFROM table_name\r\nWHERE column_name LIKE { PATTERN };\r\n</pre>\r\n\r\n<h3>SQL ORDER BY Clause</h3>\r\n\r\n<pre>\r\nSELECT column1, column2....columnN\r\nFROM table_name\r\nWHERE CONDITION\r\nORDER BY column_name {ASC|DESC};\r\n</pre>\r\n\r\n<h3>SQL GROUP BY Clause</h3>\r\n\r\n<pre>\r\nSELECT SUM(column_name)\r\nFROM table_name\r\nWHERE CONDITION\r\nGROUP BY column_name;\r\n</pre>\r\n\r\n<h3>SQL COUNT Clause</h3>\r\n\r\n<pre>\r\nSELECT COUNT(column_name)\r\nFROM table_name\r\nWHERE CONDITION;\r\n</pre>\r\n\r\n<h3>SQL HAVING Clause</h3>\r\n\r\n<pre>\r\nSELECT SUM(column_name)\r\nFROM table_name\r\nWHERE CONDITION\r\nGROUP BY column_name\r\nHAVING (arithematic function condition);\r\n</pre>\r\n\r\n<h3>SQL CREATE TABLE Statement</h3>\r\n\r\n<pre>\r\nCREATE TABLE table_name(\r\ncolumn1 datatype,\r\ncolumn2 datatype,\r\ncolumn3 datatype,\r\n.....\r\ncolumnN datatype,\r\nPRIMARY KEY( one or more columns )\r\n);\r\n</pre>\r\n\r\n<h3>SQL DROP TABLE Statement</h3>\r\n\r\n<pre>\r\nDROP TABLE table_name;\r\n</pre>\r\n\r\n<h3>SQL CREATE INDEX Statement</h3>\r\n\r\n<pre>\r\nCREATE UNIQUE INDEX index_name\r\nON table_name ( column1, column2,...columnN);\r\n</pre>\r\n\r\n<h3>SQL DROP INDEX Statement</h3>\r\n\r\n<pre>\r\nALTER TABLE table_name\r\nDROP INDEX index_name;\r\n</pre>\r\n\r\n<h3>SQL DESC Statement</h3>\r\n\r\n<pre>\r\nDESC table_name;\r\n</pre>\r\n\r\n<h3>SQL TRUNCATE TABLE Statement</h3>\r\n\r\n<pre>\r\nTRUNCATE TABLE table_name;\r\n</pre>\r\n\r\n<h3>SQL ALTER TABLE Statement</h3>\r\n\r\n<pre>\r\nALTER TABLE table_name {ADD|DROP|MODIFY} column_name {data_ype};\r\n</pre>\r\n\r\n<h3>SQL ALTER TABLE Statement (Rename)</h3>\r\n\r\n<pre>\r\nALTER TABLE table_name RENAME TO new_table_name;\r\n</pre>\r\n\r\n<h3>SQL INSERT INTO Statement</h3>\r\n\r\n<pre>\r\nINSERT INTO table_name( column1, column2....columnN)\r\nVALUES ( value1, value2....valueN);\r\n</pre>\r\n\r\n<h3>SQL UPDATE Statement</h3>\r\n\r\n<pre>\r\nUPDATE table_name\r\nSET column1 = value1, column2 = value2....columnN=valueN\r\n[ WHERE CONDITION ];\r\n</pre>\r\n\r\n<h3>SQL DELETE Statement</h3>\r\n\r\n<pre>\r\nDELETE FROM table_name\r\nWHERE {CONDITION};\r\n</pre>\r\n\r\n<h3>SQL CREATE DATABASE Statement</h3>\r\n\r\n<pre>\r\nCREATE DATABASE database_name;\r\n</pre>\r\n\r\n<h3>SQL DROP DATABASE Statement</h3>\r\n\r\n<pre>\r\nDROP DATABASE database_name;\r\n</pre>\r\n\r\n<h3>SQL USE Statement</h3>\r\n\r\n<pre>\r\nUSE database_name;\r\n</pre>\r\n\r\n<h3>SQL COMMIT Statement</h3>\r\n\r\n<pre>\r\nCOMMIT;\r\n</pre>\r\n\r\n<h3>SQL ROLLBACK Statement</h3>\r\n\r\n<pre>\r\nROLLBACK;</pre>\r\n', 'SQL'),
(21, 'SQL - Data Types', '<h1>SQL - Data Types</h1>\r\n\r\n<p>SQL Data Type is an attribute that specifies the type of data of any object. Each column, variable and expression has a related data type in SQL. You can use these data types while creating your tables. You can choose a data type for a table column based on your requirement.</p>\r\n\r\n<p>SQL Server offers six categories of data types for your use which are listed below &minus;</p>\r\n\r\n<h2>Exact Numeric Data Types</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>DATA TYPE</th>\r\n			<th>FROM</th>\r\n			<th>TO</th>\r\n		</tr>\r\n		<tr>\r\n			<td>bigint</td>\r\n			<td>-9,223,372,036,854,775,808</td>\r\n			<td>9,223,372,036,854,775,807</td>\r\n		</tr>\r\n		<tr>\r\n			<td>int</td>\r\n			<td>-2,147,483,648</td>\r\n			<td>2,147,483,647</td>\r\n		</tr>\r\n		<tr>\r\n			<td>smallint</td>\r\n			<td>-32,768</td>\r\n			<td>32,767</td>\r\n		</tr>\r\n		<tr>\r\n			<td>tinyint</td>\r\n			<td>0</td>\r\n			<td>255</td>\r\n		</tr>\r\n		<tr>\r\n			<td>bit</td>\r\n			<td>0</td>\r\n			<td>1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>decimal</td>\r\n			<td>-10^38 +1</td>\r\n			<td>10^38 -1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>numeric</td>\r\n			<td>-10^38 +1</td>\r\n			<td>10^38 -1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>money</td>\r\n			<td>-922,337,203,685,477.5808</td>\r\n			<td>+922,337,203,685,477.5807</td>\r\n		</tr>\r\n		<tr>\r\n			<td>smallmoney</td>\r\n			<td>-214,748.3648</td>\r\n			<td>+214,748.3647</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Approximate Numeric Data Types</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>DATA TYPE</th>\r\n			<th>FROM</th>\r\n			<th>TO</th>\r\n		</tr>\r\n		<tr>\r\n			<td>float</td>\r\n			<td>-1.79E + 308</td>\r\n			<td>1.79E + 308</td>\r\n		</tr>\r\n		<tr>\r\n			<td>real</td>\r\n			<td>-3.40E + 38</td>\r\n			<td>3.40E + 38</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Date and Time Data Types</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>DATA TYPE</th>\r\n			<th>FROM</th>\r\n			<th>TO</th>\r\n		</tr>\r\n		<tr>\r\n			<td>datetime</td>\r\n			<td>Jan 1, 1753</td>\r\n			<td>Dec 31, 9999</td>\r\n		</tr>\r\n		<tr>\r\n			<td>smalldatetime</td>\r\n			<td>Jan 1, 1900</td>\r\n			<td>Jun 6, 2079</td>\r\n		</tr>\r\n		<tr>\r\n			<td>date</td>\r\n			<td colspan=\"2\">Stores a date like June 30, 1991</td>\r\n		</tr>\r\n		<tr>\r\n			<td>time</td>\r\n			<td colspan=\"2\">Stores a time of day like 12:30 P.M.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; Here, datetime has 3.33 milliseconds accuracy where as smalldatetime has 1 minute accuracy.</p>\r\n\r\n<h2>Character Strings Data Types</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>DATA TYPE &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>char</strong></p>\r\n\r\n			<p>Maximum length of 8,000 characters.( Fixed length non-Unicode characters)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>varchar</strong></p>\r\n\r\n			<p>Maximum of 8,000 characters.(Variable-length non-Unicode data).</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>varchar(max)</strong></p>\r\n\r\n			<p>Maximum length of 2E + 31 characters, Variable-length non-Unicode data (SQL Server 2005 only).</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>text</strong></p>\r\n\r\n			<p>Variable-length non-Unicode data with a maximum length of 2,147,483,647 characters.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Unicode Character Strings Data Types</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>DATA TYPE &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>nchar</strong></p>\r\n\r\n			<p>Maximum length of 4,000 characters.( Fixed length Unicode)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>nvarchar</strong></p>\r\n\r\n			<p>Maximum length of 4,000 characters.(Variable length Unicode)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>nvarchar(max)</strong></p>\r\n\r\n			<p>Maximum length of 2E + 31 characters (SQL Server 2005 only).( Variable length Unicode)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>ntext</strong></p>\r\n\r\n			<p>Maximum length of 1,073,741,823 characters. ( Variable length Unicode )</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Binary Data Types</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>DATA TYPE &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>binary</strong></p>\r\n\r\n			<p>Maximum length of 8,000 bytes(Fixed-length binary data )</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>varbinary</strong></p>\r\n\r\n			<p>Maximum length of 8,000 bytes.(Variable length binary data)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>varbinary(max)</strong></p>\r\n\r\n			<p>Maximum length of 2E + 31 bytes (SQL Server 2005 only). ( Variable length Binary data)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>image</strong></p>\r\n\r\n			<p>Maximum length of 2,147,483,647 bytes. ( Variable length Binary Data)</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Misc Data Types</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>DATA TYPE &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>sql_variant</strong></p>\r\n\r\n			<p>Stores values of various SQL Server-supported data types, except text, ntext, and timestamp.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>timestamp</strong></p>\r\n\r\n			<p>Stores a database-wide unique number that gets updated every time a row gets updated</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>uniqueidentifier</strong></p>\r\n\r\n			<p>Stores a globally unique identifier (GUID)</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>xml</strong></p>\r\n\r\n			<p>Stores XML data. You can store xml instances in a column or a variable (SQL Server 2005 only).</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td>\r\n			<p><strong>cursor</strong></p>\r\n\r\n			<p>Reference to a cursor object</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td>\r\n			<p><strong>table</strong></p>\r\n\r\n			<p>Stores a result set for later processing</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 'SQL'),
(22, 'SQL - Database Operations', '<h1>SQL - CREATE Database</h1>\r\n\r\n<p>The SQL&nbsp;<strong>CREATE DATABASE</strong>&nbsp;statement is used to create a new SQL database.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of this CREATE DATABASE statement is as follows &minus;</p>\r\n\r\n<pre>\r\nCREATE DATABASE DatabaseName;\r\n</pre>\r\n\r\n<p>Always the database name should be unique within the RDBMS.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>If you want to create a new database &lt;testDB&gt;, then the CREATE DATABASE statement would be as shown below &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; CREATE DATABASE testDB;</pre>\r\n\r\n<p>Make sure you have the admin privilege before creating any database. Once a database is created, you can check it in the list of databases as follows &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; SHOW DATABASES;\r\n+--------------------+\r\n| Database |\r\n+--------------------+\r\n| information_schema |\r\n| AMROOD |\r\n| TUTORIALSPOINT |\r\n| mysql |\r\n| orig |\r\n| test |\r\n| testDB |\r\n+--------------------+\r\n7 rows in set (0.00 sec)</pre>\r\n\r\n<h1>SQL - DROP or DELETE Database</h1>\r\n\r\n<p>The SQL&nbsp;<strong>DROP DATABASE</strong>&nbsp;statement is used to drop an existing database in SQL schema.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of DROP DATABASE statement is as follows &minus;</p>\r\n\r\n<pre>\r\nDROP DATABASE DatabaseName;\r\n</pre>\r\n\r\n<p>Always the database name should be unique within the RDBMS.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>If you want to delete an existing database &lt;testDB&gt;, then the DROP DATABASE statement would be as shown below &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; DROP DATABASE testDB;</pre>\r\n\r\n<p><strong>NOTE</strong>&nbsp;&minus; Be careful before using this operation because by deleting an existing database would result in loss of complete information stored in the database.</p>\r\n\r\n<p>Make sure you have the admin privilege before dropping any database. Once a database is dropped, you can check it in the list of the databases as shown below &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; SHOW DATABASES;\r\n+--------------------+\r\n| Database           |\r\n+--------------------+\r\n| information_schema |\r\n| AMROOD             |\r\n| TUTORIALSPOINT     |\r\n| mysql              |\r\n| orig               |\r\n| test               |\r\n+--------------------+\r\n6 rows in set (0.00 sec)</pre>\r\n\r\n<h1>SQL - SELECT Database, USE Statement</h1>\r\n\r\n<p>When you have multiple databases in your SQL Schema, then before starting your operation, you would need to select a database where all the operations would be performed.</p>\r\n\r\n<p>The SQL&nbsp;<strong>USE</strong>&nbsp;statement is used to select any existing database in the SQL schema.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of the USE statement is as shown below &minus;</p>\r\n\r\n<pre>\r\nUSE DatabaseName;\r\n</pre>\r\n\r\n<p>Always the database name should be unique within the RDBMS.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>You can check the available databases as shown below &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; SHOW DATABASES;\r\n+--------------------+\r\n| Database           |\r\n+--------------------+\r\n| information_schema |\r\n| AMROOD             |\r\n| TUTORIALSPOINT     |\r\n| mysql              |\r\n| orig               |\r\n| test               |\r\n+--------------------+\r\n6 rows in set (0.00 sec)</pre>\r\n\r\n<p>Now, if you want to work with the AMROOD database, then you can execute the following SQL command and start working with the AMROOD database.</p>\r\n\r\n<pre>\r\nSQL&gt; USE AMROOD;</pre>\r\n', 'SQL'),
(23, 'SQL - Table Operations', '<h1>SQL - CREATE Table</h1>\r\n\r\n<p>Creating a basic table involves naming the table and defining its columns and each column&#39;s data type.</p>\r\n\r\n<p>The SQL&nbsp;<strong>CREATE TABLE</strong>&nbsp;statement is used to create a new table.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of the CREATE TABLE statement is as follows &minus;</p>\r\n\r\n<pre>\r\nCREATE TABLE table_name(\r\ncolumn1 datatype,\r\ncolumn2 datatype,\r\ncolumn3 datatype,\r\n.....\r\ncolumnN datatype,\r\nPRIMARY KEY( one or more columns )\r\n);\r\n</pre>\r\n\r\n<p>CREATE TABLE is the keyword telling the database system what you want to do. In this case, you want to create a new table. The unique name or identifier for the table follows the CREATE TABLE statement.</p>\r\n\r\n<p>Then in brackets comes the list defining each column in the table and what sort of data type it is. The syntax becomes clearer with the following example.</p>\r\n\r\n<p>A copy of an existing table can be created using a combination of the CREATE TABLE statement and the SELECT statement. You can check the complete details at&nbsp;<a href=\"https://www.tutorialspoint.com/sql/sql-create-table-using-tables.htm\">Create Table Using another Table.</a></p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>The following code block is an example, which creates a CUSTOMERS table with an ID as a primary key and NOT NULL are the constraints showing that these fields cannot be NULL while creating records in this table &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; CREATE TABLE CUSTOMERS(\r\n   ID   INT              NOT NULL,\r\n   NAME VARCHAR (20)     NOT NULL,\r\n   AGE  INT              NOT NULL,\r\n   ADDRESS  CHAR (25) ,\r\n   SALARY   DECIMAL (18, 2),       \r\n   PRIMARY KEY (ID)\r\n);</pre>\r\n\r\n<p>You can verify if your table has been created successfully by looking at the message displayed by the SQL server, otherwise you can use the&nbsp;<strong>DESC</strong>&nbsp;command as follows &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; DESC CUSTOMERS;\r\n+---------+---------------+------+-----+---------+-------+\r\n| Field | Type | Null | Key | Default | Extra |\r\n+---------+---------------+------+-----+---------+-------+\r\n| ID | int(11) | NO | PRI | | |\r\n| NAME | varchar(20) | NO | | | |\r\n| AGE | int(11) | NO | | | |\r\n| ADDRESS | char(25) | YES | | NULL | |\r\n| SALARY | decimal(18,2) | YES | | NULL | |\r\n+---------+---------------+------+-----+---------+-------+\r\n5 rows in set (0.00 sec)\r\n</pre>\r\n\r\n<p>Now, you have CUSTOMERS table available in your database which you can use to store the required information related to customers.</p>\r\n\r\n<h1>SQL - DROP or DELETE Table</h1>\r\n\r\n<p>The SQL&nbsp;<strong>DROP TABLE</strong>&nbsp;statement is used to remove a table definition and all the data, indexes, triggers, constraints and permission specifications for that table.</p>\r\n\r\n<p><strong>NOTE</strong>&nbsp;&minus; You should be very careful while using this command because once a table is deleted then all the information available in that table will also be lost forever.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of this DROP TABLE statement is as follows &minus;</p>\r\n\r\n<pre>\r\nDROP TABLE table_name;\r\n</pre>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Let us first verify the CUSTOMERS table and then we will delete it from the database as shown below &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; DESC CUSTOMERS;\r\n+---------+---------------+------+-----+---------+-------+\r\n| Field   | Type          | Null | Key | Default | Extra |\r\n+---------+---------------+------+-----+---------+-------+\r\n| ID      | int(11)       | NO   | PRI |         |       |\r\n| NAME    | varchar(20)   | NO   |     |         |       |\r\n| AGE     | int(11)       | NO   |     |         |       |\r\n| ADDRESS | char(25)      | YES  |     | NULL    |       |\r\n| SALARY  | decimal(18,2) | YES  |     | NULL    |       |\r\n+---------+---------------+------+-----+---------+-------+\r\n5 rows in set (0.00 sec)</pre>\r\n\r\n<p>This means that the CUSTOMERS table is available in the database, so let us now drop it as shown below.</p>\r\n\r\n<pre>\r\nSQL&gt; DROP TABLE CUSTOMERS;\r\nQuery OK, 0 rows affected (0.01 sec)</pre>\r\n\r\n<p>Now, if you would try the DESC command, then you will get the following error &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; DESC CUSTOMERS;\r\nERROR 1146 (42S02): Table &#39;TEST.CUSTOMERS&#39; doesn&#39;t exist</pre>\r\n\r\n<p>Here, TEST is the database name which we are using for our examples.</p>\r\n', 'SQL');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(24, 'SQL - Queries', '<h1>SQL - INSERT Query</h1>\r\n\r\n<p>The SQL&nbsp;<strong>INSERT INTO</strong>&nbsp;Statement is used to add new rows of data to a table in the database.</p>\r\n\r\n<h3>Syntax</h3>\r\n\r\n<p>There are two basic syntaxes of the INSERT INTO statement which are shown below.</p>\r\n\r\n<pre>\r\nINSERT INTO TABLE_NAME (column1, column2, column3,...columnN)\r\nVALUES (value1, value2, value3,...valueN);\r\n</pre>\r\n\r\n<p>Here, column1, column2, column3,...columnN are the names of the columns in the table into which you want to insert the data.</p>\r\n\r\n<p>You may not need to specify the column(s) name in the SQL query if you are adding values for all the columns of the table. But make sure the order of the values is in the same order as the columns in the table.</p>\r\n\r\n<p>The&nbsp;<strong>SQL INSERT INTO</strong>&nbsp;syntax will be as follows &minus;</p>\r\n\r\n<pre>\r\nINSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);\r\n</pre>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>The following statements would create six records in the CUSTOMERS table.</p>\r\n\r\n<pre>\r\nINSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)\r\nVALUES (1, &#39;Ramesh&#39;, 32, &#39;Ahmedabad&#39;, 2000.00 );\r\n\r\nINSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)\r\nVALUES (2, &#39;Khilan&#39;, 25, &#39;Delhi&#39;, 1500.00 );\r\n\r\nINSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)\r\nVALUES (3, &#39;kaushik&#39;, 23, &#39;Kota&#39;, 2000.00 );\r\n\r\nINSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)\r\nVALUES (4, &#39;Chaitali&#39;, 25, &#39;Mumbai&#39;, 6500.00 );\r\n\r\nINSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)\r\nVALUES (5, &#39;Hardik&#39;, 27, &#39;Bhopal&#39;, 8500.00 );\r\n\r\nINSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)\r\nVALUES (6, &#39;Komal&#39;, 22, &#39;MP&#39;, 4500.00 );</pre>\r\n\r\n<p>You can create a record in the CUSTOMERS table by using the second syntax as shown below.</p>\r\n\r\n<pre>\r\nINSERT INTO CUSTOMERS\r\nVALUES (7, &#39;Muffy&#39;, 24, &#39;Indore&#39;, 10000.00 );\r\n</pre>\r\n\r\n<p>All the above statements would produce the following records in the CUSTOMERS table as shown below.</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\r\n+----+----------+-----+-----------+----------+\r\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\r\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\r\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\r\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\r\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\r\n|  6 | Komal    |  22 | MP        |  4500.00 |\r\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<h2>Populate one table using another table</h2>\r\n\r\n<p>You can populate the data into a table through the select statement over another table; provided the other table has a set of fields, which are required to populate the first table.</p>\r\n\r\n<p>Here is the syntax &minus;</p>\r\n\r\n<pre>\r\nINSERT INTO first_table_name [(column1, column2, ... columnN)]\r\nSELECT column1, column2, ...columnN\r\nFROM second_table_name\r\n[WHERE condition];</pre>\r\n\r\n<h1>SQL - SELECT Query</h1>\r\n\r\n<p>The SQL&nbsp;<strong>SELECT</strong>&nbsp;statement is used to fetch the data from a database table which returns this data in the form of a result table. These result tables are called result-sets.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of the SELECT statement is as follows &minus;</p>\r\n\r\n<pre>\r\nSELECT column1, column2, columnN FROM table_name;\r\n</pre>\r\n\r\n<p>Here, column1, column2... are the fields of a table whose values you want to fetch. If you want to fetch all the fields available in the field, then you can use the following syntax.</p>\r\n\r\n<pre>\r\nSELECT * FROM table_name;</pre>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Consider the CUSTOMERS table having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\r\n+----+----------+-----+-----------+----------+\r\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\r\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\r\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\r\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\r\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\r\n|  6 | Komal    |  22 | MP        |  4500.00 |\r\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<p>The following code is an example, which would fetch the ID, Name and Salary fields of the customers available in CUSTOMERS table.</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT ID, NAME, SALARY FROM CUSTOMERS;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+----------+----------+\r\n| ID | NAME | SALARY |\r\n+----+----------+----------+\r\n| 1 | Ramesh | 2000.00 |\r\n| 2 | Khilan | 1500.00 |\r\n| 3 | kaushik | 2000.00 |\r\n| 4 | Chaitali | 6500.00 |\r\n| 5 | Hardik | 8500.00 |\r\n| 6 | Komal | 4500.00 |\r\n| 7 | Muffy | 10000.00 |\r\n+----+----------+----------+\r\n</pre>\r\n\r\n<p>If you want to fetch all the fields of the CUSTOMERS table, then you should use the following query.</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT * FROM CUSTOMERS;</pre>\r\n\r\n<p>This would produce the result as shown below.</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<h1>SQL - WHERE Clause</h1>\r\n\r\n<p>The SQL&nbsp;<strong>WHERE</strong>&nbsp;clause is used to specify a condition while fetching the data from a single table or by joining with multiple tables. If the given condition is satisfied, then only it returns a specific value from the table. You should use the WHERE clause to filter the records and fetching only the necessary records.</p>\r\n\r\n<p>The WHERE clause is not only used in the SELECT statement, but it is also used in the UPDATE, DELETE statement, etc., which we would examine in the subsequent chapters.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of the SELECT statement with the WHERE clause is as shown below.</p>\r\n\r\n<pre>\r\nSELECT column1, column2, columnN\r\nFROM table_name\r\nWHERE [condition]\r\n</pre>\r\n\r\n<p>You can specify a condition using the&nbsp;<a href=\"https://www.tutorialspoint.com/sql/sql-operators.htm\">comparison or logical operators</a>&nbsp;like &gt;, &lt;, =,&nbsp;<strong>LIKE, NOT</strong>, etc. The following examples would make this concept clear.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Consider the CUSTOMERS table having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\r\n+----+----------+-----+-----------+----------+\r\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\r\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\r\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\r\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\r\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\r\n|  6 | Komal    |  22 | MP        |  4500.00 |\r\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<p>The following code is an example which would fetch the ID, Name and Salary fields from the CUSTOMERS table, where the salary is greater than 2000 &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT ID, NAME, SALARY \r\nFROM CUSTOMERS\r\nWHERE SALARY &gt; 2000;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+----------+----------+\r\n| ID | NAME | SALARY |\r\n+----+----------+----------+\r\n| 4 | Chaitali | 6500.00 |\r\n| 5 | Hardik | 8500.00 |\r\n| 6 | Komal | 4500.00 |\r\n| 7 | Muffy | 10000.00 |\r\n+----+----------+----------+\r\n</pre>\r\n\r\n<p>The following query is an example, which would fetch the ID, Name and Salary fields from the CUSTOMERS table for a customer with the name&nbsp;<strong>Hardik</strong>.</p>\r\n\r\n<p>Here, it is important to note that all the strings should be given inside single quotes (&#39;&#39;). Whereas, numeric values should be given without any quote as in the above example.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT ID, NAME, SALARY \r\nFROM CUSTOMERS\r\nWHERE NAME = &#39;Hardik&#39;;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+----------+----------+\r\n| ID | NAME | SALARY |\r\n+----+----------+----------+\r\n| 5 | Hardik | 8500.00 |\r\n+----+----------+----------+</pre>\r\n\r\n<h1>SQL - AND and OR Conjunctive Operators</h1>\r\n\r\n<p>The SQL&nbsp;<strong>AND</strong>&nbsp;&amp;&nbsp;<strong>OR</strong>&nbsp;operators are used to combine multiple conditions to narrow data in an SQL statement. These two operators are called as the conjunctive operators.</p>\r\n\r\n<p>These operators provide a means to make multiple comparisons with different operators in the same SQL statement.</p>\r\n\r\n<h2>The AND Operator</h2>\r\n\r\n<p>The&nbsp;<strong>AND</strong>&nbsp;operator allows the existence of multiple conditions in an SQL statement&#39;s WHERE clause.</p>\r\n\r\n<h3>Syntax</h3>\r\n\r\n<p>The basic syntax of the AND operator with a WHERE clause is as follows &minus;</p>\r\n\r\n<pre>\r\nSELECT column1, column2, columnN\r\nFROM table_name\r\nWHERE [condition1] AND [condition2]...AND [conditionN];\r\n</pre>\r\n\r\n<p>You can combine N number of conditions using the AND operator. For an action to be taken by the SQL statement, whether it be a transaction or a query, all conditions separated by the AND must be TRUE.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Consider the CUSTOMERS table having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>Following is an example, which would fetch the ID, Name and Salary fields from the CUSTOMERS table, where the salary is greater than 2000 and the age is less than 25 years &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT ID, NAME, SALARY \r\nFROM CUSTOMERS\r\nWHERE SALARY &gt; 2000 AND age &lt; 25;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+-------+----------+\r\n| ID | NAME | SALARY |\r\n+----+-------+----------+\r\n| 6 | Komal | 4500.00 |\r\n| 7 | Muffy | 10000.00 |\r\n+----+-------+----------+\r\n</pre>\r\n\r\n<h2>The OR Operator</h2>\r\n\r\n<p>The OR operator is used to combine multiple conditions in an SQL statement&#39;s WHERE clause.</p>\r\n\r\n<h3>Syntax</h3>\r\n\r\n<p>The basic syntax of the OR operator with a WHERE clause is as follows &minus;</p>\r\n\r\n<pre>\r\nSELECT column1, column2, columnN\r\nFROM table_name\r\nWHERE [condition1] OR [condition2]...OR [conditionN]\r\n</pre>\r\n\r\n<p>You can combine N number of conditions using the OR operator. For an action to be taken by the SQL statement, whether it be a transaction or query, the only any ONE of the conditions separated by the OR must be TRUE.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Consider the CUSTOMERS table having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\r\n+----+----------+-----+-----------+----------+\r\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\r\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\r\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\r\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\r\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\r\n|  6 | Komal    |  22 | MP        |  4500.00 |\r\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<p>The following code block hasa query, which would fetch the ID, Name and Salary fields from the CUSTOMERS table, where the salary is greater than 2000 OR the age is less than 25 years.</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT ID, NAME, SALARY \r\nFROM CUSTOMERS\r\nWHERE SALARY &gt; 2000 OR age &lt; 25;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+----------+----------+\r\n| ID | NAME | SALARY |\r\n+----+----------+----------+\r\n| 3 | kaushik | 2000.00 |\r\n| 4 | Chaitali | 6500.00 |\r\n| 5 | Hardik | 8500.00 |\r\n| 6 | Komal | 4500.00 |\r\n| 7 | Muffy | 10000.00 |\r\n+----+----------+----------+</pre>\r\n\r\n<h1>SQL - UPDATE Query</h1>\r\n\r\n<p>The SQL&nbsp;<strong>UPDATE</strong>&nbsp;Query is used to modify the existing records in a table. You can use the WHERE clause with the UPDATE query to update the selected rows, otherwise all the rows would be affected.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of the UPDATE query with a WHERE clause is as follows &minus;</p>\r\n\r\n<pre>\r\nUPDATE table_name\r\nSET column1 = value1, column2 = value2...., columnN = valueN\r\nWHERE [condition];\r\n</pre>\r\n\r\n<p>You can combine N number of conditions using the AND or the OR operators.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Consider the CUSTOMERS table having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\r\n+----+----------+-----+-----------+----------+\r\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\r\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\r\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\r\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\r\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\r\n|  6 | Komal    |  22 | MP        |  4500.00 |\r\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<p>The following query will update the ADDRESS for a customer whose ID number is 6 in the table.</p>\r\n\r\n<pre>\r\nSQL&gt; UPDATE CUSTOMERS\r\nSET ADDRESS = &#39;Pune&#39;\r\nWHERE ID = 6;</pre>\r\n\r\n<p>Now, the CUSTOMERS table would have the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 6 | Komal | 22 | Pune | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>If you want to modify all the ADDRESS and the SALARY column values in the CUSTOMERS table, you do not need to use the WHERE clause as the UPDATE query would be enough as shown in the following code block.</p>\r\n\r\n<pre>\r\nSQL&gt; UPDATE CUSTOMERS\r\nSET ADDRESS = &#39;Pune&#39;, SALARY = 1000.00;</pre>\r\n\r\n<p>Now, CUSTOMERS table would have the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+---------+---------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+---------+---------+\r\n| 1 | Ramesh | 32 | Pune | 1000.00 |\r\n| 2 | Khilan | 25 | Pune | 1000.00 |\r\n| 3 | kaushik | 23 | Pune | 1000.00 |\r\n| 4 | Chaitali | 25 | Pune | 1000.00 |\r\n| 5 | Hardik | 27 | Pune | 1000.00 |\r\n| 6 | Komal | 22 | Pune | 1000.00 |\r\n| 7 | Muffy | 24 | Pune | 1000.00 |\r\n+----+----------+-----+---------+---------+</pre>\r\n\r\n<h1>SQL - DELETE Query</h1>\r\n\r\n<p>The SQL DELETE Query is used to delete the existing records from a table.</p>\r\n\r\n<p>You can use the WHERE clause with a DELETE query to delete the selected rows, otherwise all the records would be deleted.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of the DELETE query with the WHERE clause is as follows &minus;</p>\r\n\r\n<pre>\r\nDELETE FROM table_name\r\nWHERE [condition];\r\n</pre>\r\n\r\n<p>You can combine N number of conditions using AND or OR operators.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Consider the CUSTOMERS table having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>The following code has a query, which will DELETE a customer, whose ID is 6.</p>\r\n\r\n<pre>\r\nSQL&gt; DELETE FROM CUSTOMERS\r\nWHERE ID = 6;</pre>\r\n\r\n<p>Now, the CUSTOMERS table would have the following records.</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>If you want to DELETE all the records from the CUSTOMERS table, you do not need to use the WHERE clause and the DELETE query would be as follows &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; DELETE FROM CUSTOMERS;</pre>\r\n\r\n<p>Now, the CUSTOMERS table would not have any record.</p>\r\n\r\n<h1>SQL - LIKE Clause</h1>\r\n\r\n<p>The SQL&nbsp;<strong>LIKE</strong>&nbsp;clause is used to compare a value to similar values using wildcard operators. There are two wildcards used in conjunction with the LIKE operator.</p>\r\n\r\n<ul>\r\n	<li>The percent sign (%)</li>\r\n	<li>The underscore (_)</li>\r\n</ul>\r\n\r\n<p>The percent sign represents zero, one or multiple characters. The underscore represents a single number or character. These symbols can be used in combinations.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of % and _ is as follows &minus;</p>\r\n\r\n<pre>\r\nSELECT FROM table_name\r\nWHERE column LIKE &#39;XXXX%&#39;\r\n\r\nor\r\n\r\nSELECT FROM table_name\r\nWHERE column LIKE &#39;%XXXX%&#39;\r\n\r\nor\r\n\r\nSELECT FROM table_name\r\nWHERE column LIKE &#39;XXXX_&#39;\r\n\r\nor\r\n\r\nSELECT FROM table_name\r\nWHERE column LIKE &#39;_XXXX&#39;\r\n\r\nor\r\n\r\nSELECT FROM table_name\r\nWHERE column LIKE &#39;_XXXX_&#39;\r\n</pre>\r\n\r\n<p>You can combine N number of conditions using AND or OR operators. Here, XXXX could be any numeric or string value.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>The following table has a few examples showing the WHERE part having different LIKE clause with &#39;%&#39; and &#39;_&#39; operators &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Statement &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>WHERE SALARY LIKE &#39;200%&#39;</strong></p>\r\n\r\n			<p>Finds any values that start with 200.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>WHERE SALARY LIKE &#39;%200%&#39;</strong></p>\r\n\r\n			<p>Finds any values that have 200 in any position.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>WHERE SALARY LIKE &#39;_00%&#39;</strong></p>\r\n\r\n			<p>Finds any values that have 00 in the second and third positions.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>WHERE SALARY LIKE &#39;2_%_%&#39;</strong></p>\r\n\r\n			<p>Finds any values that start with 2 and are at least 3 characters in length.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td>\r\n			<p><strong>WHERE SALARY LIKE &#39;%2&#39;</strong></p>\r\n\r\n			<p>Finds any values that end with 2.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td>\r\n			<p><strong>WHERE SALARY LIKE &#39;_2%3&#39;</strong></p>\r\n\r\n			<p>Finds any values that have a 2 in the second position and end with a 3.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td>\r\n			<p><strong>WHERE SALARY LIKE &#39;2___3&#39;</strong></p>\r\n\r\n			<p>Finds any values in a five-digit number that start with 2 and end with 3.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Let us take a real example, consider the CUSTOMERS table having the records as shown below.</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>Following is an example, which would display all the records from the CUSTOMERS table, where the SALARY starts with 200.</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT * FROM CUSTOMERS\r\nWHERE SALARY LIKE &#39;200%&#39;;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<h1>SQL - TOP, LIMIT or ROWNUM Clause</h1>\r\n\r\n<p>The SQL&nbsp;<strong>TOP</strong>&nbsp;clause is used to fetch a TOP N number or X percent records from a table.</p>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; All the databases do not support the TOP clause. For example MySQL supports the&nbsp;<strong>LIMIT</strong>&nbsp;clause to fetch limited number of records while Oracle uses the&nbsp;<strong>ROWNUM</strong>&nbsp;command to fetch a limited number of records.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of the TOP clause with a SELECT statement would be as follows.</p>\r\n\r\n<pre>\r\nSELECT TOP number|percent column_name(s)\r\nFROM table_name\r\nWHERE [condition]\r\n</pre>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Consider the CUSTOMERS table having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>The following query is an example on the SQL server, which would fetch the top 3 records from the CUSTOMERS table.</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT TOP 3 * FROM CUSTOMERS;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+---------+-----+-----------+---------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+---------+-----+-----------+---------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n+----+---------+-----+-----------+---------+\r\n</pre>\r\n\r\n<p>If you are using MySQL server, then here is an equivalent example &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT * FROM CUSTOMERS\r\nLIMIT 3;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+---------+-----+-----------+---------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+---------+-----+-----------+---------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n+----+---------+-----+-----------+---------+\r\n</pre>\r\n\r\n<p>If you are using an Oracle server, then the following code block has an equivalent example.</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT * FROM CUSTOMERS\r\nWHERE ROWNUM &lt;= 3;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+---------+-----+-----------+---------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+---------+-----+-----------+---------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n+----+---------+-----+-----------+---------+</pre>\r\n\r\n<h1>SQL - ORDER BY Clause</h1>\r\n\r\n<p>The SQL&nbsp;<strong>ORDER BY</strong>&nbsp;clause is used to sort the data in ascending or descending order, based on one or more columns. Some databases sort the query results in an ascending order by default.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of the ORDER BY clause is as follows &minus;</p>\r\n\r\n<pre>\r\nSELECT column-list\r\nFROM table_name\r\n[WHERE condition]\r\n[ORDER BY column1, column2, .. columnN] [ASC | DESC];\r\n</pre>\r\n\r\n<p>You can use more than one column in the ORDER BY clause. Make sure whatever column you are using to sort that column should be in the column-list.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Consider the CUSTOMERS table having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>The following code block has an example, which would sort the result in an ascending order by the NAME and the SALARY &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT * FROM CUSTOMERS\r\n   ORDER BY NAME, SALARY;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>The following code block has an example, which would sort the result in the descending order by NAME.</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT * FROM CUSTOMERS\r\n   ORDER BY NAME DESC;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<h1>SQL - Group By</h1>\r\n\r\n<p>The SQL&nbsp;<strong>GROUP BY</strong>&nbsp;clause is used in collaboration with the SELECT statement to arrange identical data into groups. This GROUP BY clause follows the WHERE clause in a SELECT statement and precedes the ORDER BY clause.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>The basic syntax of a GROUP BY clause is shown in the following code block. The GROUP BY clause must follow the conditions in the WHERE clause and must precede the ORDER BY clause if one is used.</p>\r\n\r\n<pre>\r\nSELECT column1, column2\r\nFROM table_name\r\nWHERE [ conditions ]\r\nGROUP BY column1, column2\r\nORDER BY column1, column2\r\n</pre>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Consider the CUSTOMERS table is having the following records &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME | AGE | ADDRESS | SALARY |\r\n+----+----------+-----+-----------+----------+\r\n| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |\r\n| 2 | Khilan | 25 | Delhi | 1500.00 |\r\n| 3 | kaushik | 23 | Kota | 2000.00 |\r\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\r\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\r\n| 6 | Komal | 22 | MP | 4500.00 |\r\n| 7 | Muffy | 24 | Indore | 10000.00 |\r\n+----+----------+-----+-----------+----------+\r\n</pre>\r\n\r\n<p>If you want to know the total amount of the salary on each customer, then the GROUP BY query would be as follows.</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT NAME, SUM(SALARY) FROM CUSTOMERS\r\n   GROUP BY NAME;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+----------+-------------+\r\n| NAME | SUM(SALARY) |\r\n+----------+-------------+\r\n| Chaitali | 6500.00 |\r\n| Hardik | 8500.00 |\r\n| kaushik | 2000.00 |\r\n| Khilan | 1500.00 |\r\n| Komal | 4500.00 |\r\n| Muffy | 10000.00 |\r\n| Ramesh | 2000.00 |\r\n+----------+-------------+\r\n</pre>\r\n\r\n<p>Now, let us look at a table where the CUSTOMERS table has the following records with duplicate names &minus;</p>\r\n\r\n<pre>\r\n+----+----------+-----+-----------+----------+\r\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\r\n+----+----------+-----+-----------+----------+\r\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\r\n|  2 | Ramesh   |  25 | Delhi     |  1500.00 |\r\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\r\n|  4 | kaushik  |  25 | Mumbai    |  6500.00 |\r\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\r\n|  6 | Komal    |  22 | MP        |  4500.00 |\r\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\r\n+----+----------+-----+-----------+----------+</pre>\r\n\r\n<p>Now again, if you want to know the total amount of salary on each customer, then the GROUP BY query would be as follows &minus;</p>\r\n\r\n<pre>\r\nSQL&gt; SELECT NAME, SUM(SALARY) FROM CUSTOMERS\r\n   GROUP BY NAME;</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n\r\n<pre>\r\n+---------+-------------+\r\n| NAME | SUM(SALARY) |\r\n+---------+-------------+\r\n| Hardik | 8500.00 |\r\n| kaushik | 8500.00 |\r\n| Komal | 4500.00 |\r\n| Muffy | 10000.00 |\r\n| Ramesh | 3500.00 |\r\n+---------+-------------+\r\n</pre>\r\n', 'SQL'),
(25, 'ML - Introduction', '<h1>Machine Learning - Introduction</h1>\r\n\r\n<p>Today&rsquo;s Artificial Intelligence (AI) has far surpassed the hype of blockchain and quantum computing. This is due to the fact that huge computing resources are easily available to the common man. The developers now take advantage of this in creating new Machine Learning models and to re-train the existing models for better performance and results. The easy availability of High Performance Computing (HPC) has resulted in a sudden increased demand for IT professionals having Machine Learning skills.</p>\r\n\r\n<p>In this tutorial, you will learn in detail about&nbsp;</p>\r\n\r\n<p>What is the crux of machine learning?</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>What are the different types in machine learning?</p>\r\n	</li>\r\n	<li>\r\n	<p>What are the different algorithms available for developing machine learning models?</p>\r\n	</li>\r\n	<li>\r\n	<p>What tools are available for developing these models?</p>\r\n	</li>\r\n	<li>\r\n	<p>What are the programming language choices?</p>\r\n	</li>\r\n	<li>\r\n	<p>What platforms support development and deployment of Machine Learning applications?</p>\r\n	</li>\r\n	<li>\r\n	<p>What IDEs (Integrated Development Environment) are available?</p>\r\n	</li>\r\n	<li>\r\n	<p>How to quickly upgrade your skills in this important area?</p>\r\n	</li>\r\n</ul>\r\n\r\n<h1>What is Machine Learning?</h1>\r\n\r\n<p>Consider the following figure that shows a plot of house prices versus its size in sq. ft.</p>\r\n\r\n<p><img alt=\"House Prices Versus\" src=\"https://www.tutorialspoint.com/machine_learning/images/house_prices_versus.jpg\" /></p>\r\n\r\n<p>After plotting various data points on the XY plot, we draw a best-fit line to do our predictions for any other house given its size. You will feed the known data to the machine and ask it to find the best fit line. Once the best fit line is found by the machine, you will test its suitability by feeding in a known house size, i.e. the Y-value in the above curve. The machine will now return the estimated X-value, i.e. the expected price of the house. The diagram can be extrapolated to find out the price of a house which is 3000 sq. ft. or even larger. This is called regression in statistics. Particularly, this kind of regression is called linear regression as the relationship between X &amp; Y data points is linear.</p>\r\n\r\n<p>In many cases, the relationship between the X &amp; Y data points may not be a straight line, and it may be a curve with a complex equation. Your task would be now to find out the best fitting curve which can be extrapolated to predict the future values. One such application plot is shown in the figure below.</p>\r\n\r\n<p><img alt=\"Predict Future Values\" src=\"https://www.tutorialspoint.com/machine_learning/images/predict_future_values.jpg\" /></p>\r\n\r\n<p><em>Source:</em></p>\r\n\r\n<p><a href=\"https://upload.wikimedia.org/wikipedia/commons/c/c9/Segmented_linear_regression_graph_showing_yield_of_mustard_plants_vs_soil_salinity_in_Haryana%2C_India%2C_1987%E2%80%931988.jpg\" rel=\"nofollow\" target=\"_blank\"><em>https://upload.wikimedia.org/wikipedia/commons/c/c9/</em></a></p>\r\n\r\n<p>You will use the statistical optimization techniques to find out the equation for the best fit curve here. And this is what exactly Machine Learning is about. You use known optimization techniques to find the best solution to your problem.</p>\r\n\r\n<p>Next, let us look at the different categories of Machine Learning.</p>\r\n', 'Machine Learning'),
(26, 'ML - Categories', '<h1>Machine Learning - Categories</h1>\r\n\r\n<p>Machine Learning is broadly categorized under the following headings &minus;</p>\r\n\r\n<p><img alt=\"Categories Machine Learning\" src=\"https://www.tutorialspoint.com/machine_learning/images/categories_machine_learning.jpg\" /></p>\r\n\r\n<p>Machine learning evolved from left to right as shown in the above diagram.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Initially, researchers started out with Supervised Learning. This is the case of housing price prediction discussed earlier.</p>\r\n	</li>\r\n	<li>\r\n	<p>This was followed by unsupervised learning, where the machine is made to learn on its own without any supervision.</p>\r\n	</li>\r\n	<li>\r\n	<p>Scientists discovered further that it may be a good idea to reward the machine when it does the job the expected way and there came the Reinforcement Learning.</p>\r\n	</li>\r\n	<li>\r\n	<p>Very soon, the data that is available these days has become so humongous that the conventional techniques developed so far failed to analyze the big data and provide us the predictions.</p>\r\n	</li>\r\n	<li>\r\n	<p>Thus, came the deep learning where the human brain is simulated in the Artificial Neural Networks (ANN) created in our binary computers.</p>\r\n	</li>\r\n	<li>\r\n	<p>The machine now learns on its own using the high computing power and huge memory resources that are available today.</p>\r\n	</li>\r\n	<li>\r\n	<p>It is now observed that Deep Learning has solved many of the previously unsolvable problems.</p>\r\n	</li>\r\n	<li>\r\n	<p>The technique is now further advanced by giving incentives to Deep Learning networks as awards and there finally comes Deep Reinforcement Learning.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Let us now study each of these categories in more detail.</p>\r\n\r\n<h2>Supervised Learning</h2>\r\n\r\n<p>Supervised learning is analogous to training a child to walk. You will hold the child&rsquo;s hand, show him how to take his foot forward, walk yourself for a demonstration and so on, until the child learns to walk on his own.</p>\r\n\r\n<h3>Regression</h3>\r\n\r\n<p>Similarly, in the case of supervised learning, you give concrete known examples to the computer. You say that for given feature value x1 the output is y1, for x2 it is y2, for x3 it is y3, and so on. Based on this data, you let the computer figure out an empirical relationship between x and y.</p>\r\n\r\n<p>Once the machine is trained in this way with a sufficient number of data points, now you would ask the machine to predict Y for a given X. Assuming that you know the real value of Y for this given X, you will be able to deduce whether the machine&rsquo;s prediction is correct.</p>\r\n\r\n<p>Thus, you will test whether the machine has learned by using the known test data. Once you are satisfied that the machine is able to do the predictions with a desired level of accuracy (say 80 to 90%) you can stop further training the machine.</p>\r\n\r\n<p>Now, you can safely use the machine to do the predictions on unknown data points, or ask the machine to predict Y for a given X for which you do not know the real value of Y. This training comes under the regression that we talked about earlier.</p>\r\n\r\n<h3>Classification</h3>\r\n\r\n<p>You may also use machine learning techniques for classification problems. In classification problems, you classify objects of similar nature into a single group. For example, in a set of 100 students say, you may like to group them into three groups based on their heights - short, medium and long. Measuring the height of each student, you will place them in a proper group.</p>\r\n\r\n<p>Now, when a new student comes in, you will put him in an appropriate group by measuring his height. By following the principles in regression training, you will train the machine to classify a student based on his feature &ndash; the height. When the machine learns how the groups are formed, it will be able to classify any unknown new student correctly. Once again, you would use the test data to verify that the machine has learned your technique of classification before putting the developed model in production.</p>\r\n\r\n<p>Supervised Learning is where the AI really began its journey. This technique was applied successfully in several cases. You have used this model while doing the hand-written recognition on your machine. Several algorithms have been developed for supervised learning. You will learn about them in the following chapters.</p>\r\n\r\n<h2>Unsupervised Learning</h2>\r\n\r\n<p>In unsupervised learning, we do not specify a target variable to the machine, rather we ask machine &ldquo;What can you tell me about X?&rdquo;. More specifically, we may ask questions such as given a huge data set X, &ldquo;What are the five best groups we can make out of X?&rdquo; or &ldquo;What features occur together most frequently in X?&rdquo;. To arrive at the answers to such questions, you can understand that the number of data points that the machine would require to deduce a strategy would be very large. In case of supervised learning, the machine can be trained with even about few thousands of data points. However, in case of unsupervised learning, the number of data points that is reasonably accepted for learning starts in a few millions. These days, the data is generally abundantly available. The data ideally requires curating. However, the amount of data that is continuously flowing in a social area network, in most cases data curation is an impossible task.</p>\r\n\r\n<p>The following figure shows the boundary between the yellow and red dots as determined by unsupervised machine learning. You can see it clearly that the machine would be able to determine the class of each of the black dots with a fairly good accuracy.</p>\r\n\r\n<p><img alt=\"Unsupervised Machine Learning\" src=\"https://www.tutorialspoint.com/machine_learning/images/unsupervised_machine_learning.jpg\" /></p>\r\n\r\n<p><em>Source:</em></p>\r\n\r\n<p><a href=\"https://chrisjmccormick.files.wordpress.com/2013/08/approx_decision_boundary.png\" rel=\"nofollow\" target=\"_blank\"><em>https://chrisjmccormick.files.wordpress.com/2013/08/approx_decision_boun dary.png</em></a></p>\r\n\r\n<p>The unsupervised learning has shown a great success in many modern AI applications, such as face detection, object detection, and so on.</p>\r\n\r\n<h2>Reinforcement Learning</h2>\r\n\r\n<p>Consider training a pet dog, we train our pet to bring a ball to us. We throw the ball at a certain distance and ask the dog to fetch it back to us. Every time the dog does this right, we reward the dog. Slowly, the dog learns that doing the job rightly gives him a reward and then the dog starts doing the job right way every time in future. Exactly, this concept is applied in &ldquo;Reinforcement&rdquo; type of learning. The technique was initially developed for machines to play games. The machine is given an algorithm to analyze all possible moves at each stage of the game. The machine may select one of the moves at random. If the move is right, the machine is rewarded, otherwise it may be penalized. Slowly, the machine will start differentiating between right and wrong moves and after several iterations would learn to solve the game puzzle with a better accuracy. The accuracy of winning the game would improve as the machine plays more and more games.</p>\r\n\r\n<p>The entire process may be depicted in the following diagram &minus;</p>\r\n\r\n<p><img alt=\"Game Puzzle\" src=\"https://www.tutorialspoint.com/machine_learning/images/game_puzzle.jpg\" /></p>\r\n\r\n<p>This technique of machine learning differs from the supervised learning in that you need not supply the labelled input/output pairs. The focus is on finding the balance between exploring the new solutions versus exploiting the learned solutions.</p>\r\n\r\n<h2>Deep Learning</h2>\r\n\r\n<p>The deep learning is a model based on Artificial Neural Networks (ANN), more specifically Convolutional Neural Networks (CNN)s. There are several architectures used in deep learning such as deep neural networks, deep belief networks, recurrent neural networks, and convolutional neural networks.</p>\r\n\r\n<p>These networks have been successfully applied in solving the problems of computer vision, speech recognition, natural language processing, bioinformatics, drug design, medical image analysis, and games. There are several other fields in which deep learning is proactively applied. The deep learning requires huge processing power and humongous data, which is generally easily available these days.</p>\r\n\r\n<p>We will talk about deep learning more in detail in the coming chapters.</p>\r\n\r\n<h2>Deep Reinforcement Learning</h2>\r\n\r\n<p>The Deep Reinforcement Learning (DRL) combines the techniques of both deep and reinforcement learning. The reinforcement learning algorithms like Q-learning are now combined with deep learning to create a powerful DRL model. The technique has been with a great success in the fields of robotics, video games, finance and healthcare. Many previously unsolvable problems are now solved by creating DRL models. There is lots of research going on in this area and this is very actively pursued by the industries.</p>\r\n\r\n<p>So far, you have got a brief introduction to various machine learning models, now let us explore slightly deeper into various algorithms that are available under these models.</p>\r\n', 'Machine Learning'),
(27, 'ML - Supervised', '<h1>Machine Learning - Supervised</h1>\r\n\r\n<p>Supervised learning is one of the important models of learning involved in training machines. This chapter talks in detail about the same.</p>\r\n\r\n<h2>Algorithms for Supervised Learning</h2>\r\n\r\n<p>There are several algorithms available for supervised learning. Some of the widely used algorithms of supervised learning are as shown below &minus;</p>\r\n\r\n<ul>\r\n	<li>k-Nearest Neighbours</li>\r\n	<li>Decision Trees</li>\r\n	<li>Naive Bayes</li>\r\n	<li>Logistic Regression</li>\r\n	<li>Support Vector Machines</li>\r\n</ul>\r\n\r\n<p>As we move ahead in this chapter, let us discuss in detail about each of the algorithms.</p>\r\n\r\n<h2>k-Nearest Neighbours</h2>\r\n\r\n<p>The k-Nearest Neighbours, which is simply called kNN is a statistical technique that can be used for solving for classification and regression problems. Let us discuss the case of classifying an unknown object using kNN. Consider the distribution of objects as shown in the image given below &minus;</p>\r\n\r\n<p><img alt=\"Nearest Neighbours\" src=\"https://www.tutorialspoint.com/machine_learning/images/nearest_neighbours.jpg\" /></p>\r\n\r\n<p><em>Source:</em></p>\r\n\r\n<p><a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\" rel=\"nofollow\" target=\"_blank\"><em>https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm</em></a></p>\r\n\r\n<p>The diagram shows three types of objects, marked in red, blue and green colors. When you run the kNN classifier on the above dataset, the boundaries for each type of object will be marked as shown below &minus;</p>\r\n\r\n<p><img alt=\"Dataset boundaries\" src=\"https://www.tutorialspoint.com/machine_learning/images/dataset_boundaries.jpg\" /></p>\r\n\r\n<p><em>Source:</em></p>\r\n\r\n<p><a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\" rel=\"nofollow\" target=\"_blank\"><em>https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm</em></a></p>\r\n\r\n<p>Now, consider a new unknown object that you want to classify as red, green or blue. This is depicted in the figure below.</p>\r\n\r\n<p><img alt=\"Depicted Figure\" src=\"https://www.tutorialspoint.com/machine_learning/images/depicted_figure.jpg\" /></p>\r\n\r\n<p>As you see it visually, the unknown data point belongs to a class of blue objects. Mathematically, this can be concluded by measuring the distance of this unknown point with every other point in the data set. When you do so, you will know that most of its neighbours are of blue color. The average distance to red and green objects would be definitely more than the average distance to blue objects. Thus, this unknown object can be classified as belonging to blue class.</p>\r\n\r\n<p>The kNN algorithm can also be used for regression problems. The kNN algorithm is available as ready-to-use in most of the ML libraries.</p>\r\n\r\n<h2>Decision Trees</h2>\r\n\r\n<p>A simple decision tree in a flowchart format is shown below &minus;</p>\r\n\r\n<p><img alt=\"Flowchart Format\" src=\"https://www.tutorialspoint.com/machine_learning/images/flowchart_format.jpg\" /></p>\r\n\r\n<p>You would write a code to classify your input data based on this flowchart. The flowchart is self-explanatory and trivial. In this scenario, you are trying to classify an incoming email to decide when to read it.</p>\r\n\r\n<p>In reality, the decision trees can be large and complex. There are several algorithms available to create and traverse these trees. As a Machine Learning enthusiast, you need to understand and master these techniques of creating and traversing decision trees.</p>\r\n\r\n<h2>Naive Bayes</h2>\r\n\r\n<p>Naive Bayes is used for creating classifiers. Suppose you want to sort out (classify) fruits of different kinds from a fruit basket. You may use features such as color, size and shape of a fruit, For example, any fruit that is red in color, is round in shape and is about 10 cm in diameter may be considered as Apple. So to train the model, you would use these features and test the probability that a given feature matches the desired constraints. The probabilities of different features are then combined to arrive at a probability that a given fruit is an Apple. Naive Bayes generally requires a small number of training data for classification.</p>\r\n\r\n<h2>Logistic Regression</h2>\r\n\r\n<p>Look at the following diagram. It shows the distribution of data points in XY plane.</p>\r\n\r\n<p><img alt=\"Distribution Data Points\" src=\"https://www.tutorialspoint.com/machine_learning/images/distribution_data_points.jpg\" /></p>\r\n\r\n<p>From the diagram, we can visually inspect the separation of red dots from green dots. You may draw a boundary line to separate out these dots. Now, to classify a new data point, you will just need to determine on which side of the line the point lies.</p>\r\n\r\n<h2>Support Vector Machines</h2>\r\n\r\n<p>Look at the following distribution of data. Here the three classes of data cannot be linearly separated. The boundary curves are non-linear. In such a case, finding the equation of the curve becomes a complex job.</p>\r\n\r\n<p><img alt=\"Non-linear\" src=\"https://www.tutorialspoint.com/machine_learning/images/non_linear.jpg\" /></p>\r\n\r\n<p>Source:&nbsp;<a href=\"http://uc-r.github.io/svm\" rel=\"nofollow\" target=\"_blank\">http://uc-r.github.io/svm</a></p>\r\n\r\n<p>The Support Vector Machines (SVM) comes handy in determining the separation boundaries in such situations.</p>\r\n', 'Machine Learning');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(28, 'ML - Unsupervised', '<h1>Machine Learning - Unsupervised</h1>\r\n\r\n<p>So far what you have seen is making the machine learn to find out the solution to our target. In regression, we train the machine to predict a future value. In classification, we train the machine to classify an unknown object in one of the categories defined by us. In short, we have been training machines so that it can predict Y for our data X. Given a huge data set and not estimating the categories, it would be difficult for us to train the machine using supervised learning. What if the machine can look up and analyze the big data running into several Gigabytes and Terabytes and tell us that this data contains so many distinct categories?</p>\r\n\r\n<p>As an example, consider the voter&rsquo;s data. By considering some inputs from each voter (these are called features in AI terminology), let the machine predict that there are so many voters who would vote for X political party and so many would vote for Y, and so on. Thus, in general, we are asking the machine given a huge set of data points X, &ldquo;What can you tell me about X?&rdquo;. Or it may be a question like &ldquo;What are the five best groups we can make out of X?&rdquo;. Or it could be even like &ldquo;What three features occur together most frequently in X?&rdquo;.</p>\r\n\r\n<p>This is exactly the Unsupervised Learning is all about.</p>\r\n\r\n<h2>Algorithms for Unsupervised Learning</h2>\r\n\r\n<p>Let us now discuss one of the widely used algorithms for classification in unsupervised machine learning.</p>\r\n\r\n<h3>k-means clustering</h3>\r\n\r\n<p>The 2000 and 2004 Presidential elections in the United States were close &mdash; very close. The largest percentage of the popular vote that any candidate received was 50.7% and the lowest was 47.9%. If a percentage of the voters were to have switched sides, the outcome of the election would have been different. There are small groups of voters who, when properly appealed to, will switch sides. These groups may not be huge, but with such close races, they may be big enough to change the outcome of the election. How do you find these groups of people? How do you appeal to them with a limited budget? The answer is clustering.</p>\r\n\r\n<p>Let us understand how it is done.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>First, you collect information on people either with or without their consent: any sort of information that might give some clue about what is important to them and what will influence how they vote.</p>\r\n	</li>\r\n	<li>\r\n	<p>Then you put this information into some sort of clustering algorithm.</p>\r\n	</li>\r\n	<li>\r\n	<p>Next, for each cluster (it would be smart to choose the largest one first) you craft a message that will appeal to these voters.</p>\r\n	</li>\r\n	<li>\r\n	<p>Finally, you deliver the campaign and measure to see if it&rsquo;s working.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Clustering is a type of unsupervised learning that automatically forms clusters of similar things. It is like automatic classification. You can cluster almost anything, and the more similar the items are in the cluster, the better the clusters are. In this chapter, we are going to study one type of clustering algorithm called k-means. It is called k-means because it finds &lsquo;k&rsquo; unique clusters, and the center of each cluster is the mean of the values in that cluster.</p>\r\n\r\n<h3>Cluster Identification</h3>\r\n\r\n<p>Cluster identification tells an algorithm, &ldquo;Here&rsquo;s some data. Now group similar things together and tell me about those groups.&rdquo; The key difference from classification is that in classification you know what you are looking for. While that is not the case in clustering.</p>\r\n\r\n<p>Clustering is sometimes called unsupervised classification because it produces the same result as classification does but without having predefined classes.</p>\r\n\r\n<p>Now, we are comfortable with both supervised and unsupervised learning. To understand the rest of the machine learning categories, we must first understand Artificial Neural Networks (ANN), which we will learn in the next chapter.</p>\r\n', 'Machine Learning'),
(29, 'ML - Skills', '<h1>Machine Learning - Skills</h1>\r\n\r\n<p>Machine Learning has a very large width and requires skills across several domains. The skills that you need to acquire for becoming an expert in Machine Learning are listed below &minus;</p>\r\n\r\n<ul>\r\n	<li>Statistics</li>\r\n	<li>Probability Theories</li>\r\n	<li>Calculus</li>\r\n	<li>Optimization techniques</li>\r\n	<li>Visualization</li>\r\n</ul>\r\n\r\n<h2>Necessity of Various Skills of Machine Learning</h2>\r\n\r\n<p>To give you a brief idea of what skills you need to acquire, let us discuss some examples &minus;</p>\r\n\r\n<h3>Mathematical Notation</h3>\r\n\r\n<p>Most of the machine learning algorithms are heavily based on mathematics. The level of mathematics that you need to know is probably just a beginner level. What is important is that you should be able to read the notation that mathematicians use in their equations. For example - if you are able to read the notation and comprehend what it means, you are ready for learning machine learning. If not, you may need to brush up your mathematics knowledge.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>fAN(net&minus;&theta;)=âŽ§âŽ©âŽ¨&gamma;net&minus;&theta;&minus;&gamma;ifnet&minus;&theta;&ge;Ïµif&minus;Ïµ&lt;net&minus;&theta;&lt;Ïµifnet&minus;&theta;&le;&minus;ÏµfAN(net&minus;&theta;)={&gamma;ifnet&minus;&theta;&ge;Ïµnet&minus;&theta;if&minus;Ïµ&lt;net&minus;&theta;&lt;Ïµ&minus;&gamma;ifnet&minus;&theta;&le;&minus;Ïµ</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>max&alpha;[&sum;i=1m&alpha;&minus;12&sum;i,j=1mlabel(i)&sdot;label(j)&sdot;ai&sdot;aj&lang;x(i),x(j)&rang;]max&alpha;[&sum;i=1m&alpha;&minus;12&sum;i,j=1mlabel(i)&sdot;label(j)&sdot;ai&sdot;aj&lang;x(i),x(j)&rang;]</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>fAN(net&minus;&theta;)=(e&lambda;(net&minus;&theta;)&minus;e&minus;&lambda;(net&minus;&theta;)e&lambda;(net&minus;&theta;)+e&minus;&lambda;(net&minus;&theta;))fAN(net&minus;&theta;)=(e&lambda;(net&minus;&theta;)&minus;e&minus;&lambda;(net&minus;&theta;)e&lambda;(net&minus;&theta;)+e&minus;&lambda;(net&minus;&theta;))</p>\r\n\r\n<h3>Probability Theory</h3>\r\n\r\n<p>Here is an example to test your current knowledge of probability theory: Classifying with conditional probabilities.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>p(ci|x,y)=p(x,y|ci)p(ci)p(x,y)p(ci|x,y)=p(x,y|ci)p(ci)p(x,y)</p>\r\n\r\n<p>With these definitions, we can define the Bayesian classification rule &minus;</p>\r\n\r\n<ul>\r\n	<li>If P(c1|x, y) &gt; P(c2|x, y) , the class is c1 .</li>\r\n	<li>If P(c1|x, y) &lt; P(c2|x, y) , the class is c2 .</li>\r\n</ul>\r\n\r\n<h3>Optimization Problem</h3>\r\n\r\n<p>Here is an optimization function</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>max&alpha;[&sum;i=1m&alpha;&minus;12&sum;i,j=1mlabel(i)&sdot;label(j)&sdot;ai&sdot;aj&lang;x(i),x(j)&rang;]max&alpha;[&sum;i=1m&alpha;&minus;12&sum;i,j=1mlabel(i)&sdot;label(j)&sdot;ai&sdot;aj&lang;x(i),x(j)&rang;]</p>\r\n\r\n<p>Subject to the following constraints &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&alpha;&ge;0,and&sum;i&minus;1m&alpha;i&sdot;label(i)=0&alpha;&ge;0,and&sum;i&minus;1m&alpha;i&sdot;label(i)=0</p>\r\n\r\n<p>If you can read and understand the above, you are all set.</p>\r\n\r\n<h3>Visualization</h3>\r\n\r\n<p>In many cases, you will need to understand the various types of visualization plots to understand your data distribution and interpret the results of the algorithm&rsquo;s output.</p>\r\n\r\n<p><img alt=\"Visualization Plots\" src=\"https://www.tutorialspoint.com/machine_learning/images/visualization_plots.jpg\" /></p>\r\n\r\n<p>Besides the above theoretical aspects of machine learning, you need good programming skills to code those algorithms.</p>\r\n\r\n<p>So what does it take to implement ML? Let us look into this in the next chapter.</p>\r\n', 'Machine Learning'),
(30, 'ML - Implementing', '<h1>Machine Learning - Implementing</h1>\r\n\r\n<p>To develop ML applications, you will have to decide on the platform, the IDE and the language for development. There are several choices available. Most of these would meet your requirements easily as all of them provide the implementation of AI algorithms discussed so far.</p>\r\n\r\n<p>If you are developing the ML algorithm on your own, the following aspects need to be understood carefully &minus;</p>\r\n\r\n<p>The language of your choice &minus; this essentially is your proficiency in one of the languages supported in ML development.</p>\r\n\r\n<p>The IDE that you use &minus; This would depend on your familiarity with the existing IDEs and your comfort level.</p>\r\n\r\n<p><strong>Development platform</strong>&nbsp;&minus; There are several platforms available for development and deployment. Most of these are free-to-use. In some cases, you may have to incur a license fee beyond a certain amount of usage. Here is a brief list of choice of languages, IDEs and platforms for your ready reference.</p>\r\n\r\n<h2>Language Choice</h2>\r\n\r\n<p>Here is a list of languages that support ML development &minus;</p>\r\n\r\n<ul>\r\n	<li>Python</li>\r\n	<li>R</li>\r\n	<li>Matlab</li>\r\n	<li>Octave</li>\r\n	<li>Julia</li>\r\n	<li>C++</li>\r\n	<li>C</li>\r\n</ul>\r\n\r\n<p>This list is not essentially comprehensive; however, it covers many popular languages used in machine learning development. Depending upon your comfort level, select a language for the development, develop your models and test.</p>\r\n\r\n<h2>IDEs</h2>\r\n\r\n<p>Here is a list of IDEs which support ML development &minus;</p>\r\n\r\n<ul>\r\n	<li>R Studio</li>\r\n	<li>Pycharm</li>\r\n	<li>iPython/Jupyter Notebook</li>\r\n	<li>Julia</li>\r\n	<li>Spyder</li>\r\n	<li>Anaconda</li>\r\n	<li>Rodeo</li>\r\n	<li>Google &ndash;Colab</li>\r\n</ul>\r\n\r\n<p>The above list is not essentially comprehensive. Each one has its own merits and demerits. The reader is encouraged to try out these different IDEs before narrowing down to a single one.</p>\r\n\r\n<h2>Platforms</h2>\r\n\r\n<p>Here is a list of platforms on which ML applications can be deployed &minus;</p>\r\n\r\n<ul>\r\n	<li>IBM</li>\r\n	<li>Microsoft Azure</li>\r\n	<li>Google Cloud</li>\r\n	<li>Amazon</li>\r\n	<li>Mlflow</li>\r\n</ul>\r\n\r\n<p>Once again this list is not exhaustive. The reader is encouraged to sign-up for the abovementioned services and try them out themselves.</p>\r\n', 'Machine Learning'),
(31, 'ML - Conclusion', '<h1>Machine Learning - Conclusion</h1>\r\n\r\n<p>This tutorial has introduced you to Machine Learning. Now, you know that Machine Learning is a technique of training machines to perform the activities a human brain can do, albeit bit faster and better than an average human-being. Today we have seen that the machines can beat human champions in games such as Chess, AlphaGO, which are considered very complex. You have seen that machines can be trained to perform human activities in several areas and can aid humans in living better lives.</p>\r\n\r\n<p>Machine Learning can be a Supervised or Unsupervised. If you have lesser amount of data and clearly labelled data for training, opt for Supervised Learning. Unsupervised Learning would generally give better performance and results for large data sets. If you have a huge data set easily available, go for deep learning techniques. You also have learned Reinforcement Learning and Deep Reinforcement Learning. You now know what Neural Networks are, their applications and limitations.</p>\r\n\r\n<p>Finally, when it comes to the development of machine learning models of your own, you looked at the choices of various development languages, IDEs and Platforms. Next thing that you need to do is start learning and practicing each machine learning technique. The subject is vast, it means that there is width, but if you consider the depth, each topic can be learned in a few hours. Each topic is independent of each other. You need to take into consideration one topic at a time, learn it, practice it and implement the algorithm/s in it using a language choice of yours. This is the best way to start studying Machine Learning. Practicing one topic at a time, very soon you would acquire the width that is eventually required of a Machine Learning expert.</p>\r\n\r\n<p>Good Luck!</p>\r\n', 'Machine Learning'),
(32, 'DL - Tutorial', '<h1>Deep Learning Tutorial</h1>\r\n\r\n<p>Deep learning is based on the branch of machine learning, which is a subset of artificial intelligence. Since neural networks imitate the human brain and so deep learning will do. In deep learning, nothing is programmed explicitly. Basically, it is a machine learning class that makes use of numerous nonlinear processing units so as to perform feature extraction as well as transformation. The output from each preceding layer is taken as input by each one of the successive layers.</p>\r\n\r\n<p>Deep learning models are capable enough to focus on the accurate features themselves by requiring a little guidance from the programmer and are very helpful in solving out the problem of dimensionality.&nbsp;<a href=\"https://www.javatpoint.com/deep-learning-algorithms\">Deep learning algorithms</a>&nbsp;are used, especially when we have a huge no of inputs and outputs.</p>\r\n\r\n<p>Since deep learning has been evolved by the&nbsp;<a href=\"https://www.javatpoint.com/machine-learning\">machine learning</a>, which itself is a subset of artificial intelligence and as the idea behind the&nbsp;<a href=\"https://www.javatpoint.com/artificial-intelligence-tutorial\">artificial intelligence</a>&nbsp;is to mimic the human behavior, so same is &quot;the idea of deep learning to build such algorithm that can mimic the brain&quot;.</p>\r\n\r\n<p>Deep learning is implemented with the help of Neural Networks, and the idea behind the motivation of&nbsp;<a href=\"https://www.javatpoint.com/artificial-neural-network\">Neural Network</a>&nbsp;is the biological neurons, which is nothing but a brain cell.</p>\r\n\r\n<blockquote>Deep learning is a collection of statistical techniques of machine learning for learning feature hierarchies that are actually based on artificial neural networks.</blockquote>\r\n\r\n<p>So basically, deep learning is implemented by the help of deep networks, which are nothing but neural networks with multiple hidden layers.</p>\r\n\r\n<h2>Example of Deep Learning</h2>\r\n\r\n<p><img alt=\"Deep Learning Tutorial\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-example.png\" /></p>\r\n\r\n<p>In the example given above, we provide the raw data of images to the first layer of the input layer. After then, these input layer will determine the patterns of local contrast that means it will differentiate on the basis of colors, luminosity, etc. Then the 1st hidden layer will determine the face feature, i.e., it will fixate on eyes, nose, and lips, etc. And then, it will fixate those face features on the correct face template. So, in the 2<sup>nd</sup>&nbsp;hidden layer, it will actually determine the correct face here as it can be seen in the above image, after which it will be sent to the output layer. Likewise, more hidden layers can be added to solve more complex problems, for example, if you want to find out a particular kind of face having large or light complexions. So, as and when the hidden layers increase, we are able to solve complex problems.</p>\r\n\r\n<h2>Architectures</h2>\r\n\r\n<ul>\r\n	<li><strong><em>Deep Neural Networks</em></strong><br />\r\n	It is a neural network that incorporates the complexity of a certain level, which means several numbers of hidden layers are encompassed in between the input and output layers. They are highly proficient on model and process non-linear associations.</li>\r\n	<li><strong><em>Deep Belief Networks</em></strong><br />\r\n	A deep belief network is a class of Deep Neural Network that comprises of multi-layer belief networks.<br />\r\n	<strong>Steps to perform DBN:</strong>\r\n	<ol>\r\n		<li>With the help of the Contrastive Divergence algorithm, a layer of features is learned from perceptible units.</li>\r\n		<li>Next, the formerly trained features are treated as visible units, which perform learning of features.</li>\r\n		<li>Lastly, when the learning of the final hidden layer is accomplished, then the whole DBN is trained.</li>\r\n	</ol>\r\n	</li>\r\n	<li><strong><em>Recurrent Neural Networks</em></strong><br />\r\n	It permits parallel as well as sequential computation, and it is exactly similar to that of the human brain (large feedback network of connected neurons). Since they are capable enough to reminisce all of the imperative things related to the input they have received, so they are more precise.</li>\r\n</ul>\r\n\r\n<h2>Types of Deep Learning Networks</h2>\r\n\r\n<p><img alt=\"Deep Learning Tutorial\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/types-of-deep-learning-networks.png\" /></p>\r\n\r\n<h3>1. Feed Forward Neural Network</h3>\r\n\r\n<p>A feed-forward neural network is none other than an&nbsp;<a href=\"https://www.javatpoint.com/keras-artificial-neural-networks\">Artificial Neural Network</a>, which ensures that the nodes do not form a cycle. In this kind of neural network, all the perceptrons are organized within layers, such that the input layer takes the input, and the output layer generates the output. Since the hidden layers do not link with the outside world, it is named as hidden layers. Each of the perceptrons contained in one single layer is associated with each node in the subsequent layer. It can be concluded that all of the nodes are fully connected. It does not contain any visible or invisible connection between the nodes in the same layer. There are no back-loops in the feed-forward network. To minimize the prediction error, the backpropagation algorithm can be used to update the weight values.</p>\r\n\r\n<p><strong>Applications:</strong></p>\r\n\r\n<ul>\r\n	<li>Data Compression</li>\r\n	<li>Pattern Recognition</li>\r\n	<li>Computer Vision</li>\r\n	<li>Sonar Target Recognition</li>\r\n	<li>Speech Recognition</li>\r\n	<li>Handwritten Characters Recognition</li>\r\n</ul>\r\n\r\n<h3>2. Recurrent Neural Network</h3>\r\n\r\n<p><a href=\"https://www.javatpoint.com/keras-recurrent-neural-networks\">Recurrent neural networks</a>&nbsp;are yet another variation of feed-forward networks. Here each of the neurons present in the hidden layers receives an input with a specific delay in time. The Recurrent neural network mainly accesses the preceding info of existing iterations. For example, to guess the succeeding word in any sentence, one must have knowledge about the words that were previously used. It not only processes the inputs but also shares the length as well as weights crossways time. It does not let the size of the model to increase with the increase in the input size. However, the only problem with this recurrent neural network is that it has slow computational speed as well as it does not contemplate any future input for the current state. It has a problem with reminiscing prior information.</p>\r\n\r\n<p><strong>Applications:</strong></p>\r\n\r\n<ul>\r\n	<li>Machine Translation</li>\r\n	<li>Robot Control</li>\r\n	<li>Time Series Prediction</li>\r\n	<li>Speech Recognition</li>\r\n	<li>Speech Synthesis</li>\r\n	<li>Time Series Anomaly Detection</li>\r\n	<li>Rhythm Learning</li>\r\n	<li>Music Composition</li>\r\n</ul>\r\n\r\n<h3>3. Convolutional Neural Network</h3>\r\n\r\n<p><a href=\"https://www.javatpoint.com/keras-convolutional-neural-network\">Convolutional Neural Networks</a>&nbsp;are a special kind of neural network mainly used for image classification, clustering of images and object recognition. DNNs enable unsupervised construction of hierarchical image representations. To achieve the best accuracy, deep convolutional neural networks are preferred more than any other neural network.</p>\r\n\r\n<p><strong>Applications:</strong></p>\r\n\r\n<ul>\r\n	<li>Identify Faces, Street Signs, Tumors.</li>\r\n	<li>Image Recognition.</li>\r\n	<li>Video Analysis.</li>\r\n	<li>NLP.</li>\r\n	<li>Anomaly Detection.</li>\r\n	<li>Drug Discovery.</li>\r\n	<li>Checkers Game.</li>\r\n	<li>Time Series Forecasting.</li>\r\n</ul>\r\n\r\n<h3>4. Restricted Boltzmann Machine</h3>\r\n\r\n<p><a href=\"https://www.javatpoint.com/keras-restricted-boltzmann-machine\">RBMs</a>&nbsp;are yet another variant of Boltzmann Machines. Here the neurons present in the input layer and the hidden layer encompasses symmetric connections amid them. However, there is no internal association within the respective layer. But in contrast to RBM, Boltzmann machines do encompass internal connections inside the hidden layer. These restrictions in BMs helps the model to train efficiently.</p>\r\n\r\n<p><strong>Applications:</strong></p>\r\n\r\n<ul>\r\n	<li>Filtering.</li>\r\n	<li>Feature Learning.</li>\r\n	<li>Classification.</li>\r\n	<li>Risk Detection.</li>\r\n	<li>Business and Economic analysis.</li>\r\n</ul>\r\n\r\n<h3>5. Autoencoders</h3>\r\n\r\n<p>An autoencoder neural network is another kind of unsupervised machine learning algorithm. Here the number of hidden cells is merely small than that of the input cells. But the number of input cells is equivalent to the number of output cells. An autoencoder network is trained to display the output similar to the fed input to force AEs to find common patterns and generalize the data. The autoencoders are mainly used for the smaller representation of the input. It helps in the reconstruction of the original data from compressed data. This algorithm is comparatively simple as it only necessitates the output identical to the input.</p>\r\n\r\n<ul>\r\n	<li><strong>Encoder:</strong>&nbsp;Convert input data in lower dimensions.</li>\r\n	<li><strong>Decoder:</strong>&nbsp;Reconstruct the compressed data.</li>\r\n</ul>\r\n\r\n<p><strong>Applications:</strong></p>\r\n\r\n<ul>\r\n	<li>Classification.</li>\r\n	<li>Clustering.</li>\r\n	<li>Feature Compression.</li>\r\n</ul>\r\n\r\n<h2>Deep learning applications</h2>\r\n\r\n<ul>\r\n	<li><strong><em>Self-Driving Cars</em></strong><br />\r\n	In self-driven cars, it is able to capture the images around it by processing a huge amount of data, and then it will decide which actions should be incorporated to take a left or right or should it stop. So, accordingly, it will decide what actions it should take, which will further reduce the accidents that happen every year.</li>\r\n	<li><strong><em>Voice Controlled Assistance</em></strong><br />\r\n	When we talk about voice control assistance, then&nbsp;<strong>Siri</strong>&nbsp;is the one thing that comes into our mind. So, you can tell Siri whatever you want it to do it for you, and it will search it for you and display it for you.</li>\r\n	<li><strong><em>Automatic Image Caption Generation</em></strong><br />\r\n	Whatever image that you upload, the algorithm will work in such a way that it will generate caption accordingly. If you say blue colored eye, it will display a blue-colored eye with a caption at the bottom of the image.</li>\r\n	<li><strong><em>Automatic Machine Translation</em></strong><br />\r\n	With the help of automatic machine translation, we are able to convert one language into another with the help of deep learning.</li>\r\n</ul>\r\n\r\n<h2>Limitations</h2>\r\n\r\n<ul>\r\n	<li>It only learns through the observations.</li>\r\n	<li>It comprises of biases issues.</li>\r\n</ul>\r\n\r\n<h2>Advantages</h2>\r\n\r\n<ul>\r\n	<li>It lessens the need for feature engineering.</li>\r\n	<li>It eradicates all those costs that are needless.</li>\r\n	<li>It easily identifies difficult defects.</li>\r\n	<li>It results in the best-in-class performance on problems.</li>\r\n</ul>\r\n\r\n<h2>Disadvantages</h2>\r\n\r\n<ul>\r\n	<li>It requires an ample amount of data.</li>\r\n	<li>It is quite expensive to train.</li>\r\n	<li>It does not have strong theoretical groundwork.</li>\r\n</ul>\r\n', 'Deep Learning'),
(33, 'DL - Algorithms', '<h1>Deep Learning Algorithms</h1>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms1.png\" /></p>\r\n\r\n<h2>What is Deep Learning Algorithm?</h2>\r\n\r\n<p>Deep learning can be defined as the method of machine learning and artificial intelligence that is intended to intimidate humans and their actions based on certain human brain functions to make effective decisions. It is a very important data science element that channels its modeling based on data-driven techniques under<strong>&nbsp;predictive modeling</strong>&nbsp;and&nbsp;<strong>statistics.</strong>&nbsp;To drive such a human-like ability to adapt and learn and to function accordingly, there have to be some strong forces which we popularly called&nbsp;<strong>algorithms.</strong></p>\r\n\r\n<p><a href=\"https://www.javatpoint.com/deep-learning\">Deep learning</a>&nbsp;algorithms are dynamically made to run through several&nbsp;<strong>layers</strong>&nbsp;of neural networks, which are nothing but a set of decision-making networks that are pre-trained to serve a task. Later, each of these is passed through simple layered representations and move on to the next layer. However, most&nbsp;<a href=\"https://www.javatpoint.com/machine-learning\">machine learning</a>&nbsp;is trained to work fairly well on datasets that have to deal with hundreds of features or columns. For a data set to be structured or unstructured, machine learning tends to fail mostly because they fail to recognize a simple image having a dimension of&nbsp;<strong>800x1000</strong>&nbsp;in RGB. It becomes quite unfeasible for a traditional machine learning algorithm to handle such depths. This is where deep learning.</p>\r\n\r\n<h2>Importance of Deep Learning</h2>\r\n\r\n<p>Deep learning algorithms play a crucial role in determining the features and can handle the large number of processes for the data that might be structured or unstructured. Although, deep learning algorithms can overkill some tasks that might involve complex problems because they need access to huge amounts of data so that they can function effectively. For example, there&#39;s a popular deep learning tool that recognizes images namely&nbsp;<strong>Imagenet</strong>&nbsp;that has access to&nbsp;<strong>14 million</strong>&nbsp;images in its dataset-driven algorithms. It is a highly comprehensive tool that has defined a next-level benchmark for deep learning tools that aim images as their dataset.</p>\r\n\r\n<p>Deep learning algorithms are highly progressive algorithms that learn about the image that we discussed previously by passing it through each neural network layer. The layers are highly sensitive to detect low-level features of the image like&nbsp;<strong>edges</strong>&nbsp;and&nbsp;<strong>pixels</strong>&nbsp;and henceforth the combined layers take this information and form holistic representations by comparing it with previous data. For example, the middle layer might be programmed to detect some special parts of the object in the photograph which other deep trained layers are programmed to detect special objects like&nbsp;<strong>dogs, trees, utensils,</strong>&nbsp;etc.</p>\r\n\r\n<p>However, if we talk out the simple task that involves less complexity and a data-driven resource, deep learning algorithms fail to generalize simple data. This is one of the main reasons deep learning is not considered effective as&nbsp;<strong>linear</strong>&nbsp;or&nbsp;<strong>boosted tree models.</strong>&nbsp;Simple models aim to churn out custom data, track fraudulent transactions and deal with less complex datasets with fewer features. Also, there are various cases like&nbsp;<strong>multiclass classification</strong>&nbsp;where deep learning can be effective because it involves smaller but more structured datasets but is not preferred usually.</p>\r\n\r\n<p>Having said that, let&#39;s look understand some of the most important deep learning algorithms given below.</p>\r\n\r\n<h2>Deep Learning Algorithms</h2>\r\n\r\n<p>The Deep Learning Algorithms are as follows:</p>\r\n\r\n<h3>1. Convolutional Neural Networks (CNNs)</h3>\r\n\r\n<p><a href=\"https://www.javatpoint.com/keras-convolutional-neural-network\">CNN&#39;s</a>&nbsp;popularly known as&nbsp;<strong>ConvNets</strong>&nbsp;majorly consists of several layers and are specifically used for image processing and detection of objects. It was developed in&nbsp;<strong>1998</strong>&nbsp;by&nbsp;<strong>Yann LeCun</strong>&nbsp;and was first called&nbsp;<strong>LeNet.</strong>&nbsp;Back then, it was developed to recognize digits and zip code characters. CNNs have wide usage in identifying the image of the satellites, medical image processing, series forecasting, and anomaly detection.</p>\r\n\r\n<p>CNNs process the data by passing it through multiple layers and extracting features to exhibit convolutional operations. The&nbsp;<strong>Convolutional Layer</strong>&nbsp;consists of&nbsp;<strong>Rectified Linear Unit</strong>&nbsp;(ReLU) that outlasts to rectify the feature map.&nbsp;<strong>The Pooling layer</strong>&nbsp;is used to rectify these feature maps into the next feed. Pooling is generally a sampling algorithm that is down-sampled and it reduces the dimensions of the feature map. Later, the result generated consists of&nbsp;<strong>2-D arrays</strong>&nbsp;consisting of&nbsp;<strong>single, long, continuous,</strong>&nbsp;and&nbsp;<strong>linear vector</strong>&nbsp;flattened in the map. The next layer i.e., called&nbsp;<strong>Fully Connected Layer</strong>&nbsp;which forms the flattened&nbsp;<strong>matrix</strong>&nbsp;or&nbsp;<strong>2-D</strong>&nbsp;array fetched from the Pooling Layer as input and identifies the image by classifying it.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms2.png\" /></p>\r\n\r\n<h3>2. Long Short Term Memory Networks (LSTMs)</h3>\r\n\r\n<p><a href=\"https://www.javatpoint.com/long-short-term-memory-rnn-in-tensorflow\">LSTMs</a>&nbsp;can be defined as&nbsp;<strong>Recurrent Neural Networks</strong>&nbsp;(RNN) that are programmed to learn and adapt for dependencies for the long term. It can memorize and recall past data for a greater period and by default, it is its sole behavior. LSTMs are designed to retain over time and henceforth they are majorly used in time series predictions because they can restrain memory or previous inputs. This analogy comes from their&nbsp;<strong>chain-like</strong>&nbsp;structure consisting of&nbsp;<strong>four</strong>&nbsp;interacting layers that communicate with each other differently. Besides applications of time series prediction, they can be used to construct&nbsp;<strong>speech recognizers, development in pharmaceuticals,</strong>&nbsp;and composition of&nbsp;<strong>music loops</strong>&nbsp;as well.</p>\r\n\r\n<p>LSTM work in a sequence of events. First, they don&#39;t tend to remember irrelevant details attained in the previous state. Next, they update certain cell-state values selectively and finally generate certain parts of the cell-state as output. Below is the diagram of their operation.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms3.png\" /></p>\r\n\r\n<h3>3. Recurrent Neural Networks (RNNs)</h3>\r\n\r\n<p><a href=\"https://www.javatpoint.com/keras-recurrent-neural-networks\">Recurrent Neural Networks</a>&nbsp;or RNNs consist of some directed connections that form a cycle that allow the input provided from the LSTMs to be used as input in the current phase of RNNs. These inputs are deeply embedded as inputs and enforce the memorization ability of LSTMs lets these inputs get absorbed for a period in the internal memory. RNNs are therefore dependent on the inputs that are preserved by LSTMs and work under the synchronization phenomenon of LSTMs. RNNs are mostly used in captioning the image, time series analysis, recognizing handwritten data, and translating data to machines.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>RNNs follow the work approach by putting output feeds&nbsp;<strong>(t-1)</strong>&nbsp;time if the time is defined as&nbsp;<strong>t.</strong>&nbsp;Next, the output determined by t is feed at input time&nbsp;<strong>t+1.</strong>&nbsp;Similarly, these processes are repeated for all the input consisting of any length. There&#39;s also a fact about RNNs is that they store historical information and there&#39;s no increase in the input size even if the model size is increased. RNNs look something like this when unfolded.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms4.png\" /></p>\r\n\r\n<h3>4. Generative Adversarial Networks (GANs)</h3>\r\n\r\n<p>GANs are defined as deep learning algorithms that are used to generate new instances of data that match the training data. GAN usually consists of two components namely a&nbsp;<strong>generator</strong>&nbsp;that learns to generate false data and a&nbsp;<strong>discriminator</strong>&nbsp;that adapts itself by learning from this false data. Over some time, GANs have gained immense usage since they are frequently being used to clarify&nbsp;<strong>astronomical images</strong>&nbsp;and simulate&nbsp;<strong>lensing</strong>&nbsp;the gravitational dark matter. It is also used in&nbsp;<strong>video games</strong>&nbsp;to increase graphics for&nbsp;<strong>2D</strong>&nbsp;textures by recreating them in higher resolution like&nbsp;<strong>4K</strong>. They are also used in creating&nbsp;<strong>realistic cartoons character</strong>&nbsp;and also rendering human faces and&nbsp;<strong>3D object rendering.</strong></p>\r\n\r\n<p>GANs work in simulation by generating and understanding the fake data and the real data. During the training to understand these data, the generator produces different kinds of fake data where the discriminator quickly learns to adapt and respond to it as false data. GANs then send these recognized results for updating. Consider the below image to visualize the functioning.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms5.png\" /></p>\r\n\r\n<h3>5. Radial Basis Function Networks (RBFNs)</h3>\r\n\r\n<p>RBFNs are specific types of neural networks that follow a feed-forward approach and make use of radial functions as activation functions. They consist of&nbsp;<strong>three</strong>&nbsp;layers namely the&nbsp;<strong>input layer, hidden layer,</strong>&nbsp;and&nbsp;<strong>output layer</strong>&nbsp;which are mostly used for&nbsp;<strong>time-series prediction, regression testing,</strong>&nbsp;and&nbsp;<strong>classification.</strong></p>\r\n\r\n<p>RBFNs do these tasks by measuring the similarities present in the training data set. They usually have an input vector that feeds these data into the input layer thereby confirming the identification and rolling out results by comparing previous data sets. Precisely, the input layer has&nbsp;<strong>neurons</strong>&nbsp;that are sensitive to these data and the nodes in the layer are efficient in classifying the class of data. Neurons are originally present in the hidden layer though they work in close integration with the input layer. The hidden layer contains&nbsp;<strong>Gaussian transfer</strong>&nbsp;functions that are inversely proportional to the distance of the output from the neuron&#39;s center. The output layer has linear combinations of the&nbsp;<strong>radial-based</strong>&nbsp;data where the Gaussian functions are passed in the neuron as parameter and output is generated. Consiider the given image below to understand the process thoroughly.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms6.png\" /></p>\r\n\r\n<h3>6. Multilayer Perceptrons (MLPs)</h3>\r\n\r\n<p><a href=\"https://www.javatpoint.com/multi-layer-perceptron-in-tensorflow\">MLPs</a>&nbsp;are the base of deep learning technology. It belongs to a class of feed-forward neural networks having various layers of&nbsp;<strong>perceptrons.</strong>&nbsp;These perceptrons have various activation functions in them. MLPs also have connected input and output layers and their number is the same. Also, there&#39;s a layer that remains hidden amidst these two layers. MLPs are mostly used to build&nbsp;<strong>image and speech recognition</strong>&nbsp;systems or some other types of the&nbsp;<strong>translation software.</strong></p>\r\n\r\n<p>The working of MLPs starts by feeding the data in the input layer. The neurons present in the layer form a graph to establish a connection that passes in one direction. The weight of this input data is found to exist between the hidden layer and the input layer. MLPs use activation functions to determine which nodes are ready to fire. These activation functions include&nbsp;<strong>tanh</strong>&nbsp;function,&nbsp;<strong>sigmoid</strong>&nbsp;and&nbsp;<strong>ReLUs.</strong>&nbsp;MLPs are mainly used to train the models to understand what kind of co-relation the layers are serving to achieve the desired output from the given data set. See the below image to understand better.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms7.png\" /></p>\r\n\r\n<h3>7. Self Organizing Maps (SOMs)</h3>\r\n\r\n<p><a href=\"https://www.javatpoint.com/keras-kohonen-self-organizing-maps\">SOMs</a>&nbsp;were invented by&nbsp;<strong>Teuvo Kohenen</strong>&nbsp;for achieving data visualization to understand the dimensions of data through artificial and self-organizing neural networks. The attempts to achieve data visualization to solve problems are mainly done by what humans cannot visualize. These data are generally high-dimensional so there are lesser chances of human involvement and of course less error.</p>\r\n\r\n<p>SOMs help in visualizing the data by initializing weights of different nodes and then choose random vectors from the given training data. They examine each node to find the relative weights so that dependencies can be understood. The winning node is decided and that is called&nbsp;<strong>Best Matching Unit</strong>&nbsp;(BMU). Later, SOMs discover these winning nodes but the nodes reduce over time from the sample vector. So, the closer the node to BMU more is the more chance to recognize the weight and carry out further activities. There are also multiple iterations done to ensure that no node closer to BMU is missed. One example of such is the&nbsp;<strong>RGB color combinations</strong>&nbsp;that we use in our daily tasks. Consider the below image to understand how they function.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms8.png\" /></p>\r\n\r\n<h3>8. Deep Belief Networks (DBNs)</h3>\r\n\r\n<p>DBNs are called generative models because they have various layers of latent as well as stochastic variables. The latent variable is called a&nbsp;<strong>hidden unit</strong>&nbsp;because they have binary values. DBNs are also called&nbsp;<strong>Boltzmann Machines</strong>&nbsp;because the&nbsp;<strong>RGM</strong>&nbsp;layers are stacked over each other to establish communication with previous and consecutive layers. DBNs are used in applications like video and image recognition as well as capturing motional objects.</p>\r\n\r\n<p>DBNs are powered by&nbsp;<strong>Greedy algorithms.</strong>&nbsp;The layer to layer approach by leaning through a&nbsp;<strong>top-down</strong>&nbsp;approach to generate weights is the most common way DBNs function. DBNs use step by step approach of&nbsp;<strong>Gibbs</strong>&nbsp;sampling on the hidden&nbsp;<strong>two-layer</strong>&nbsp;at the top. Then, these stages draw a sample from the visible units using a model that follows the ancestral sampling method. DBNs learn from the values present in the latent value from every layer following the&nbsp;<strong>bottom-up</strong>&nbsp;pass approach.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms9.png\" /></p>\r\n\r\n<h3>9. Restricted Boltzmann Machines (RBMs)</h3>\r\n\r\n<p>RBMs were developed by&nbsp;<strong>Geoffrey Hinton</strong>&nbsp;and resemble stochastic neural networks that learn from the probability distribution in the given input set. This algorithm is mainly used in the field of dimension&nbsp;<strong>reduction, regression</strong>&nbsp;and&nbsp;<strong>classification, topic modeling</strong>&nbsp;and are considered the building blocks of DBNs. RBIs consist of two layers namely the&nbsp;<strong>visible layer</strong>&nbsp;and the&nbsp;<strong>hidden layer</strong>. Both of these layers are connected through hidden units and have bias units connected to nodes that generate the output. Usually, RBMs have two phases namely&nbsp;<strong>forward pass</strong>&nbsp;and&nbsp;<strong>backward pass</strong>.</p>\r\n\r\n<p>The functioning of RBMs is carried out by accepting inputs and translating them to numbers so that inputs are encoded in the forward pass. RBMs take into account the weight of every input, and the backward pass takes these input weights and translates them further into reconstructed inputs. Later, both of these translated inputs, along with individual weights, are combined. These inputs are then pushed to the visible layer where the activation is carried out, and output is generated that can be easily reconstructed. To understand this process, consider the below image.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms10.png\" /></p>\r\n\r\n<h3>Autoencoders</h3>\r\n\r\n<p>Autoencoders are a special type of neural network where inputs are outputs are found usually identical. It was designed to primarily solve the problems related to unsupervised learning. Autoencoders are highly trained neural networks that&nbsp;<strong>replicate</strong>&nbsp;the data. It is the reason why the input and output are generally the same. They are used to achieve tasks like&nbsp;<strong>pharma discovery, image processing,</strong>&nbsp;and&nbsp;<strong>population prediction.</strong></p>\r\n\r\n<p>Autoencoders constitute three components namely the&nbsp;<strong>encoder</strong>, the&nbsp;<strong>code</strong>, and the&nbsp;<strong>decoder.</strong>&nbsp;Autoencoders are built in such a structure that they can receive inputs and transform them into various representations. The attempts to copy the original input by reconstructing them is more accurate. They do this by encoding the image or input, reduce the size. If the image is not visible properly they are passed to the neural network for clarification. Then, the clarified image is termed a reconstructed image and this resembles as accurate as of the previous image. To understand this complex process, see the below-provided image.</p>\r\n\r\n<p><img alt=\"Deep Learning Algorithms\" src=\"https://static.javatpoint.com/tutorial/deep-learning/images/deep-learning-algorithms11.png\" /></p>\r\n\r\n<h2>Summary</h2>\r\n\r\n<p>In this article, we mainly use deep learning and the algorithms that work behind deep learning. First, we learned how deep learning changes the work at a dynamic pace with vision to create intelligent software that can recreate it and function like a human brain does. Later in this article, we learned some of the most used deep learning algorithms and learned the components that drive these algorithms are. Usually, to understand these algorithms, a person needs high clarity with mathematical functions discussed in some of the algorithms. These functions are so crucial that the working of these algorithms mostly depends on the calculations done by using these functions and formulae. An aspiring deep learning engineer knows all of these algorithms, and it is highly recommended for beginners to understand these algorithms before moving ahead into artificial intelligence.</p>\r\n', 'Deep Learning');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(34, 'DL - Keras Tutorial', '<h1>Keras Tutorial</h1>\r\n\r\n<p><img alt=\"Keras Tutorial\" src=\"https://static.javatpoint.com/tutorial/keras/images/keras.png\" /></p>\r\n\r\n<p>Keras is an open-source high-level Neural Network library, which is written in Python is capable enough to run on Theano, TensorFlow, or CNTK. It was developed by one of the Google engineers, Francois Chollet. It is made user-friendly, extensible, and modular for facilitating faster experimentation with deep neural networks. It not only supports Convolutional Networks and Recurrent Networks individually but also their combination.</p>\r\n\r\n<p>It cannot handle low-level computations, so it makes use of the&nbsp;<strong>Backend</strong>&nbsp;library to resolve it. The backend library act as a high-level API wrapper for the low-level API, which lets it run on TensorFlow, CNTK, or Theano.</p>\r\n\r\n<p>Initially, it had over 4800 contributors during its launch, which now has gone up to 250,000 developers. It has a 2X growth ever since every year it has grown. Big companies like Microsoft, Google, NVIDIA, and Amazon have actively contributed to the development of Keras. It has an amazing industry interaction, and it is used in the development of popular firms likes Netflix, Uber, Google, Expedia, etc.</p>\r\n\r\n<h2>What makes Keras special?</h2>\r\n\r\n<ul>\r\n	<li>Focus on user experience has always been a major part of Keras.</li>\r\n	<li>Large adoption in the industry.</li>\r\n	<li>It is a multi backend and supports multi-platform, which helps all the encoders come together for coding.</li>\r\n	<li>Research community present for Keras works amazingly with the production community.</li>\r\n	<li>Easy to grasp all concepts.</li>\r\n	<li>It supports fast prototyping.</li>\r\n	<li>It seamlessly runs on CPU as well as GPU.</li>\r\n	<li>It provides the freedom to design any architecture, which then later is utilized as an API for the project.</li>\r\n	<li>It is really very simple to get started with.</li>\r\n	<li>Easy production of models actually makes Keras special.</li>\r\n</ul>\r\n\r\n<h2>Keras user experience</h2>\r\n\r\n<ol>\r\n	<li><strong>Keras is an API designed for humans</strong><br />\r\n	Best practices are followed by Keras to decrease cognitive load, ensures that the models are consistent, and the corresponding APIs are simple.</li>\r\n	<li><strong>Not designed for machines</strong><br />\r\n	Keras provides clear feedback upon the occurrence of any error that minimizes the number of user actions for the majority of the common use cases.</li>\r\n	<li><strong>Easy to learn and use.</strong></li>\r\n	<li><strong>Highly Flexible</strong><br />\r\n	Keras provide high flexibility to all of its developers by integrating low-level deep learning languages such as TensorFlow or Theano, which ensures that anything written in the base language can be implemented in Keras.</li>\r\n</ol>\r\n\r\n<h2>How Keras support the claim of being multi-backend and multi-platform?</h2>\r\n\r\n<p>Keras can be developed in R as well as Python, such that the code can be run with TensorFlow, Theano, CNTK, or MXNet as per the requirement. Keras can be run on CPU, NVIDIA GPU, AMD GPU, TPU, etc. It ensures that producing models with Keras is really simple as it totally supports to run with TensorFlow serving, GPU acceleration (WebKeras, Keras.js), Android (TF, TF Lite), iOS (Native CoreML) and Raspberry Pi.</p>\r\n\r\n<h2>Keras Backend</h2>\r\n\r\n<p>Keras being a model-level library helps in developing deep learning models by offering high-level building blocks. All the low-level computations such as products of Tensor, convolutions, etc. are not handled by Keras itself, rather they depend on a specialized tensor manipulation library that is well optimized to serve as a backend engine. Keras has managed it so perfectly that instead of incorporating one single library of tensor and performing operations related to that particular library, it offers plugging of different backend engines into Keras.</p>\r\n\r\n<p>Keras consist of three backend engines, which are as follows:</p>\r\n\r\n<ul>\r\n	<li><strong>TensorFlow</strong><br />\r\n	TensorFlow is a Google product, which is one of the most famous deep learning tools widely used in the research area of machine learning and deep neural network. It came into the market on 9<sup>th</sup>&nbsp;November 2015 under the Apache License 2.0. It is built in such a way that it can easily run on multiple CPUs and GPUs as well as on mobile operating systems. It consists of various wrappers in distinct languages such as Java, C++, or Python.<br />\r\n	<img alt=\"Keras Tutorial\" src=\"https://static.javatpoint.com/tutorial/keras/images/keras-backend1.png\" /></li>\r\n	<li><strong>Theano</strong><br />\r\n	Theano was developed at the University of Montreal, Quebec, Canada, by the MILA group. It is an open-source python library that is widely used for performing mathematical operations on multi-dimensional arrays by incorporating scipy and numpy. It utilizes GPUs for faster computation and efficiently computes the gradients by building symbolic graphs automatically. It has come out to be very suitable for unstable expressions, as it first observes them numerically and then computes them with more stable algorithms.<br />\r\n	<img alt=\"Keras Tutorial\" src=\"https://static.javatpoint.com/tutorial/keras/images/keras-backend2.png\" /></li>\r\n	<li><strong>CNTK</strong><br />\r\n	Microsoft Cognitive Toolkit is deep learning&#39;s open-source framework. It consists of all the basic building blocks, which are required to form a neural network. The models are trained using C++ or Python, but it incorporates C# or Java to load the model for making predictions.<br />\r\n	<img alt=\"Keras Tutorial\" src=\"https://static.javatpoint.com/tutorial/keras/images/keras-backend3.png\" /></li>\r\n</ul>\r\n\r\n<h2>Advantages of Keras</h2>\r\n\r\n<p>Keras encompasses the following advantages, which are as follows:</p>\r\n\r\n<ul>\r\n	<li>It is very easy to understand and incorporate the faster deployment of network models.</li>\r\n	<li>It has huge community support in the market as most of the AI companies are keen on using it.</li>\r\n	<li>It supports multi backend, which means you can use any one of them among TensorFlow, CNTK, and Theano with Keras as a backend according to your requirement.</li>\r\n	<li>Since it has an easy deployment, it also holds support for cross-platform. Following are the devices on which Keras can be deployed:\r\n	<ol>\r\n		<li>iOS with CoreML</li>\r\n		<li>Android with TensorFlow Android</li>\r\n		<li>Web browser with .js support</li>\r\n		<li>Cloud engine</li>\r\n		<li>Raspberry pi</li>\r\n	</ol>\r\n	</li>\r\n	<li>It supports Data parallelism, which means Keras can be trained on multiple GPU&#39;s at an instance for speeding up the training time and processing a huge amount of data.</li>\r\n</ul>\r\n\r\n<h2>Disadvantages of Keras</h2>\r\n\r\n<ul>\r\n	<li>The only disadvantage is that Keras has its own pre-configured layers, and if you want to create an abstract layer, it won&#39;t let you because it cannot handle low-level APIs. It only supports high-level API running on the top of the backend engine (TensorFlow, Theano, and CNTK).</li>\r\n</ul>\r\n\r\n<h2>Prerequisite</h2>\r\n\r\n<p>This Keras tutorial is made for both beginners and professionals, to help them understand the fundamental concept of Keras. After the completion of this tutorial, you will find yourself at a moderate level of expertise from where you can take yourself to the next level.</p>\r\n\r\n<h2>Audience</h2>\r\n\r\n<p>Since Keras is a deep learning&#39;s high-level library, so you are required to have hands-on Python language as well as basic knowledge of the neural network.</p>\r\n\r\n<h2>Problem</h2>\r\n\r\n<p>We assure you that you will not find any difficulty in this tutorial. In case you come up with a query, or you find any mistake in this tutorial, do let us know by posting it in the contact form so that we can further improve it.</p>\r\n', 'Deep Learning'),
(35, 'DL - Keras Library Installation', '<h1>Installation of Keras library in Anaconda</h1>\r\n\r\n<p>To install Keras, you will need&nbsp;<strong>Anaconda Distribution</strong>, which is supported by a company called Continuum Analytics. Anaconda provides a platform for Python and&nbsp;<a href=\"https://www.javatpoint.com/r-tutorial\">R languages</a>, which is an open-source and free distribution. It is a platform-independent, which means that it can be installed on any operating system such as MAC OS,&nbsp;<a href=\"https://www.javatpoint.com/windows\">Windows</a>, and&nbsp;<a href=\"https://www.javatpoint.com/linux-tutorial\">Linux</a>&nbsp;as per the user&#39;s requirement. It has come up with more than 1500 packages of Python/R that are necessary for developing&nbsp;<a href=\"https://www.javatpoint.com/deep-learning\">deep learning</a>&nbsp;as well as&nbsp;<a href=\"https://www.javatpoint.com/machine-learning\">machine learning</a>&nbsp;models.</p>\r\n\r\n<p>It provides an easy&nbsp;<a href=\"https://www.javatpoint.com/how-to-install-python\">python installation</a>&nbsp;with several&nbsp;<a href=\"https://www.javatpoint.com/ide-full-form\">IDE</a>&#39;s such as&nbsp;<a href=\"https://www.javatpoint.com/jupyter-notebook\">Jupyter Notebook</a>, Anaconda prompt, Spyder, etc. Once it is installed, it will automatically install&nbsp;<a href=\"https://www.javatpoint.com/python-tutorial\">Python</a>&nbsp;with some of its basic IDE&#39;s and libraries by providing as much convenience as it can to its user.</p>\r\n\r\n<p>Following are the steps that illustrate Keras installation:</p>\r\n\r\n<p><strong>Step1: Download Anaconda Python</strong></p>\r\n\r\n<p>To download Anaconda, you can either go to one of your favorite browser and type&nbsp;<strong>Download Anaconda Python</strong>&nbsp;in the search bar or, simply follow the link given below.</p>\r\n\r\n<p><a href=\"https://www.anaconda.com/distribution/#download-section\" rel=\"nofollow\" target=\"_blank\">https://www.anaconda.com/distribution/#download-section</a>.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda1.png\" /></p>\r\n\r\n<p>Click on the very first link, and you will get directed to the Anaconda&#39;s download page, as shown below:</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda2.png\" /></p>\r\n\r\n<p>You will notice that Anaconda is available for various operating systems such as&nbsp;<strong>Windows, MAC OS</strong>, and&nbsp;<strong>Linux</strong>. You can download it by clicking on the available options as per your OS. It will offer you Python 2.7 and Python 3.7 version. Since the latest version is&nbsp;<strong>Python 3.7</strong>, so download it by clicking on the download option. The downloading will automatically start after you hit the download option.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda3.png\" /></p>\r\n\r\n<p><strong>Step2: Install Anaconda Python</strong></p>\r\n\r\n<p>After the download is finished, go to the download folder and click on the Anaconda&#39;s&nbsp;<strong>.exe</strong>&nbsp;file (Anaconda3-2019.03-Windows-x86_64.exe). The setup window for the installation of Anaconda will get open up where you have to click on&nbsp;<strong>Next</strong>, as shown below:</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda4.png\" /></p>\r\n\r\n<p>After clicking on the Next, it will open a License Agreement window, click on I Agree to move ahead with the installation.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda5.png\" /></p>\r\n\r\n<p>Next, you will get two options in the window; click on the first option, followed by clicking on&nbsp;<strong>Next</strong>.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda6.png\" /></p>\r\n\r\n<p>Thereafter you will be directed to the window where it will ask you for the installation location, and it&#39;s your choice to either keep it as default or change the location by browsing a location and then click on&nbsp;<strong>Next</strong>, as shown below:</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda7.png\" /></p>\r\n\r\n<p>Click on Install.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda8.png\" /></p>\r\n\r\n<p>Once you are done with the installation, click on&nbsp;<strong>Next</strong>.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda9.png\" /></p>\r\n\r\n<p>Click on Finish after the installation is completed to end the process.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda10.png\" /></p>\r\n\r\n<p><strong>Step3: Create Environment</strong></p>\r\n\r\n<p>Now that you are done with installing Anaconda, you have to create a new conda environment where you will be installing all your modules to build your models.</p>\r\n\r\n<p>You can run Anaconda prompt as an Administrator, which you can do by searching the Anaconda prompt in the search bar and then click right on it, followed by selecting the first option, which says&nbsp;<strong>Run as administrator</strong>.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda11.png\" /></p>\r\n\r\n<p>After you click on it, you will see that your anaconda prompt has opened, and it will look like the image given below.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda12.png\" /></p>\r\n\r\n<p>Next, you will need to create an environment. For which you have to write the following command on the anaconda prompt and press enter. Here deeplearning specifies to the name of the environment, but you can write anything as per your choice.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>conda&nbsp;create&nbsp;--name&nbsp;deeplearning&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><br />\r\n<img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda13.png\" /></p>\r\n\r\n<p>From the image given above, you can see that it is asking you for the package plan environment location, click on y and press enter.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda14.jpg\" /></p>\r\n\r\n<p>So, you can see in the above image that you have successfully created an environment. Now the next step is to activate the environment that you created earlier. To activate the environment, write the following;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>activate&nbsp;deeplearning&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><br />\r\n<img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda15.png\" /></p>\r\n\r\n<p>From the above image, you can see that you are in this environment.</p>\r\n\r\n<p>Next, you have to install the Keras, which you can simply do by using the below-given command.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>conda&nbsp;install&nbsp;-c&nbsp;anaconda&nbsp;keras&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><br />\r\n<img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda16.png\" /></p>\r\n\r\n<p>You can see that it is asking you to install the following packages, so proceed with typing&nbsp;<strong>y</strong>.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda17.png\" /></p>\r\n\r\n<p>From the above image, you can see that you are done with the installation successfully.</p>\r\n\r\n<p>Since this is a new environment so, you need to do a few installations again so as to avoid the occurrence of error:&nbsp;<strong><em>ModuleNotFoundError: No module named &#39;keras&#39;</em></strong>&nbsp;while importing&nbsp;<a href=\"https://www.javatpoint.com/keras\">Keras</a>.</p>\r\n\r\n<p>So, you have to run two of the most important commands because when you create an environment,&nbsp;<strong>jupyter</strong>&nbsp;and&nbsp;<strong>spyder</strong>&nbsp;are not preinstalled, that is why you have to run them.</p>\r\n\r\n<p>First, you will run the command for jupyter, which is as follow:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>conda&nbsp;install&nbsp;jupyter&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda18.png\" /></p>\r\n\r\n<p>Again, it will ask you to install the following packages, so proceed with typing&nbsp;<strong>y</strong>.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda19.png\" /></p>\r\n\r\n<p>You can see in the above image that it has been successfully installed.</p>\r\n\r\n<p>Next, you will do the same for spyder.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>conda&nbsp;install&nbsp;spyder&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda20.png\" /></p>\r\n\r\n<p>Since you are doing for the very first time, so it will again ask you for y/n, so you just simply proceed by clicking on y as you did before.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda21.png\" /></p>\r\n\r\n<p>You can see that your installation is successfully completed.</p>\r\n\r\n<p>You would require to install matplotlib for visualization. Again, the same procedure will be carried out.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>conda&nbsp;install&nbsp;matplotlib&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda22.png\" /></p>\r\n\r\n<p>It will ask you for y/n, click on y to proceed further.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda23.png\" /></p>\r\n\r\n<p>You can see that you have successfully installed matplotlib.</p>\r\n\r\n<p>Lastly, you will be installing pandas, and again the procedure is the same.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>conda&nbsp;install&nbsp;pandas&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda24.png\" /></p>\r\n\r\n<p>Proceed with clicking on&nbsp;<strong>y</strong>.</p>\r\n\r\n<p><img alt=\"Installation of Keras library in Anaconda\" src=\"https://static.javatpoint.com/tutorial/keras/images/installation-of-keras-library-in-anaconda25.png\" /></p>\r\n\r\n<p>From the image given above, you can see that it also has been installed successfully.</p>\r\n', 'Deep Learning');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(36, 'DL - Keras backends', '<h1>Keras backends</h1>\r\n\r\n<p>Keras is a model-level library, offers high-level building blocks that are useful to develop deep learning models. Instead of supporting low-level operations such as tensor products, convolutions, etc. itself, it depends upon the backend engine that is well specialized and optimized tensor manipulation library. It doesn&#39;t pick just one library of a tensor to implement Keras tied to that particular library. It handles the situation in a modular way by seamlessly plugging many distinct back-end engines to Keras.</p>\r\n\r\n<p>Following are the three available backend implementations, which are as follows;</p>\r\n\r\n<ul>\r\n	<li><strong>TensorFlow:</strong>&nbsp;This Google-developed framework for symbolic tensor manipulation is open-source.</li>\r\n	<li><strong>Theano:</strong>&nbsp;It is also an open-source framework for symbolic manipulation of a tensor is developed at Universite de Montreal by LISA Lab.</li>\r\n	<li><strong>CNTK:</strong>&nbsp;It is developed by Microsoft, which is also an open-source deep-learning toolkit.</li>\r\n</ul>\r\n\r\n<h2>Switching from one backend to another</h2>\r\n\r\n<p>You will probably find the Keras configuration file at:</p>\r\n\r\n<p><strong>$HOME/.keras/keras.json</strong></p>\r\n\r\n<p>In case you face a problem finding it there, then you may create one!</p>\r\n\r\n<h4>Note: Especially for the Windows user, you have to replace $HOME with %USERPROFILE%.</h4>\r\n\r\n<p>Following is the default configuration;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>{&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;image_data_format&quot;:&nbsp;&quot;channels_last&quot;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;epsilon&quot;:&nbsp;1e-07,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;floatx&quot;:&nbsp;&quot;float32&quot;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;backend&quot;:&nbsp;&quot;tensorflow&quot;&nbsp;&nbsp;</li>\r\n	<li>}&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Here, you just have to change the&nbsp;<strong>backend</strong>&nbsp;field to&nbsp;<strong>&quot;theano&quot;</strong>,&nbsp;<strong>&quot;tensorflow&quot;</strong>&nbsp;or&nbsp;<strong>&quot;cntk&quot;,</strong>&nbsp;and then&nbsp;<a href=\"https://www.javatpoint.com/keras\">Keras</a>&nbsp;will make use of the modified configuration when you will run any Keras code.</p>\r\n\r\n<p>Once you define the&nbsp;<strong>KERAS_BACKEND</strong>&nbsp;environment variable, it will override whatsoever defined inside your config file:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>KERAS_BACKEND=tensorflow&nbsp;python&nbsp;-c&nbsp;&quot;from&nbsp;keras&nbsp;import&nbsp;backend&quot;&nbsp;&nbsp;</li>\r\n	<li>Using&nbsp;TensorFlow&nbsp;backend.&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Possibly you can load many more backends in Keras then&nbsp;<strong>&quot;tensorflow&quot;</strong>,&nbsp;<strong>&quot;theano&quot;</strong>&nbsp;or&nbsp;<strong>&quot;cntk&quot;</strong>&nbsp;as it can easily make use of external backends. This can be done by changing&nbsp;<strong>keras.json</strong>&nbsp;and&nbsp;<strong>&quot;backend&quot;</strong>&nbsp;setting. Let&#39;s suppose you have a&nbsp;<a href=\"https://www.javatpoint.com/python-tutorial\">Python</a>&nbsp;module named as&nbsp;<strong>my_module</strong>&nbsp;to be used as an external backend; then, in that case, the&nbsp;<strong>keras.json</strong>&nbsp;file may undergo some changes, which is as follows;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>{&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;image_data_format&quot;:&nbsp;&quot;channels_last&quot;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;epsilon&quot;:&nbsp;1e-07,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;floatx&quot;:&nbsp;&quot;float32&quot;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;backend&quot;:&nbsp;&quot;my_package.my_module&quot;&nbsp;&nbsp;</li>\r\n	<li>}&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>In order to use an external backend, it must be validated and encompass functions like&nbsp;<strong>placeholder</strong>,&nbsp;<strong>variable</strong>, and&nbsp;<strong>function</strong>.</p>\r\n\r\n<p>If the external backend is not valid then, it may generate an error which may contain all the missing entries.</p>\r\n\r\n<h2>keras.json details</h2>\r\n\r\n<p>Following are the settings contained in the&nbsp;<strong>keras.json</strong>&nbsp;file:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>{&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;image_data_format&quot;:&nbsp;&quot;channels_last&quot;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;epsilon&quot;:&nbsp;1e-07,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;floatx&quot;:&nbsp;&quot;float32&quot;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;backend&quot;:&nbsp;&quot;tensorflow&quot;&nbsp;&nbsp;</li>\r\n	<li>}&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The settings can be simply modified by editing&nbsp;<strong>$HOME/.keras/keras.json</strong>.</p>\r\n\r\n<ul>\r\n	<li><strong>image_data_format:</strong>&nbsp;It can be defined as a string, either of &quot;channels_last&quot; or &quot;channels_first&quot;, specifying the convention data format followed by Keras. (It is returned by&nbsp;<strong>backend.image_data_format()</strong>).</li>\r\n	<li>For any two-dimensional data such as an image, the&nbsp;<strong>&quot;channels_last&quot;</strong>&nbsp;will assume&nbsp;<strong>(rows, cols, channels)</strong>, whereas&nbsp;<strong>&quot;channels_first&quot;</strong>&nbsp;will assume&nbsp;<strong>(channels, rows, cols)</strong>.</li>\r\n	<li>For any three-dimensional data, the&nbsp;<strong>&quot;channels_last&quot;</strong>&nbsp;will relate to&nbsp;<strong>(conv_dim1, conv_dim2, conv_dim3, channels)</strong>, whereas&nbsp;<strong>&quot;channels_first&quot;</strong>&nbsp;will relate to&nbsp;<strong>(channels, conv_dim1, conv_dim2, conv_dim3)</strong>.</li>\r\n	<li><strong>epsilon:</strong>&nbsp;It refers to a float, which is a fuzzy numeric constant utilized for avoiding the division by zero in some operations.</li>\r\n	<li><strong>floatx:</strong>&nbsp;It indicates a string of&nbsp;<strong>&quot;float16&quot;</strong>,&nbsp;<strong>&quot;float32&quot;</strong>, or&nbsp;<strong>&quot;float64&quot;</strong>. By default, it is float precision.</li>\r\n	<li><strong>backend:</strong>&nbsp;It refers to a string of &quot;tensorflow&quot;, &quot;theano&quot;, or &quot;cntk&quot;.</li>\r\n</ul>\r\n\r\n<h2>Usage of abstract Keras backend for writing new code</h2>\r\n\r\n<p>With the help of abstract Keras backend API, you can make your written Keras module more compatible with both Theano (<strong>th</strong>) and TensorFlow (<strong>tf</strong>). Following is an intro to it;</p>\r\n\r\n<p>The backend module can be import thru:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>An input placeholder will be instantiated by the code given below, which is equal to&nbsp;<strong>tf.placeholder()</strong>&nbsp;or&nbsp;<strong>th.tensor.matrix(), th.tensor.tensor3()</strong>, etc.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>inputs&nbsp;=&nbsp;K.placeholder(shape=(2,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;also&nbsp;works:&nbsp;&nbsp;</li>\r\n	<li>inputs&nbsp;=&nbsp;K.placeholder(shape=(None,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;also&nbsp;works:&nbsp;&nbsp;</li>\r\n	<li>inputs&nbsp;=&nbsp;K.placeholder(ndim=3)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>A variable will be instantiated by incorporating the following code, which in return is equal to&nbsp;<strong>tf.Variable()</strong>&nbsp;or&nbsp;<strong>th.shared()</strong>.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>import&nbsp;numpy&nbsp;as&nbsp;np&nbsp;&nbsp;</li>\r\n	<li>val&nbsp;=&nbsp;np.random.random((3,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>var&nbsp;=&nbsp;K.variable(value=val)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;all-zeros&nbsp;variable:&nbsp;&nbsp;</li>\r\n	<li>var&nbsp;=&nbsp;K.zeros(shape=(3,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;all-ones:&nbsp;&nbsp;</li>\r\n	<li>var&nbsp;=&nbsp;K.ones(shape=(3,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Most of the tensor operations that you may require will be performed in a similar way as you will do in&nbsp;<a href=\"https://www.javatpoint.com/tensorflow\">TensorFlow</a>&nbsp;or Theano are as follows:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&nbsp;#&nbsp;Initializing&nbsp;Tensors&nbsp;with&nbsp;Random&nbsp;Numbers&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;K.random_uniform_variable(shape=(3,&nbsp;4),&nbsp;low=0,&nbsp;high=1)&nbsp;#&nbsp;Uniform&nbsp;distribution&nbsp;&nbsp;</li>\r\n	<li>c&nbsp;=&nbsp;K.random_normal_variable(shape=(3,&nbsp;4),&nbsp;mean=0,&nbsp;scale=1)&nbsp;#&nbsp;Gaussian&nbsp;distribution&nbsp;&nbsp;</li>\r\n	<li>d&nbsp;=&nbsp;K.random_normal_variable(shape=(3,&nbsp;4),&nbsp;mean=0,&nbsp;scale=1)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Tensor&nbsp;Arithmetic&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;b&nbsp;+&nbsp;c&nbsp;*&nbsp;K.abs(d)&nbsp;&nbsp;</li>\r\n	<li>c&nbsp;=&nbsp;K.dot(a,&nbsp;K.transpose(b))&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;K.sum(b,&nbsp;axis=1)&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;K.softmax(b)&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;K.concatenate([b,&nbsp;c],&nbsp;axis=-1)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;etc...&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Backend functions</h2>\r\n\r\n<p><strong>backend</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.backend()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The backend function is used to revert back the current backend name.</p>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a string that relates to the current name of the backing being used.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;keras.backend.backend()&nbsp;&nbsp;</li>\r\n	<li>&#39;tensorflow&#39;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>symbolic</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.symbolic(func)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It can be defined as a decorator, which is utilized in TensorFlow 2.0 for entering the Keras graph.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>func:</strong>&nbsp;It refers to a function that is used to decorate.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a decorated function.</p>\r\n\r\n<p><strong>eager</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.eager(func)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It can be defined as a decorator, which is utilized in TensorFlow 2.0 for exiting the Keras graph.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>func:</strong>&nbsp;It refers to a function that is used to decorate.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a decorated function.</p>\r\n\r\n<p><strong>get_uid</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.get_uid(prefix=&#39;&#39;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It provides a unique UID that gives a string prefix.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>prefix:</strong>&nbsp;It refers to a string.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>This backend function returns an integer.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;keras.backend.get_uid(&#39;dense&#39;)&nbsp;&nbsp;</li>\r\n	<li>1&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;keras.backend.get_uid(&#39;dense&#39;)&nbsp;&nbsp;</li>\r\n	<li>2&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>This function is used for setting up the manual variable initialization flags. The flag is indicated as a Boolean that governs for a variable to be initialized or the user has to handle the initialization because they are self-instantiated by default.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>value:</strong>&nbsp;It refers to Python&#39;s Boolean value.</li>\r\n</ul>\r\n\r\n<p><strong>epsilon</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.epsilon()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to return the fuzz factor value, which is being utilized in the numeric expressions.</p>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a float.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;keras.backend.epsilon()&nbsp;&nbsp;</li>\r\n	<li>1e-07&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>reset_uids</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.reset_uids()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to reset the graph identifiers.</p>\r\n\r\n<p><strong>epsilon</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>tf.keras.backend.epsilon()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It outputs a fuzz factor value, which is utilized in the numeric expressions.</p>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a float value.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;tf.keras.backend.epsilon()&nbsp;&nbsp;</li>\r\n	<li>1e-07&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>set_epsilon</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.set_epsilon(e)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to set the fuzz factor value, which is being used in the numeric expressions.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<p><strong>e:</strong>&nbsp;It can be defined as a float value that represents the epsilon&#39;s new value.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.epsilon()&nbsp;&nbsp;</li>\r\n	<li>1e-07&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.set_epsilon(1e-05)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.epsilon()&nbsp;&nbsp;</li>\r\n	<li>1e-05&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>floatx</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.floatx()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to output a string of float type, such as &#39;float16&#39;, &#39;float32&#39;, &#39;float64&#39;.</p>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a string of the current default float type.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;keras.backend.floatx()&nbsp;&nbsp;</li>\r\n	<li>&#39;float32&#39;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>set_floatx</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.set_floatx(floatx)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to set the default float type value.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>floatx:</strong>&nbsp;It refers to a string of float type, such as &#39;float16&#39;, &#39;float32&#39;, or &#39;float64&#39;.</li>\r\n</ul>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.floatx()&nbsp;&nbsp;</li>\r\n	<li>&#39;float32&#39;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.set_floatx(&#39;float16&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.floatx()&nbsp;&nbsp;</li>\r\n	<li>&#39;float16&#39;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Raises</strong></p>\r\n\r\n<ul>\r\n	<li><strong>ValueError:</strong>&nbsp;Whenever there is an invalid value, then ValueError will be generated.</li>\r\n</ul>\r\n\r\n<p><strong>cast_to_floatx</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.cast_to_floatx(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used for casting a Numpy array to the default Keras float type.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to the Numpy array.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns the same Numpy array that is being casted to its new type.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.floatx()&nbsp;&nbsp;</li>\r\n	<li>&#39;float32&#39;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;arr&nbsp;=&nbsp;numpy.array([1.0,&nbsp;2.0],&nbsp;dtype=&#39;float64&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;arr.dtype&nbsp;&nbsp;</li>\r\n	<li>dtype(&#39;float64&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;new_arr&nbsp;=&nbsp;K.cast_to_floatx(arr)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;new_arr&nbsp;&nbsp;</li>\r\n	<li>array([&nbsp;1.,&nbsp;&nbsp;2.],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;new_arr.dtype&nbsp;&nbsp;</li>\r\n	<li>dtype(&#39;float32&#39;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>image_data_format</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.image_data_format()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to returns the default image data format convention.</p>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a string either of &#39;channels_first&#39; or &#39;channels_last&#39;</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;keras.backend.image_data_format()&nbsp;&nbsp;</li>\r\n	<li>&#39;channels_first&#39;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>set_image_data_format</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.set_image_data_format(data_format)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>This function is used for setting up the data format convention&#39;s value.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>data_format:</strong>&nbsp;It can be defined as a string either of &#39;channels_first&#39; or &#39;channels_last&#39;.</li>\r\n</ul>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.image_data_format()&nbsp;&nbsp;</li>\r\n	<li>&#39;channels_first&#39;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.set_image_data_format(&#39;channels_last&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.image_data_format()&nbsp;&nbsp;</li>\r\n	<li>&#39;channels_last&#39;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Raises</strong></p>\r\n\r\n<ul>\r\n	<li><strong>ValueError:</strong>&nbsp;Whenever there is an invalid data_format value, then it will generate a ValueError.</li>\r\n</ul>\r\n\r\n<p><strong>learning_phase</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.learning_phase()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It outputs the flag of a learning phase, which refers to a bool tensor (0 = test, 1 = train) to be passed as an input to any of the Keras function that utilizes a distinct behavior both at training and testing time.</p>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a scalar integer tensor or Python integer of the learning phase.</p>\r\n\r\n<p><strong>set_learning_phase</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.set_learning_phase(value)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to set a fixed value to the learning phase.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>value:</strong>&nbsp;It can be defined as an integer that represents the learning phase value to be either 0 or 1.</li>\r\n</ul>\r\n\r\n<p><strong>Raises</strong></p>\r\n\r\n<ul>\r\n	<li><strong>ValueError:</strong>&nbsp;It is raised if the value is neither 0 nor 1.</li>\r\n</ul>\r\n\r\n<p><strong>clear_session</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.clear_session()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used for resetting each and every state that is produced by Keras. The global state that is utilized for the implementation of the Functional model-building&nbsp;<a href=\"https://www.javatpoint.com/api-full-form\">API</a>&nbsp;as well as to uniquify auto-generated layer names is handled by Keras.</p>\r\n\r\n<p>When multiple models are built in a loop, then an increasing amount of memory over a certain time period will be consumed by the global state, which you will wish to clear it.</p>\r\n\r\n<p>It is used for destroying the current graph of Keras and creating a new one. It is very useful as it avoids clutter from old models/layers.</p>\r\n\r\n<p><strong>Example1: calling clear_session() while creating models in a loop.</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>for&nbsp;_&nbsp;in&nbsp;range(100):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;#&nbsp;Without&nbsp;`clear_session()`,&nbsp;each&nbsp;iteration&nbsp;of&nbsp;this&nbsp;loop&nbsp;will&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;#&nbsp;slightly&nbsp;increase&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;global&nbsp;state&nbsp;managed&nbsp;by&nbsp;Keras&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;model&nbsp;=&nbsp;tf.keras.Sequential([tf.keras.layers.Dense(10)&nbsp;for&nbsp;_&nbsp;in&nbsp;range(10)])&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;_&nbsp;in&nbsp;range(100):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;#&nbsp;With&nbsp;`clear_session()`&nbsp;called&nbsp;at&nbsp;the&nbsp;beginning,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;#&nbsp;Keras&nbsp;starts&nbsp;with&nbsp;a&nbsp;blank&nbsp;state&nbsp;at&nbsp;each&nbsp;iteration&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;#&nbsp;and&nbsp;memory&nbsp;consumption&nbsp;is&nbsp;constant&nbsp;over&nbsp;time.&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;tf.keras.backend.clear_session()&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;model&nbsp;=&nbsp;tf.keras.Sequential([tf.keras.layers.Dense(10)&nbsp;for&nbsp;_&nbsp;in&nbsp;range(10)])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Example2: resetting the layer name generation counter.</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;import&nbsp;tensorflow&nbsp;as&nbsp;tf&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;layers&nbsp;=&nbsp;[tf.keras.layers.Dense(10)&nbsp;for&nbsp;_&nbsp;in&nbsp;range(10)]&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;new_layer&nbsp;=&nbsp;tf.keras.layers.Dense(10)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;print(new_layer.name)&nbsp;&nbsp;</li>\r\n	<li>dense_10&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;tf.keras.backend.set_learning_phase(1)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;print(tf.keras.backend.learning_phase())&nbsp;&nbsp;</li>\r\n	<li>1&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;tf.keras.backend.clear_session()&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;new_layer&nbsp;=&nbsp;tf.keras.layers.Dense(10)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;print(new_layer.name)&nbsp;&nbsp;</li>\r\n	<li>dense&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>is_sparse</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.is_sparse(tensor)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to return whether a tensor is a sparse tensor.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>tensor:</strong>&nbsp;It refers to an instance of tensor.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a Boolean.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;a&nbsp;=&nbsp;K.placeholder((2,&nbsp;2),&nbsp;sparse=False)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;print(K.is_sparse(a))&nbsp;&nbsp;</li>\r\n	<li>False&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;b&nbsp;=&nbsp;K.placeholder((2,&nbsp;2),&nbsp;sparse=True)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;print(K.is_sparse(b))&nbsp;&nbsp;</li>\r\n	<li>True&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>to_dense</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.to_dense(tensor)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used in conversion of a sparse tensor to a dense tensor and returns it.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>tensor:</strong>&nbsp;It refers to an instance of a tensor(potentially sparse).</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a dense tensor.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;b&nbsp;=&nbsp;K.placeholder((2,&nbsp;2),&nbsp;sparse=True)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;print(K.is_sparse(b))&nbsp;&nbsp;</li>\r\n	<li>True&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;c&nbsp;=&nbsp;K.to_dense(b)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;print(K.is_sparse(c))&nbsp;&nbsp;</li>\r\n	<li>False&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>variable</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.variable(value,&nbsp;dtype=None,&nbsp;name=None,&nbsp;constraint=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in instantiating a variable and returning it.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>value:</strong>&nbsp;It can be defined as a numpy array that represents tensor&#39;s initial value.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to the type of a Tensor.</li>\r\n	<li><strong>name:</strong>&nbsp;For a tensor it indicates a string name.</li>\r\n	<li><strong>constraint:</strong>&nbsp;It refers to an optional projection function that is implemented on the variable after updating an optimizer.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns an instance of a variable that comprising of a Keras metadata.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;val&nbsp;=&nbsp;np.array([[1,&nbsp;2],&nbsp;[3,&nbsp;4]])&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(value=val,&nbsp;dtype=&#39;float64&#39;,&nbsp;name=&#39;example_var&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.dtype(kvar)&nbsp;&nbsp;</li>\r\n	<li>&#39;float64&#39;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;print(kvar)&nbsp;&nbsp;</li>\r\n	<li>example_var&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;1.,&nbsp;&nbsp;2.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;3.,&nbsp;&nbsp;4.]])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>is_variable</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.is_variable(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>constant</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.constant(value,&nbsp;dtype=None,&nbsp;shape=None,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It lead to the creation of a unique tensor.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>value:</strong>&nbsp;It refers to constant value or a list.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to the type of a Tensor.</li>\r\n	<li><strong>name:</strong>&nbsp;For a tensor it indicates a string name.</li>\r\n	<li><strong>shape:</strong>&nbsp;It can be defined as a dimensionality of the resulting tensor, which is an optional.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It also return a unique Tensor.</p>\r\n\r\n<p><strong>is_keras_tensor</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.is_keras_tensor(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It outputs whether&nbsp;<strong>x</strong>&nbsp;is a Keras tensor or not. A &quot;Keras tensor&quot; is a tensor that was returned by a Keras layer, (<strong>Layer</strong>&nbsp;class) or by&nbsp;<strong>Input</strong>.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to a candidate tensor.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a Boolean that represents whether the argument is a Keras tensor or not.</p>\r\n\r\n<p><strong>Raises</strong></p>\r\n\r\n<p>It raises a ValueError if x is not a symbolic tensor.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras.layers&nbsp;import&nbsp;Input,&nbsp;Dense&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;np_var&nbsp;=&nbsp;numpy.array([1,&nbsp;2])&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.is_keras_tensor(np_var)&nbsp;#&nbsp;A&nbsp;numpy&nbsp;array&nbsp;is&nbsp;not&nbsp;a&nbsp;symbolic&nbsp;tensor.&nbsp;&nbsp;</li>\r\n	<li>ValueError&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;k_var&nbsp;=&nbsp;tf.placeholder(&#39;float32&#39;,&nbsp;shape=(1,1))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;#&nbsp;A&nbsp;variable&nbsp;indirectly&nbsp;created&nbsp;outside&nbsp;of&nbsp;keras&nbsp;is&nbsp;not&nbsp;a&nbsp;Keras&nbsp;tensor.&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.is_keras_tensor(k_var)&nbsp;&nbsp;</li>\r\n	<li>False&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;keras_var&nbsp;=&nbsp;K.variable(np_var)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;#&nbsp;A&nbsp;variable&nbsp;created&nbsp;with&nbsp;the&nbsp;keras&nbsp;backend&nbsp;is&nbsp;not&nbsp;a&nbsp;Keras&nbsp;tensor.&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.is_keras_tensor(keras_var)&nbsp;&nbsp;</li>\r\n	<li>False&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;keras_placeholder&nbsp;=&nbsp;K.placeholder(shape=(2,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;#&nbsp;A&nbsp;placeholder&nbsp;is&nbsp;not&nbsp;a&nbsp;Keras&nbsp;tensor.&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.is_keras_tensor(keras_placeholder)&nbsp;&nbsp;</li>\r\n	<li>False&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;keras_input&nbsp;=&nbsp;Input([10])&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.is_keras_tensor(keras_input)&nbsp;#&nbsp;An&nbsp;Input&nbsp;is&nbsp;a&nbsp;Keras&nbsp;tensor.&nbsp;&nbsp;</li>\r\n	<li>True&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;keras_layer_output&nbsp;=&nbsp;Dense(10)(keras_input)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;#&nbsp;Any&nbsp;Keras&nbsp;layer&nbsp;output&nbsp;is&nbsp;a&nbsp;Keras&nbsp;tensor.&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.is_keras_tensor(keras_layer_output)&nbsp;&nbsp;</li>\r\n	<li>True&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>is_tensor</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.is_tensor(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>placeholder</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.placeholder(shape=None,&nbsp;ndim=None,&nbsp;dtype=None,&nbsp;sparse=False,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in instantiating a placeholder tensor and returning it.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>shape:</strong>&nbsp;It can be defined as a tuple integer, which may incorporate&nbsp;<strong>None</strong>&nbsp;entries helps in representing the placeholder&#39;s Shape.</li>\r\n	<li><strong>ndim:</strong>&nbsp;It refers to the number of tensor&#39;s axes, which specifies at least one of {<strong>shape</strong>,&nbsp;<strong>ndim</strong>}. The&nbsp;<strong>shape</strong>&nbsp;is used, if both are specified.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It defines the type of Placeholder.</li>\r\n	<li><strong>sparse:</strong>&nbsp;It can be defined as a Boolean that represents whether or not the placeholder to have a sparse type.</li>\r\n	<li><strong>name:</strong>&nbsp;It is an optional argument that defines a string for the placeholder&#39;s name.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns an instance of a Tensor by including a Keras metadata.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;input_ph&nbsp;=&nbsp;K.placeholder(shape=(2,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;input_ph._keras_shape&nbsp;&nbsp;</li>\r\n	<li>(2,&nbsp;4,&nbsp;5)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;input_ph&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;Placeholder_4:0&#39;&nbsp;shape=(2,&nbsp;4,&nbsp;5)&nbsp;dtype=float32&gt;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>is_placeholder</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.is_placeholder(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It returns if&nbsp;<strong>x</strong>&nbsp;is a placeholder or not.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can be defined as a candidate placeholder.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a Boolean.</p>\r\n\r\n<p><strong>shape</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.shape(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It outputs the symbolic shape of a tensor or variable.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to a tensor or variable.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a tensor of symbolic shape.</p>\r\n\r\n<p><strong>Examples</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;TensorFlow&nbsp;example&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;tf_session&nbsp;=&nbsp;K.get_session()&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;val&nbsp;=&nbsp;np.array([[1,&nbsp;2],&nbsp;[3,&nbsp;4]])&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(value=val)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;inputs&nbsp;=&nbsp;keras.backend.placeholder(shape=(2,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.shape(kvar)&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;Shape_8:0&#39;&nbsp;shape=(2,)&nbsp;dtype=int32&gt;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.shape(inputs)&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;Shape_9:0&#39;&nbsp;shape=(3,)&nbsp;dtype=int32&gt;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;To&nbsp;get&nbsp;integer&nbsp;shape&nbsp;(Instead,&nbsp;you&nbsp;can&nbsp;use&nbsp;K.int_shape(x))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.shape(kvar).eval(session=tf_session)&nbsp;&nbsp;</li>\r\n	<li>array([2,&nbsp;2],&nbsp;dtype=int32)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.shape(inputs).eval(session=tf_session)&nbsp;&nbsp;</li>\r\n	<li>array([2,&nbsp;4,&nbsp;5],&nbsp;dtype=int32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>int_shape</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.int_shape(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It can be defined as a tuple of int or None entries that outputs the tensor or a variable&#39;s shape.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to either a tensor or variable.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It either returns a tuple of integers or None entries.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;inputs&nbsp;=&nbsp;K.placeholder(shape=(2,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.int_shape(inputs)&nbsp;&nbsp;</li>\r\n	<li>(2,&nbsp;4,&nbsp;5)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;val&nbsp;=&nbsp;np.array([[1,&nbsp;2],&nbsp;[3,&nbsp;4]])&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(value=val)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.int_shape(kvar)&nbsp;&nbsp;</li>\r\n	<li>(2,&nbsp;2)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;int_shape(x):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x.shape&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>ndim</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.ndim(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It refers to an integer that are returned as number of axes within a tensor.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can be either defined as a tensor or variable.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It outputs the number of axes as an integer value.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;inputs&nbsp;=&nbsp;K.placeholder(shape=(2,&nbsp;4,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;val&nbsp;=&nbsp;np.array([[1,&nbsp;2],&nbsp;[3,&nbsp;4]])&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(value=val)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.ndim(inputs)&nbsp;&nbsp;</li>\r\n	<li>3&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.ndim(kvar)&nbsp;&nbsp;</li>\r\n	<li>2&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;ndim(x):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x.ndim&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>size</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.size(x,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It outputs the tensor size.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can either be defined as a tensor or variable.</li>\r\n	<li><strong>name:</strong>&nbsp;It is an optional keyword argument that represents the operation&#39;s name.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns the tensor&#39;s size.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;val&nbsp;=&nbsp;np.array([[1,&nbsp;2],&nbsp;[3,&nbsp;4]])&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(value=val)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.size(inputs)&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor:&nbsp;id=9,&nbsp;shape=(),&nbsp;dtype=int32,&nbsp;numpy=4&gt;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>dtype</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.dtype(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It can be defined as a string, which is returned as a dtype of a Keras tensor or variable.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can be either defined as a tensor or variable.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>For x it returns its dtype.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.dtype(K.placeholder(shape=(2,4,5)))&nbsp;&nbsp;</li>\r\n	<li>&#39;float32&#39;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.dtype(K.placeholder(shape=(2,4,5),&nbsp;dtype=&#39;float32&#39;))&nbsp;&nbsp;</li>\r\n	<li>&#39;float32&#39;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.dtype(K.placeholder(shape=(2,4,5),&nbsp;dtype=&#39;float64&#39;))&nbsp;&nbsp;</li>\r\n	<li>&#39;float64&#39;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Keras&nbsp;variable&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(np.array([[1,&nbsp;2],&nbsp;[3,&nbsp;4]]))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.dtype(kvar)&nbsp;&nbsp;</li>\r\n	<li>&#39;float32_ref&#39;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(np.array([[1,&nbsp;2],&nbsp;[3,&nbsp;4]]),&nbsp;dtype=&#39;float32&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.dtype(kvar)&nbsp;&nbsp;</li>\r\n	<li>&#39;float32_ref&#39;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;dtype(x):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x.dtype.name&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>eval</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.eval(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in evaluating tensor value.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can be defined as a tensor.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It outputs a Numpy array.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(np.array([[1,&nbsp;2],&nbsp;[3,&nbsp;4]]),&nbsp;dtype=&#39;float32&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;1.,&nbsp;&nbsp;2.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;3.,&nbsp;&nbsp;4.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;eval(x):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>zeros</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.zeros(shape,&nbsp;dtype=None,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in instantiation of those variables that are all-zeros followed by returning it.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>shape:</strong>&nbsp;It can be defined as a tuple of integers that represents the returned Keras variable&#39;s shape.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to a string that corresponds to the returned Keras variable&#39;s data type.</li>\r\n	<li><strong>name:</strong>&nbsp;It refers to the string that represent the returned Keras variable&#39;s name.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a variable that includes the Keras metadata, which is filled with 0.0. It should be noted that if it is symbolic n shape, then a variable cannot be returned rather a dynamic-shaped tensor will be returned.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.zeros((3,4))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;zeros(shape,&nbsp;dtype=floatx(),&nbsp;name=None):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;np.zeros(shape,&nbsp;dtype=dtype)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>ones</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.ones(shape,&nbsp;dtype=None,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in Instantiation of an all-ones variable followed by returning it.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>shape:</strong>&nbsp;It can be defined as a tuple of integers that represents the returned Keras variable&#39;s shape.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to a string that corresponds to the returned Keras variable&#39;s data type.</li>\r\n	<li><strong>name:</strong>&nbsp;It refers to the string that represent the returned Keras variable&#39;s name.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a Keras variable, which is filled with 0.0. It should be noted that if it is symbolic n shape, then a variable cannot be returned rather a dynamic-shaped tensor will be returned.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.ones((3,4))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;1.,&nbsp;&nbsp;1.,&nbsp;&nbsp;1.,&nbsp;&nbsp;1.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1.,&nbsp;&nbsp;1.,&nbsp;&nbsp;1.,&nbsp;&nbsp;1.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1.,&nbsp;&nbsp;1.,&nbsp;&nbsp;1.,&nbsp;&nbsp;1.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;ones(shape,&nbsp;dtype=floatx(),&nbsp;name=None):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;np.ones(shape,&nbsp;dtype=dtype)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>eye</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.eye(size,&nbsp;dtype=None,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in the instantiation of an identity matrix followed by returning it.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>size:</strong>&nbsp;It can be defined either as a tuple defining the number of rows and columns or an integer that represents the number of rows.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to a string that corresponds to the returned Keras variable&#39;s data type.</li>\r\n	<li><strong>name:</strong>&nbsp;It refers to the string that represent the returned Keras variable&#39;s name.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It outputs a Keras variable that represents an identity matrix.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(K.eye(3))&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;1.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0.,&nbsp;&nbsp;1.,&nbsp;&nbsp;0.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;1.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(K.eye((2,&nbsp;3)))&nbsp;&nbsp;</li>\r\n	<li>array([[1.,&nbsp;0.,&nbsp;0.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0.,&nbsp;1.,&nbsp;0.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;eye(size,&nbsp;dtype=None,&nbsp;name=None):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;isinstance(size,&nbsp;(list,&nbsp;tuple)):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n,&nbsp;m&nbsp;=&nbsp;size&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;else:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n,&nbsp;m&nbsp;=&nbsp;size,&nbsp;size&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;np.eye(n,&nbsp;m,&nbsp;dtype=dtype)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>zeros_like</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.zeros_like(x,&nbsp;dtype=None,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in instantiating the similar shape variable that are all-zeros as another tensor.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can be defined either as Keras variable or Keras tensor.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to a string that corresponds to the returned Keras variable&#39;s data type. Here the None relates to the usage of x dtype.</li>\r\n	<li><strong>name:</strong>&nbsp;It refers to the string that represent the returned Keras variable&#39;s name.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a variable of Keras filled with all zeros that constitutes a shape of x.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(np.random.random((2,3)))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar_zeros&nbsp;=&nbsp;K.zeros_like(kvar)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar_zeros)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;zeros_like(x,&nbsp;dtype=floatx(),&nbsp;name=None):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;np.zeros_like(x,&nbsp;dtype=dtype)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>ones_like</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.ones_like(x,&nbsp;dtype=None,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in instantiating the similar shape variable that are all-ones as another tensor.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can be defined either as Keras variable or Keras tensor.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to a string that corresponds to the returned Keras variable&#39;s data type. Here the None relates to the usage of x dtype.</li>\r\n	<li><strong>name:</strong>&nbsp;It refers to the string that represent the returned Keras variable&#39;s name.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a variable of Keras filled with all zeros that constitutes a shape of x.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.variable(np.random.random((2,3)))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar_ones&nbsp;=&nbsp;K.ones_like(kvar)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar_ones)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;1.,&nbsp;&nbsp;1.,&nbsp;&nbsp;1.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1.,&nbsp;&nbsp;1.,&nbsp;&nbsp;1.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;ones_like(x,&nbsp;dtype=floatx(),&nbsp;name=None):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;np.ones_like(x,&nbsp;dtype=dtype)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>identity</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.identity(x,&nbsp;name=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It outputs a tensor having a similar content as that of the input tensor.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to the input tensor.</li>\r\n	<li><strong>name:</strong>&nbsp;It refers to the string that represent the name of the variable, which has to be created.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a tensor that has same shape, type as well as content.</p>\r\n\r\n<p><strong>random_uniform_variable</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.random_uniform_variable(shape,&nbsp;low,&nbsp;high,&nbsp;dtype=None,&nbsp;name=None,&nbsp;seed=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It put an emphasis on the instantiation a variable that have its values drawn from a uniform distribution.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>shape:</strong>&nbsp;It can be defined as a tuple of integers that represents the returned Keras variable&#39;s shape.</li>\r\n	<li><strong>low:</strong>&nbsp;It indicates to a float value that represents the output interval&#39;s lower boundary.</li>\r\n	<li><strong>high:</strong>&nbsp;It refers to a float value, which represents the output interval&#39;s upper boundary.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to a string that corresponds to the returned Keras variable&#39;s data type.</li>\r\n	<li><strong>name:</strong>&nbsp;It can be defined as a string that relates to the returned Keras variable&#39;s name.</li>\r\n	<li><strong>seed:</strong>&nbsp;It can be defined as an integer that represents a random seed.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It outputs a Keras variable that has been filled with drawn samples.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;TensorFlow&nbsp;example&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.random_uniform_variable((2,3),&nbsp;0,&nbsp;1)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;&nbsp;</li>\r\n	<li>&lt;tensorflow.python.ops.variables.Variable&nbsp;object&nbsp;at&nbsp;0x10ab40b10&gt;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;0.10940075,&nbsp;&nbsp;0.10047495,&nbsp;&nbsp;0.476143&nbsp;&nbsp;],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0.66137183,&nbsp;&nbsp;0.00869417,&nbsp;&nbsp;0.89220798]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;random_uniform_variable(shape,&nbsp;low,&nbsp;high,&nbsp;dtype=None,&nbsp;name=None,&nbsp;seed=None):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(high&nbsp;-&nbsp;low)&nbsp;*&nbsp;np.random.random(shape).astype(dtype)&nbsp;+&nbsp;low&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>random_normal_variable</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.random_normal_variable(shape,&nbsp;mean,&nbsp;scale,&nbsp;dtype=None,&nbsp;name=None,&nbsp;seed=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in the instantiation of a variable whose values are drawn from a normal distribution.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>shape:</strong>&nbsp;It can be defined as a tuple of integers that represents the returned Keras variable&#39;s shape</li>\r\n	<li><strong>mean:</strong>&nbsp;It refers to a float that represents the mean of the normal distribution.</li>\r\n	<li><strong>scale:</strong>&nbsp;It refers to a float that represents the normal distribution&#39;s standard deviation.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It can be defined as string that represents the returned Keras variable&#39;s dtype.</li>\r\n	<li><strong>name:</strong>&nbsp;It refers to a String that represents the returned Keras variable&#39;s name.</li>\r\n	<li><strong>seed:</strong>&nbsp;It refer to an integer that represents the random seed.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It outputs a Keras variable that has been filled with drawn samples.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;TensorFlow&nbsp;example&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.random_normal_variable((2,3),&nbsp;0,&nbsp;1)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;&nbsp;</li>\r\n	<li>&lt;tensorflow.python.ops.variables.Variable&nbsp;object&nbsp;at&nbsp;0x10ab12dd0&gt;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;1.19591331,&nbsp;&nbsp;0.68685907,&nbsp;-0.63814116],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0.92629528,&nbsp;&nbsp;0.28055015,&nbsp;&nbsp;1.70484698]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;random_normal_variable(shape,&nbsp;mean,&nbsp;scale,&nbsp;dtype=None,&nbsp;name=None,&nbsp;seed=None):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;scale&nbsp;*&nbsp;np.random.randn(*shape).astype(dtype)&nbsp;+&nbsp;mean&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>count_params</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.count_params(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It outputs the constant number of components residing within a Keras variable or tensor.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to a Keras variable or tensor.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It results in an integer, which depicts the total number of elements present in x, i.e., the product of the static dimensions of an array.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;kvar&nbsp;=&nbsp;K.zeros((2,3))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.count_params(kvar)&nbsp;&nbsp;</li>\r\n	<li>6&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(kvar)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0.,&nbsp;&nbsp;0.,&nbsp;&nbsp;0.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;count_params(x):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x.size&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>cast</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.cast(x,&nbsp;dtype)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in casting a tensor to a distinct dtype followed by returning it. In case, if you cast a Keras variable then also it will result in a Keras tensor.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can be defined as Keras tensor or variable.</li>\r\n	<li><strong>dtype:</strong>&nbsp;It refers to a string either of &#39;<strong>float16</strong>&#39;, &#39;<strong>float32</strong>&#39;, or &#39;<strong>float64</strong>&#39;.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It output a Keras tensor with dtype&nbsp;<strong>dtype</strong>.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;from&nbsp;keras&nbsp;import&nbsp;backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;input&nbsp;=&nbsp;K.placeholder((2,&nbsp;3),&nbsp;dtype=&#39;float32&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;input&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;Placeholder_2:0&#39;&nbsp;shape=(2,&nbsp;3)&nbsp;dtype=float32&gt;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;It&nbsp;doesn&#39;t&nbsp;work&nbsp;in-place&nbsp;as&nbsp;below.&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.cast(input,&nbsp;dtype=&#39;float16&#39;)&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;Cast_1:0&#39;&nbsp;shape=(2,&nbsp;3)&nbsp;dtype=float16&gt;&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;input&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;Placeholder_2:0&#39;&nbsp;shape=(2,&nbsp;3)&nbsp;dtype=float32&gt;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;you&nbsp;need&nbsp;to&nbsp;assign&nbsp;it.&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;input&nbsp;=&nbsp;K.cast(input,&nbsp;dtype=&#39;float16&#39;)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;input&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;Cast_2:0&#39;&nbsp;shape=(2,&nbsp;3)&nbsp;dtype=float16&gt;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>update</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.update(x,&nbsp;new_x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It helps in updating the value of&nbsp;<strong>x</strong>&nbsp;to&nbsp;<strong>new_x</strong>.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to a&nbsp;<strong>variable</strong>.</li>\r\n	<li><strong>new_x:</strong>&nbsp;It can be defined as a tensor having similar shape as that of&nbsp;<strong>x</strong>.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It results in the updated&nbsp;<strong>x</strong>&nbsp;variable</p>\r\n\r\n<p><strong>update_add</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.update_add(x,&nbsp;increment)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It adds an&nbsp;<strong>increment</strong>, which helps to update the value of&nbsp;<strong>x</strong>.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to a&nbsp;<strong>variable</strong>.</li>\r\n	<li><strong>increment:</strong>&nbsp;It can be defined as a tensor having a similar shape as that of&nbsp;<strong>x</strong>.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns the updated&nbsp;<strong>x</strong>&nbsp;variable.</p>\r\n\r\n<p><strong>update_sub</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.update_sub(x,&nbsp;decrement)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It subtracts the decrement so as to update the value of&nbsp;<strong>x</strong>.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can be defined as a variable.</li>\r\n	<li><strong>decrement:</strong>&nbsp;It refers to a tensor that have a similar shape as that of&nbsp;<strong>x</strong>.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns the updated&nbsp;<strong>x</strong>&nbsp;variable.</p>\r\n\r\n<p><strong>moving_average_update</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.moving_average_update(x,&nbsp;value,&nbsp;momentum)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>For a variable it computes its moving average.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to a variable.</li>\r\n	<li><strong>value:</strong>&nbsp;It can be defined as a tensor that have a same shape as that of&nbsp;<strong>x</strong>.</li>\r\n	<li><strong>momentum:</strong>&nbsp;It refers to a static average momentum.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It outputs an operation, which is utilized for updating the variable.</p>\r\n\r\n<p><strong>dot</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.dot(x,&nbsp;y)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It returns a tensor by either multiplying 2 tensors or variable.</p>\r\n\r\n<p>While multiplying an nD tensor to another nD tensor, a Theano behavior is reproduced. (e.g. (2, 3) * (4, 3, 5) -&gt; (2, 4, 5))</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to a tensor or variable.</li>\r\n	<li><strong>y:</strong>&nbsp;It refers to a tensor or variable.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a tensor, which is produced after undergoing a dot product between x and y.</p>\r\n\r\n<p><strong>Examples</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dot&nbsp;product&nbsp;between&nbsp;tensors&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;x&nbsp;=&nbsp;K.placeholder(shape=(2,&nbsp;3))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;y&nbsp;=&nbsp;K.placeholder(shape=(3,&nbsp;4))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;xy&nbsp;=&nbsp;K.dot(x,&nbsp;y)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;xy&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;MatMul_9:0&#39;&nbsp;shape=(2,&nbsp;4)&nbsp;dtype=float32&gt;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;dot&nbsp;product&nbsp;between&nbsp;tensors&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;x&nbsp;=&nbsp;K.placeholder(shape=(32,&nbsp;28,&nbsp;3))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;y&nbsp;=&nbsp;K.placeholder(shape=(3,&nbsp;4))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;xy&nbsp;=&nbsp;K.dot(x,&nbsp;y)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;xy&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;MatMul_9:0&#39;&nbsp;shape=(32,&nbsp;28,&nbsp;4)&nbsp;dtype=float32&gt;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Theano-like&nbsp;behavior&nbsp;example&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;x&nbsp;=&nbsp;K.random_uniform_variable(shape=(2,&nbsp;3),&nbsp;low=0,&nbsp;high=1)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;y&nbsp;=&nbsp;K.ones((4,&nbsp;3,&nbsp;5))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;xy&nbsp;=&nbsp;K.dot(x,&nbsp;y)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.int_shape(xy)&nbsp;&nbsp;</li>\r\n	<li>(2,&nbsp;4,&nbsp;5)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Numpy implementation</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;dot(x,&nbsp;y):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;np.dot(x,&nbsp;y)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>batch_dot</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.batch_dot(x,&nbsp;y,&nbsp;axes=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>batch_dot</strong>&nbsp;is useful in computing batchwise dot product between&nbsp;<strong>x</strong>&nbsp;and&nbsp;<strong>y</strong>, where x and y are data inside batches (i.e. in a shape of&nbsp;<strong>(batch_size, :)</strong>). It either outputs a tensor or variable that encompass less dimensions than the input. If we reduce the number of dimensions to 1, then we can use&nbsp;<strong>expand_dims</strong>, which ensure the ndim to be atleast 2.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It refers to either the Keras tensor or variable that have ndim greater than or equals to 2.</li>\r\n	<li><strong>y:</strong>&nbsp;It refers to the Keras tensor or variable that has ndim greater than or equals to 2.</li>\r\n	<li><strong>axes:</strong>&nbsp;It can be defined as an int or tuple(int, int) that puts emphasis on the dimensions of the target to be reduced.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a tensor that has a shape identical to the concatenation of&nbsp;<strong>x</strong>&#39;s shape and&nbsp;<strong>y</strong>&#39;s shape (). Here the shape of&nbsp;<strong>x</strong>&nbsp;relates to the less the dimension that was summed over and&nbsp;<strong>y</strong>&nbsp;signifies less the batch dimension and the dimension that was summed over. However, it is reshaped to&nbsp;<strong>(batch_size, 1)</strong>&nbsp;if the final rank is 1.</p>\r\n\r\n<p><strong>Examples</strong></p>\r\n\r\n<p>Assume x = [[1, 2], [3, 4]] and y = [[5, 6], [7, 8]] batch_dot(x, y, axes=1) = [[17], [53]] which is the main diagonal of x.dot(y.T), although we never have to calculate the off-diagonal elements.</p>\r\n\r\n<p>Pseudocode:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>inner_products&nbsp;=&nbsp;[]&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;xi,&nbsp;yi&nbsp;in&nbsp;zip(x,&nbsp;y):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;inner_products.append(xi.dot(yi))&nbsp;&nbsp;</li>\r\n	<li>result&nbsp;=&nbsp;stack(inner_products)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Shape inference: Let x&#39;s shape be (100, 20) and y&#39;s shape be (100, 30, 20). If axes is (1, 2), to find the output shape of resultant tensor, loop through each dimension in x&#39;s shape and y&#39;s shape:</p>\r\n\r\n<ul>\r\n	<li>shape[0] : 100 : append to output shape</li>\r\n	<li>shape[1] : 20 : do not append to output shape, dimension 1 of x has been summed over. (dot_axes[0] = 1)</li>\r\n	<li>shape[0] : 100 : do not append to output shape, always ignore first dimension of y</li>\r\n	<li>shape[1] : 30 : append to output shape</li>\r\n	<li>shape[2] : 20 : do not append to output shape, dimension 2 of y has been summed over. (dot_axes[1] = 2) output_shape = (100, 30)</li>\r\n</ul>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;x_batch&nbsp;=&nbsp;K.ones(shape=(32,&nbsp;20,&nbsp;1))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;y_batch&nbsp;=&nbsp;K.ones(shape=(32,&nbsp;30,&nbsp;20))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;xy_batch_dot&nbsp;=&nbsp;K.batch_dot(x_batch,&nbsp;y_batch,&nbsp;axes=(1,&nbsp;2))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.int_shape(xy_batch_dot)&nbsp;&nbsp;</li>\r\n	<li>(32,&nbsp;1,&nbsp;30)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>transpose</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.backend.transpose(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It is used to transpose a tensor followed by returning it.</p>\r\n\r\n<p><strong>Arguments</strong></p>\r\n\r\n<ul>\r\n	<li><strong>x:</strong>&nbsp;It can either be a tensor or variable.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n\r\n<p>It returns a tensor.</p>\r\n\r\n<p><strong>Examples</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&gt;&gt;&nbsp;var&nbsp;=&nbsp;K.variable([[1,&nbsp;2,&nbsp;3],&nbsp;[4,&nbsp;5,&nbsp;6]])&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(var)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;1.,&nbsp;&nbsp;2.,&nbsp;&nbsp;3.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;4.,&nbsp;&nbsp;5.,&nbsp;&nbsp;6.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;var_transposed&nbsp;=&nbsp;K.transpose(var)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;K.eval(var_transposed)&nbsp;&nbsp;</li>\r\n	<li>array([[&nbsp;1.,&nbsp;&nbsp;4.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2.,&nbsp;&nbsp;5.],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;3.,&nbsp;&nbsp;6.]],&nbsp;dtype=float32)&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;inputs&nbsp;=&nbsp;K.placeholder((2,&nbsp;3))&nbsp;&nbsp;</li>\r\n	<li>&gt;&gt;&gt;&nbsp;inputs&nbsp;&nbsp;</li>\r\n	<li>&lt;tf.Tensor&nbsp;&#39;Placeholder_11:0&#39;&nbsp;shape=(2,&nbsp;3)&nbsp;dtype=float32&gt;&n', 'Deep Learning');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(37, 'DL - Keras Models', '<h1>Keras Models</h1>\r\n\r\n<p>Keras has come up with two types of in-built models; Sequential Model and an advanced Model class with functional API. The Sequential model tends to be one of the simplest models as it constitutes a linear set of layers, whereas the functional API model leads to the creation of an arbitrary network structure.</p>\r\n\r\n<h2>Keras Sequential Model</h2>\r\n\r\n<p>The layers within the sequential models are sequentially arranged, so it is known as Sequential API. In most of the Artificial Neural Network, the layers are sequentially arranged, such that the data flow in between layers is in a specified sequence until it hit the output layer.</p>\r\n\r\n<h3>Getting started with the Keras Sequential model</h3>\r\n\r\n<p>The&nbsp;<strong>sequential</strong>&nbsp;model can be simply created by passing a list of instances of layers to the constructor:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;keras.models&nbsp;import&nbsp;Sequential&nbsp;&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.layers&nbsp;import&nbsp;Dense,&nbsp;Activation&nbsp;&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Sequential([&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dense(32,&nbsp;inpuit_shape=(784,)),&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Activation(&#39;relu&#39;),&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dense(10),&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Activation(&#39;softmax&#39;),&nbsp;&nbsp;&nbsp;</li>\r\n	<li>])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The&nbsp;<strong>.add()</strong>&nbsp;method is used to add layers:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>model&nbsp;=&nbsp;Sequential()&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(32,&nbsp;input_dim=784&nbsp;))&nbsp;&nbsp;&nbsp;</li>\r\n	<li>model.add(Activation(&#39;relu&#39;))&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Specifying the input shape</h3>\r\n\r\n<p>Since the model must be aware of the input size that it is expecting, so the very first layer in the&nbsp;<strong>sequential</strong>&nbsp;model necessitates particulars about its input shape as the rest of the other layers can automatically speculate the shape. It can be done in the following ways:</p>\r\n\r\n<ul>\r\n	<li>The&nbsp;<strong>input_shape</strong>&nbsp;argument is passed to the foremost layer. It comprises of a tuple shape, i.e., a tuple of integers or&nbsp;<strong>None</strong>, such that None means that any positive integer might anticipate). It excludes the batch dimension.</li>\r\n	<li>Some of the 2D layers, such as&nbsp;<strong>Dense</strong>, supports input shape specification through&nbsp;<strong>input_dim</strong>&nbsp;argument, whereas some of the 3D temporal layers support&nbsp;<strong>input_dim</strong>&nbsp;and&nbsp;<strong>input_length</strong></li>\r\n	<li>The&nbsp;<strong>batch_size</strong>&nbsp;argument is passed to the layer to define a batch size for the inputs. If&nbsp;<strong>batch_size=32</strong>&nbsp;and&nbsp;<strong>input_shape=(6,8)</strong>&nbsp;is passed to a layer, then, in that case, it is expected for every batch of inputs will have a batch shape&nbsp;<strong>(32,6,8).</strong></li>\r\n</ul>\r\n\r\n<p>These are the following snippets that are strictly equivalent:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>model=Sequential&nbsp;()&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(32,&nbsp;input_shape=(784,)))&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>model=Sequential&nbsp;()&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(32,&nbsp;input_dim=784))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Compilation</h3>\r\n\r\n<p>At first the model is compiled for which the&nbsp;<strong>compile</strong>&nbsp;process is used for constructing the learning procedure afterward the model undergoes the training in the next step. The compilation include three parameter, which are as follows:</p>\r\n\r\n<ul>\r\n	<li><strong>An optimizer:</strong>&nbsp;As the name suggest, an optimizer can be a string of an existing optimizer like (<strong>rmsprop</strong>&nbsp;or&nbsp;<strong>adagrad</strong>), or simply an instance of class&nbsp;<strong>optimizer</strong>.</li>\r\n	<li><strong>A loss function:</strong>&nbsp;A loss function act as an objective that every model tries to minimize for example&nbsp;<strong>categorical_crossentropy</strong>&nbsp;or&nbsp;<strong>mse</strong>. It is also known as objective function.</li>\r\n	<li><strong>A list of metrics:</strong>&nbsp;A list of metrics refers to a string of identifiers of an existing metric or custom metric function. It is suggested to set to&nbsp;<strong>metrics=[&#39;accuracy&#39;]</strong>&nbsp;for any classification problem.</li>\r\n</ul>\r\n\r\n<ol start=\"1\">\r\n	<li>#for&nbsp;a&nbsp;multi-class&nbsp;classification&nbsp;problem&nbsp;&nbsp;</li>\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss=&#39;categorical_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;])&nbsp;&nbsp;</li>\r\n	<li>#for&nbsp;a&nbsp;binary&nbsp;classification&nbsp;problem&nbsp;&nbsp;&nbsp;</li>\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss=&#39;binary_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;]&nbsp;&nbsp;</li>\r\n	<li>#for&nbsp;a&nbsp;mean&nbsp;squared&nbsp;error&nbsp;regression&nbsp;problem&nbsp;&nbsp;</li>\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss=&#39;mse&#39;)&nbsp;&nbsp;</li>\r\n	<li>#for&nbsp;custom&nbsp;metrics&nbsp;&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;keras.backend&nbsp;as&nbsp;K&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;mean&nbsp;_pred(y_true,&nbsp;y_pred):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;K.mean(y_pred)&nbsp;&nbsp;</li>\r\n	<li>model.compile(optimizer=&#39;rsmprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss=&#39;binary_crossentropy&#39;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;,&nbsp;mean_pred])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Training</h3>\r\n\r\n<p>The Numpy arrays of input data or labels are incorporated for training the Keras model and so it make use of&nbsp;<strong>fit</strong>&nbsp;function.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#for&nbsp;a&nbsp;single-input&nbsp;model&nbsp;with&nbsp;2&nbsp;classes&nbsp;(binary&nbsp;classification)&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Sequential&nbsp;()&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(32,&nbsp;activation=&#39;relu&#39;,&nbsp;input_dim=100&nbsp;))&nbsp;&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(1,&nbsp;activation=&#39;sigmoid&#39;))&nbsp;&nbsp;</li>\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss=&#39;binary_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;])&nbsp;&nbsp;</li>\r\n	<li>#generate&nbsp;dummy&nbsp;data&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;numpy&nbsp;as&nbsp;np&nbsp;&nbsp;</li>\r\n	<li>data&nbsp;=&nbsp;&nbsp;np.random.random((1000,&nbsp;100))&nbsp;&nbsp;</li>\r\n	<li>labels&nbsp;=&nbsp;&nbsp;np.random.randint(2,&nbsp;size=(1000,&nbsp;1))&nbsp;&nbsp;</li>\r\n	<li>#train&nbsp;the&nbsp;model,&nbsp;iterating&nbsp;on&nbsp;the&nbsp;data&nbsp;in&nbsp;batches&nbsp;of&nbsp;32&nbsp;samples&nbsp;&nbsp;&nbsp;</li>\r\n	<li>model.fit(data,&nbsp;labels,&nbsp;epochs=10,&nbsp;batch_size=32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#for&nbsp;a&nbsp;single&nbsp;input&nbsp;model&nbsp;with&nbsp;10&nbsp;classes&nbsp;(categorical&nbsp;classification)&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Sequential&nbsp;()&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(32,&nbsp;activation=&#39;relu&#39;,&nbsp;input_dim=100))&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(10,&nbsp;activation=&#39;softmax&#39;))&nbsp;&nbsp;</li>\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss=&#39;categorical_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;])&nbsp;&nbsp;</li>\r\n	<li>#generate&nbsp;dummy&nbsp;data&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;numpy&nbsp;as&nbsp;np&nbsp;&nbsp;</li>\r\n	<li>data&nbsp;=&nbsp;np.random.random((1000,100))&nbsp;&nbsp;</li>\r\n	<li>labels=np.random.randint(10,&nbsp;size=(1000,1))&nbsp;&nbsp;</li>\r\n	<li>#convert&nbsp;labels&nbsp;to&nbsp;categorical&nbsp;one-hot&nbsp;encoding&nbsp;&nbsp;</li>\r\n	<li>one_hot_labels&nbsp;=&nbsp;keras.utils.to_categorical(labels,&nbsp;num_classes=10)&nbsp;&nbsp;</li>\r\n	<li>#train&nbsp;the&nbsp;model,&nbsp;iterating&nbsp;on&nbsp;the&nbsp;data&nbsp;in&nbsp;the&nbsp;batches&nbsp;of&nbsp;32&nbsp;samples&nbsp;&nbsp;</li>\r\n	<li>model.fit(data,&nbsp;one_hot_labels,&nbsp;epochs=10,&nbsp;batch_size=32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Example: Training a simple deep learning Neural Network on the MNIST dataset</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>import&nbsp;keras&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.datasets&nbsp;import&nbsp;mnist&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.models&nbsp;import&nbsp;Sequential&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.layers&nbsp;import&nbsp;Dense,&nbsp;Dropout&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.optimizers&nbsp;import&nbsp;RMSprop&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>batch_size&nbsp;=&nbsp;128&nbsp;&nbsp;</li>\r\n	<li>num_classes&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>epochs&nbsp;=&nbsp;20&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;split&nbsp;the&nbsp;data&nbsp;between&nbsp;train&nbsp;and&nbsp;test&nbsp;sets&nbsp;&nbsp;</li>\r\n	<li>(x_train,&nbsp;y_train),&nbsp;(x_test,&nbsp;y_test)&nbsp;=&nbsp;mnist.load_data()&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>x_train&nbsp;=&nbsp;x_train.reshape(60000,&nbsp;784)&nbsp;&nbsp;</li>\r\n	<li>x_test&nbsp;=&nbsp;x_test.reshape(10000,&nbsp;784)&nbsp;&nbsp;</li>\r\n	<li>x_train&nbsp;=&nbsp;x_train.astype(&#39;float32&#39;)&nbsp;&nbsp;</li>\r\n	<li>x_test&nbsp;=&nbsp;x_test.astype(&#39;float32&#39;)&nbsp;&nbsp;</li>\r\n	<li>x_train&nbsp;/=&nbsp;255&nbsp;&nbsp;</li>\r\n	<li>x_test&nbsp;/=&nbsp;255&nbsp;&nbsp;</li>\r\n	<li>print(x_train.shape[0],&nbsp;&#39;train&nbsp;samples&#39;)&nbsp;&nbsp;</li>\r\n	<li>print(x_test.shape[0],&nbsp;&#39;test&nbsp;samples&#39;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;convert&nbsp;class&nbsp;vectors&nbsp;to&nbsp;binary&nbsp;class&nbsp;matrices&nbsp;&nbsp;</li>\r\n	<li>y_train&nbsp;=&nbsp;keras.utils.to_categorical(y_train,&nbsp;num_classes)&nbsp;&nbsp;</li>\r\n	<li>y_test&nbsp;=&nbsp;keras.utils.to_categorical(y_test,&nbsp;num_classes)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Sequential()&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(512,&nbsp;activation=&#39;relu&#39;,&nbsp;input_shape=(784,)))&nbsp;&nbsp;</li>\r\n	<li>model.add(Dropout(0.2))&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(512,&nbsp;activation=&#39;relu&#39;))&nbsp;&nbsp;</li>\r\n	<li>model.add(Dropout(0.2))&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(num_classes,&nbsp;activation=&#39;softmax&#39;))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>model.summary()&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>model.compile(loss=&#39;categorical_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optimizer=RMSprop(),&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;])&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>history&nbsp;=&nbsp;model.fit(x_train,&nbsp;y_train,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;batch_size=batch_size,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epochs=epochs,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose=1,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;validation_data=(x_test,&nbsp;y_test))&nbsp;&nbsp;</li>\r\n	<li>score&nbsp;=&nbsp;model.evaluate(x_test,&nbsp;y_test,&nbsp;verbose=0)&nbsp;&nbsp;</li>\r\n	<li>print(&#39;Test&nbsp;loss:&#39;,&nbsp;score[0])&nbsp;&nbsp;</li>\r\n	<li>print(&#39;Test&nbsp;accuracy:&#39;,&nbsp;score[1])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Stacked LSTM for Sequence Classification</h3>\r\n\r\n<p>To make model capable enough to learn high-level temporal representation, 3 LSTM layers are stacked on above one another.</p>\r\n\r\n<p>The layers are stacked in such a way that first two layers yields complete sequences of output and the third one produces final phase in its output sequence, which helps in successful transformation of input sequence to the single vector (i.e. dropdown of temporal dimension).</p>\r\n\r\n<p><img alt=\"Keras Models\" src=\"https://static.javatpoint.com/tutorial/keras/images/keras-models.png\" /></p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;keras.models&nbsp;import&nbsp;Sequential&nbsp;&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.layers&nbsp;import&nbsp;LSTM,&nbsp;Dense&nbsp;&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;numpy&nbsp;as&nbsp;np&nbsp;&nbsp;</li>\r\n	<li>data_dim&nbsp;=&nbsp;16&nbsp;&nbsp;</li>\r\n	<li>timesteps&nbsp;=&nbsp;8&nbsp;&nbsp;</li>\r\n	<li>num_classes&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>#expected&nbsp;input&nbsp;data&nbsp;shape:&nbsp;(batch_size,&nbsp;timesteps,&nbsp;data_dim)&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Sequential&nbsp;()&nbsp;&nbsp;</li>\r\n	<li>model.add(LSTM(32,&nbsp;return_sequences=True,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_shape(timesteps,&nbsp;data_dim)))&nbsp;#returns&nbsp;a&nbsp;sequence&nbsp;of&nbsp;sequence&nbsp;of&nbsp;vectors&nbsp;of&nbsp;dimension&nbsp;32&nbsp;&nbsp;</li>\r\n	<li>model.add(LSTM(32,&nbsp;return_sequences=True))&nbsp;#returns&nbsp;a&nbsp;sequence&nbsp;of&nbsp;vectors&nbsp;of&nbsp;dimension&nbsp;32&nbsp;&nbsp;</li>\r\n	<li>model.add(LSTM(32))&nbsp;#return&nbsp;a&nbsp;single&nbsp;vector&nbsp;of&nbsp;dimension&nbsp;32&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(10,&nbsp;activation=&#39;softmax&#39;))&nbsp;&nbsp;</li>\r\n	<li>model.compile(loss=&#39;categorical_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;])&nbsp;&nbsp;</li>\r\n	<li>#generate&nbsp;dummy&nbsp;training&nbsp;data&nbsp;&nbsp;</li>\r\n	<li>x_train&nbsp;=&nbsp;np.random.random((1000,&nbsp;timesteps,&nbsp;data_dim))&nbsp;&nbsp;</li>\r\n	<li>y_train&nbsp;=&nbsp;np.random.random((1000,&nbsp;num_classes))&nbsp;&nbsp;</li>\r\n	<li>#generate&nbsp;dummy&nbsp;validation&nbsp;data&nbsp;&nbsp;</li>\r\n	<li>x_val&nbsp;=&nbsp;np.random.random((100,&nbsp;timesteps,&nbsp;data_dim))&nbsp;&nbsp;</li>\r\n	<li>y_val&nbsp;=&nbsp;np.random.random((100,&nbsp;num_classes))&nbsp;&nbsp;</li>\r\n	<li>model.fit(x_train,&nbsp;y_train,&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;batch_size=64,&nbsp;epochs=5,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;validation_data=(x_val,&nbsp;y_val))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Same Stacked LSTM model, rendered &quot;stateful&quot;</h3>\r\n\r\n<p>A model whose central (internal) states are used again as initial states for another batch&#39;s sample, which were acquired after a batch of samples were processed is called as a &#39;stateful recurrent model&#39;. It not only manages the computational complexity but also permit to process longer sequence.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;keras.models&nbsp;import&nbsp;Sequential&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.layers&nbsp;import&nbsp;LSTM,&nbsp;Dense&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;numpy&nbsp;as&nbsp;np&nbsp;&nbsp;</li>\r\n	<li>data_dim&nbsp;=&nbsp;16&nbsp;&nbsp;</li>\r\n	<li>timesteps&nbsp;=&nbsp;8&nbsp;&nbsp;</li>\r\n	<li>num_classes&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>batch_size&nbsp;=&nbsp;32&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Expected&nbsp;input&nbsp;batch&nbsp;shape:&nbsp;(batch_size,&nbsp;timesteps,&nbsp;data_dim)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Note&nbsp;that&nbsp;we&nbsp;have&nbsp;to&nbsp;provide&nbsp;the&nbsp;full&nbsp;batch_input_shape&nbsp;since&nbsp;the&nbsp;network&nbsp;is&nbsp;stateful.&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;the&nbsp;sample&nbsp;of&nbsp;index&nbsp;i&nbsp;in&nbsp;batch&nbsp;k&nbsp;is&nbsp;the&nbsp;follow-up&nbsp;for&nbsp;the&nbsp;sample&nbsp;i&nbsp;in&nbsp;batch&nbsp;k-1.&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Sequential()&nbsp;&nbsp;</li>\r\n	<li>model.add(LSTM(32,&nbsp;return_sequences=True,&nbsp;stateful=True,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;batch_input_shape=(batch_size,&nbsp;timesteps,&nbsp;data_dim)))&nbsp;&nbsp;</li>\r\n	<li>model.add(LSTM(32,&nbsp;return_sequences=True,&nbsp;stateful=True))&nbsp;&nbsp;</li>\r\n	<li>model.add(LSTM(32,&nbsp;stateful=True))&nbsp;&nbsp;</li>\r\n	<li>model.add(Dense(10,&nbsp;activation=&#39;softmax&#39;))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>model.compile(loss=&#39;categorical_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;])&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Generate&nbsp;dummy&nbsp;training&nbsp;data&nbsp;&nbsp;</li>\r\n	<li>x_train&nbsp;=&nbsp;np.random.random((batch_size&nbsp;*&nbsp;10,&nbsp;timesteps,&nbsp;data_dim))&nbsp;&nbsp;</li>\r\n	<li>y_train&nbsp;=&nbsp;np.random.random((batch_size&nbsp;*&nbsp;10,&nbsp;num_classes))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Generate&nbsp;dummy&nbsp;validation&nbsp;data&nbsp;&nbsp;</li>\r\n	<li>x_val&nbsp;=&nbsp;np.random.random((batch_size&nbsp;*&nbsp;3,&nbsp;timesteps,&nbsp;data_dim))&nbsp;&nbsp;</li>\r\n	<li>y_val&nbsp;=&nbsp;np.random.random((batch_size&nbsp;*&nbsp;3,&nbsp;num_classes))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>model.fit(x_train,&nbsp;y_train,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;batch_size=batch_size,&nbsp;epochs=5,&nbsp;shuffle=False,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;validation_data=(x_val,&nbsp;y_val))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Keras Functional API</h2>\r\n\r\n<p>Keras Functional API is used to delineate complex models, for example, multi-output models, directed acyclic models, or graphs with shared layers. In other words, it can be said that the functional API lets you outline those inputs or outputs that are sharing layers.</p>\r\n\r\n<h3>First Example: A densely-connected network</h3>\r\n\r\n<p>To implement a densely-connected network, the sequential model results better, but it would not be a bad decision if we try it out with another model.</p>\r\n\r\n<p>The implementation of Keras Functional API is similar to that of the Keras Sequential model.</p>\r\n\r\n<ul>\r\n	<li>An instance layer is called by a tensor and returns a tensor as an output.</li>\r\n	<li>To define a model, both input tensor(s) and output tensor(s) are used.</li>\r\n</ul>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;keras.layers&nbsp;import&nbsp;Input,&nbsp;Dense&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.models&nbsp;import&nbsp;Model&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Returns&nbsp;a&nbsp;Tensor&nbsp;&nbsp;</li>\r\n	<li>inputs&nbsp;=&nbsp;Input(shape=(784,))&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;An&nbsp;instance&nbsp;layer&nbsp;is&nbsp;callable&nbsp;on&nbsp;a&nbsp;tensor&nbsp;and&nbsp;returns&nbsp;a&nbsp;tensor&nbsp;&nbsp;</li>\r\n	<li>output_1&nbsp;=&nbsp;Dense(64,&nbsp;activation=&#39;relu&#39;)(inputs)&nbsp;&nbsp;</li>\r\n	<li>output_2&nbsp;=&nbsp;Dense(64,&nbsp;activation=&#39;relu&#39;)(output_1)&nbsp;&nbsp;</li>\r\n	<li>predictions&nbsp;=&nbsp;Dense(10,&nbsp;activation=&#39;softmax&#39;)(output_2)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creates&nbsp;a&nbsp;model&nbsp;that&nbsp;includes&nbsp;the&nbsp;Input&nbsp;layer&nbsp;and&nbsp;three&nbsp;Dense&nbsp;layers&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Model(inputs=inputs,&nbsp;outputs=predictions)&nbsp;&nbsp;</li>\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss=&#39;categorical_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;])&nbsp;&nbsp;</li>\r\n	<li>model.fit(data,&nbsp;labels)&nbsp;&nbsp;#&nbsp;start&nbsp;training&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>All models are callable, just like layers</h3>\r\n\r\n<p>Since we are discussing the functional API model, we can reuse the trained models simply by treating any such model as if it is a layer. It is done by calling a model on a tensor.</p>\r\n\r\n<p>When we call a model on tenor, it should be noted that we aren&#39;t only reusing its architecture but its weights too.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>x&nbsp;=&nbsp;Input(shape=(784,))&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;It&nbsp;works,&nbsp;and&nbsp;returns&nbsp;the&nbsp;10-way&nbsp;softmax&nbsp;we&nbsp;defined&nbsp;above.&nbsp;&nbsp;</li>\r\n	<li>y&nbsp;=&nbsp;model(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The code given above allows an instance to build a model for processing input sequences. Also, with the help of an individual line, we can convert an image classification model into a video classification model.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;keras.layers&nbsp;import&nbsp;TimeDistributed&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Input&nbsp;tensor&nbsp;for&nbsp;sequences&nbsp;of&nbsp;20&nbsp;timesteps,&nbsp;such&nbsp;that&nbsp;each&nbsp;contains&nbsp;a&nbsp;784-dimensional&nbsp;vector&nbsp;&nbsp;</li>\r\n	<li>input_sequences&nbsp;=&nbsp;Input(shape=(20,&nbsp;784))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;It&nbsp;applies&nbsp;our&nbsp;previous&nbsp;model&nbsp;to&nbsp;every&nbsp;timestep&nbsp;in&nbsp;the&nbsp;input&nbsp;sequences.&nbsp;The&nbsp;output&nbsp;of&nbsp;the&nbsp;previous&nbsp;model&nbsp;was&nbsp;a&nbsp;10-way&nbsp;softmax,&nbsp;so&nbsp;the&nbsp;output&nbsp;of&nbsp;the&nbsp;layer&nbsp;given&nbsp;below&nbsp;will&nbsp;be&nbsp;a&nbsp;sequence&nbsp;of&nbsp;20&nbsp;vectors&nbsp;of&nbsp;size&nbsp;10.&nbsp;&nbsp;</li>\r\n	<li>processed_sequences&nbsp;=&nbsp;TimeDistributed(model)(input_sequences)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Multi-input and multi-output models</h3>\r\n\r\n<p>Since functional API explains well multi-input and multi-output models, it handles a large number of intertwined datastreams by manipulating them. Let us look at an example given below to understand more briefly about its concept. Basically, we are going to forecast how many retweets and likes a news headline on social media like twitter will get.</p>\r\n\r\n<p>Both the headline, which is a sequence of words, and an auxiliary input will be given to the model that accepts data, for example, at what time or the date the headline got posted, etc. The two-loss functions are also used to oversee the model, such that if we use the main loss function in the initial steps, it would be the best choice for regularizing the deep learning models.</p>\r\n\r\n<p><img alt=\"Keras Models\" src=\"https://static.javatpoint.com/tutorial/keras/images/keras-models2.png\" /></p>\r\n\r\n<p>Here the&nbsp;<strong>main_input</strong>&nbsp;obtains the headline as a sequence of integers for which each integer will encode each word. The integers are in a range from 1 to 10,000, and the sequences are of 100 words.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;keras.layers&nbsp;import&nbsp;Input,&nbsp;Embedding,&nbsp;LSTM,&nbsp;Dense&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.models&nbsp;import&nbsp;Model&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;numpy&nbsp;as&nbsp;np&nbsp;&nbsp;</li>\r\n	<li>np.random.seed(0)&nbsp;&nbsp;#&nbsp;Sets&nbsp;a&nbsp;random&nbsp;seed&nbsp;for&nbsp;reproducibility.&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Headline&nbsp;input&nbsp;receive&nbsp;sequences&nbsp;of&nbsp;100&nbsp;integers&nbsp;in&nbsp;between&nbsp;1&nbsp;and&nbsp;10000.&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Here&nbsp;we&nbsp;can&nbsp;name&nbsp;any&nbsp;layer&nbsp;by&nbsp;passing&nbsp;it&nbsp;a&nbsp;&quot;name&quot;&nbsp;argument.&nbsp;&nbsp;</li>\r\n	<li>main_input&nbsp;=&nbsp;Input(shape=(100,),&nbsp;dtype=&#39;int32&#39;,&nbsp;name=&#39;main_input&#39;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;The&nbsp;embedding&nbsp;layer&nbsp;encodes&nbsp;the&nbsp;input&nbsp;sequence&nbsp;into&nbsp;a&nbsp;sequence&nbsp;of&nbsp;dense&nbsp;512-dimensional&nbsp;vectors.&nbsp;&nbsp;</li>\r\n	<li>x&nbsp;=&nbsp;Embedding(output_dim=512,&nbsp;input_dim=10000,&nbsp;input_length=100)(main_input)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;The&nbsp;LSTM&nbsp;transforms&nbsp;the&nbsp;vector&nbsp;sequence&nbsp;into&nbsp;a&nbsp;single&nbsp;vector&nbsp;that&nbsp;contains&nbsp;the&nbsp;information&nbsp;about&nbsp;an&nbsp;entire&nbsp;sequence.&nbsp;&nbsp;</li>\r\n	<li>lstm_out&nbsp;=&nbsp;LSTM(32)(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Then the auxiliary loss will be inserted that will permit the LSTM and Embedding layer to train itself smoothly even when the main loss in the model is higher.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>auxiliary_output&nbsp;=&nbsp;Dense(1,&nbsp;activation=&#39;sigmoid&#39;,&nbsp;name=&#39;aux_output&#39;)(lstm_out)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Next we will input the&nbsp;<strong>aux_input</strong>&nbsp;to our model, which is done by concatenating it with LSTM output.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>auxiliary_input&nbsp;=&nbsp;Input(shape=(5,),&nbsp;name=&#39;aux_input&#39;)&nbsp;&nbsp;</li>\r\n	<li>x&nbsp;=&nbsp;keras.layers.concatenate([lstm_out,&nbsp;auxiliary_input])&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Stacks&nbsp;a&nbsp;densely-connected&nbsp;deep&nbsp;network&nbsp;on&nbsp;the&nbsp;top.&nbsp;&nbsp;</li>\r\n	<li>x&nbsp;=&nbsp;Dense(64,&nbsp;activation=&#39;relu&#39;)(x)&nbsp;&nbsp;</li>\r\n	<li>x&nbsp;=&nbsp;Dense(64,&nbsp;activation=&#39;relu&#39;)(x)&nbsp;&nbsp;</li>\r\n	<li>x&nbsp;=&nbsp;Dense(64,&nbsp;activation=&#39;relu&#39;)(x)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Then&nbsp;add&nbsp;the&nbsp;main&nbsp;logistic&nbsp;regression&nbsp;layer.&nbsp;&nbsp;</li>\r\n	<li>main_output&nbsp;=&nbsp;Dense(1,&nbsp;activation=&#39;sigmoid&#39;,&nbsp;name=&#39;main_output&#39;)(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Defines&nbsp;a&nbsp;model&nbsp;with&nbsp;two&nbsp;inputs&nbsp;and&nbsp;outputs&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Model(inputs=[main_input,&nbsp;auxiliary_input],&nbsp;outputs=[main_output,&nbsp;auxiliary_output])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Thereafter, we will compile our model by assigning&nbsp;<strong>0.2</strong>&nbsp;weight on the auxiliary loss. And then we will use a list or a directory to identify the&nbsp;<strong>loss</strong>&nbsp;or&nbsp;<strong>loss_weight</strong>&nbsp;for all of the distinct outputs. To use same loss on every output, a single loss argument (loss) will be passed.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;loss=&#39;binary_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss_weights=[1.,&nbsp;0.2])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Next we will train our model by passing a lists of an input array as well as target arrays.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>headline_data&nbsp;=&nbsp;np.round(np.abs(np.random.rand(12,&nbsp;100)&nbsp;*&nbsp;100))&nbsp;&nbsp;</li>\r\n	<li>additional_data&nbsp;=&nbsp;np.random.randn(12,&nbsp;5)&nbsp;&nbsp;</li>\r\n	<li>headline_labels&nbsp;=&nbsp;np.random.randn(12,&nbsp;1)&nbsp;&nbsp;</li>\r\n	<li>additional_labels&nbsp;=&nbsp;np.random.randn(12,&nbsp;1)&nbsp;&nbsp;</li>\r\n	<li>model.fit([headline_data,&nbsp;additional_data],&nbsp;[headline_labels,&nbsp;additional_labels],&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epochs=50,&nbsp;batch_size=32)&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>As we have named inputs and outputs, the model will be compiled as follows;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss={&#39;main_output&#39;:&nbsp;&#39;binary_crossentropy&#39;,&nbsp;&#39;aux_output&#39;:&nbsp;&#39;binary_crossentropy&#39;},&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss_weights={&#39;main_output&#39;:&nbsp;1.,&nbsp;&#39;aux_output&#39;:&nbsp;0.2})&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;And&nbsp;train&nbsp;it&nbsp;through:&nbsp;&nbsp;</li>\r\n	<li>model.fit({&#39;main_input&#39;:&nbsp;headline_data,&nbsp;&#39;aux_input&#39;:&nbsp;additional_data},&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&#39;main_output&#39;:&nbsp;headline_labels,&nbsp;&#39;aux_output&#39;:&nbsp;additional_labels},&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epochs=50,&nbsp;batch_size=32)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The model can be inferenced by;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>model.predict({&#39;main_input&#39;:&nbsp;headline_data,&nbsp;&#39;aux_input&#39;:&nbsp;additional_data})&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>or,</p>\r\n\r\n<ol start=\"1\">\r\n	<li>pred&nbsp;=&nbsp;model.predict([headline_data,&nbsp;additional_data])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Shared layers</h3>\r\n\r\n<p>Another example to be taken into consideration to understand the functional API model would be the shared layers. For this purpose, we will be examining the tweet&#39;s dataset. Since we are willing to compose such a model that can determine if two tweets belong to the same person or not, this will make it easy for an instance to compare users based on the similarities of tweets.</p>\r\n\r\n<p>We will construct a model that will go through the encoding of two tweets into vectors, followed by concatenating them, and then we will include logistic regression. The model will output a probability for two tweets belonging to the same person. Next, we will train our model on pairs of both positive as well as negative tweets.</p>\r\n\r\n<p>Since here our chosen problem is symmetric, our mechanism must reuse the first encoded tweet so as to encode the other tweet for which we will be using a shared LSTM layer.</p>\r\n\r\n<p>To build this model with a functional API, we will input a binary matrix of shape (280,256) for a tweet. Here 280 is a vector sequence of size 256, such that each 256-dimensional vector will encode the presence or absence of a character.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>import&nbsp;keras&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.layers&nbsp;import&nbsp;Input,&nbsp;LSTM,&nbsp;Dense&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;keras.models&nbsp;import&nbsp;Model&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>tweet_a&nbsp;=&nbsp;Input(shape=(280,&nbsp;256))&nbsp;&nbsp;</li>\r\n	<li>tweet_b&nbsp;=&nbsp;Input(shape=(280,&nbsp;256))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Next we will input a layer and then will call it on various inputs as per the requirement, so that we can share a layer on several inputs.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;The&nbsp;layer&nbsp;takes&nbsp;an&nbsp;input&nbsp;as&nbsp;a&nbsp;matrix&nbsp;and&nbsp;will&nbsp;return&nbsp;a&nbsp;vector&nbsp;of&nbsp;size&nbsp;64&nbsp;&nbsp;</li>\r\n	<li>shared_lstm&nbsp;=&nbsp;LSTM(64)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;When&nbsp;we&nbsp;reuse&nbsp;the&nbsp;same&nbsp;layer&nbsp;instance&nbsp;multiple&nbsp;times,&nbsp;the&nbsp;weights&nbsp;of&nbsp;the&nbsp;layer&nbsp;will&nbsp;also&nbsp;be&nbsp;reused&nbsp;(it&nbsp;is&nbsp;effectively&nbsp;*the&nbsp;same*&nbsp;layer)&nbsp;&nbsp;</li>\r\n	<li>encoded_a&nbsp;=&nbsp;shared_lstm(tweet_a)&nbsp;&nbsp;</li>\r\n	<li>encoded_b&nbsp;=&nbsp;shared_lstm(tweet_b)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Next&nbsp;we&nbsp;will&nbsp;concatenate&nbsp;the&nbsp;two&nbsp;vectors:&nbsp;&nbsp;</li>\r\n	<li>merged_vector&nbsp;=&nbsp;keras.layers.concatenate([encoded_a,&nbsp;encoded_b],&nbsp;axis=-1)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;And&nbsp;then&nbsp;we&nbsp;will&nbsp;add&nbsp;logistic&nbsp;regression&nbsp;on&nbsp;top&nbsp;&nbsp;</li>\r\n	<li>predictions&nbsp;=&nbsp;Dense(1,&nbsp;activation=&#39;sigmoid&#39;)(merged_vector)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;After&nbsp;that&nbsp;we&nbsp;will&nbsp;define&nbsp;a&nbsp;trainable&nbsp;model&nbsp;by&nbsp;linking&nbsp;the&nbsp;tweet&nbsp;inputs&nbsp;to&nbsp;the&nbsp;predictions&nbsp;&nbsp;</li>\r\n	<li>model&nbsp;=&nbsp;Model(inputs=[tweet_a,&nbsp;tweet_b],&nbsp;outputs=predictions)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>model.compile(optimizer=&#39;rmsprop&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loss=&#39;binary_crossentropy&#39;,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics=[&#39;accuracy&#39;])&nbsp;&nbsp;</li>\r\n	<li>model.fit([data_a,&nbsp;data_b],&nbsp;labels,&nbsp;epochs=10)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Now to understand how to read the shared layer&#39;s output or output shape, we will briefly look at&nbsp;<strong>the concept of layer &quot;node&quot;</strong>.</p>\r\n\r\n<p>At the time of calling a layer on any input, we are actually generating new tensor by appending a node to the layer and linking the input tensors to the output tensor. If the same layer is called several times, then that layer will own so many nodes, which will be indexed as 0,1,2,..</p>\r\n\r\n<p>To get the tensor output of a layer instance, we used&nbsp;<strong>layer.get_output()</strong>&nbsp;and for its output shape,&nbsp;<strong>layer.output_shape</strong>&nbsp;in the older versions of Keras. But now get_output() has been replaced by output.</p>\r\n\r\n<p>The layer will return one output of the layer as long as one layer is connected to a single input.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&nbsp;a&nbsp;=&nbsp;Input(shape=(280,&nbsp;256))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>lstm&nbsp;=&nbsp;LSTM(32)&nbsp;&nbsp;</li>\r\n	<li>encoded_a&nbsp;=&nbsp;lstm(a)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>assert&nbsp;lstm.output&nbsp;==&nbsp;encoded_a&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>In case if the layer comprises of multiple inputs;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&nbsp;a&nbsp;=&nbsp;Input(shape=(280,&nbsp;256))&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;Input(shape=(280,&nbsp;256))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>lstm&nbsp;=&nbsp;LSTM(32)&nbsp;&nbsp;</li>\r\n	<li>encoded_a&nbsp;=&nbsp;lstm(a)&nbsp;&nbsp;</li>\r\n	<li>encoded_b&nbsp;=&nbsp;lstm(b)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>lstm.output&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Output:</p>\r\n\r\n<pre>\r\n&gt;&gt; AttributeError: Layer lstm_1 has multiple inbound nodes,\r\nhence the notion of &quot;layer output&quot; is ill-defined.\r\nUse `get_output_at(node_index)` instead.\r\n</pre>\r\n\r\n<p>Now the following will execute it;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>assert&nbsp;lstm.get_output_at(0)&nbsp;==&nbsp;encoded_a&nbsp;&nbsp;</li>\r\n	<li>assert&nbsp;lstm.get_output_at(1)&nbsp;==&nbsp;encoded_b&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>So, the same carries for characters such as&nbsp;<strong>input_shape</strong>&nbsp;and&nbsp;<strong>output_shape</strong>. If a layer comprises of individual layer or all the nodes are having similar input/output, only then we can say that the conception of &quot;layer input/output shape&quot; is completely defined and the shape will be return by layer.output_shape/ layer.input_shape.</p>\r\n\r\n<p>In case if we apply conv2D layer to an input of shapes (32, 32, 3) and then to (64, 64, 3), then the layer will encompass several shapes of input/output. And to fetch them we will require to specify the index of nodes to which they belong to.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>a&nbsp;=&nbsp;Input(shape=(32,&nbsp;32,&nbsp;3))&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;Input(shape=(64,&nbsp;64,&nbsp;3))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>conv&nbsp;=&nbsp;Conv2D(16,&nbsp;(3,&nbsp;3),&nbsp;padding=&#39;same&#39;)&nbsp;&nbsp;</li>\r\n	<li>conved_a&nbsp;=&nbsp;conv(a)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Only&nbsp;one&nbsp;input&nbsp;so&nbsp;far,&nbsp;the&nbsp;following&nbsp;will&nbsp;work:&nbsp;&nbsp;</li>\r\n	<li>assert&nbsp;conv.input_shape&nbsp;==&nbsp;(None,&nbsp;32,&nbsp;32,&nbsp;3)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>conved_b&nbsp;=&nbsp;conv(b)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;now&nbsp;the&nbsp;&quot;input_shape&quot;&nbsp;property&nbsp;wouldn&#39;t&nbsp;work,&nbsp;but&nbsp;this&nbsp;does:&nbsp;&nbsp;</li>\r\n	<li>assert&nbsp;conv.get_input_shape_at(0)&nbsp;==&nbsp;(None,&nbsp;32,&nbsp;32,&nbsp;3)&nbsp;&nbsp;</li>\r\n	<li>assert&nbsp;conv.get_input_shape_at(1)&nbsp;==&nbsp;(None,&nbsp;64,&nbsp;64,&nbsp;3)&nbsp;&nbsp;</li>\r\n</ol>\r\n', 'Deep Learning');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(38, 'DL - Keras Layers', '<h1>Keras layers</h1>\r\n\r\n<p>Keras encompasses a wide range of predefined layers as well as it permits you to create your own layer. It acts as a major building block while building a Keras model. In Keras, whenever each layer receives an input, it performs some computations that result in transformed information. The output of one layer is fed as input to the other layer.</p>\r\n\r\n<p>Keras Core layer comprises of a&nbsp;<strong>dense</strong>&nbsp;layer, which is a dot product plus bias, an&nbsp;<strong>activation</strong>&nbsp;layer that transfers a function or neuron shape, a&nbsp;<strong>dropout</strong>&nbsp;layer, which randomly at each training update, sets a fraction of input unit to zero so as to avoid the issue of overfitting, a&nbsp;<strong>lambda</strong>&nbsp;layer that wraps an arbitrary expression just like an object of a Layer, etc.</p>\r\n\r\n<p>The Keras convolution layer utilizes filters for the creation of a feature map, runs from 1D to 3D. It includes most of the common invariants, for example,&nbsp;<strong>cropping</strong>&nbsp;and&nbsp;<strong>transposed convolution</strong>&nbsp;layer for each dimension. The&nbsp;<strong>2D convolution</strong>&nbsp;is used for image recognition as it is inspired by the visual cortex.</p>\r\n\r\n<p>The downscaling layer, which is mainly known as pooling, runs from 1D to 3D. It also includes the most common variants, such as max and average pooling. The layers that are locally connected act as convolution layer, just the fact that weights remain unshared. The noise layer eradicates the issue of overfitting. The recurrent layer that includes simple, gated, LSTM, etc. are implemented in applications like language processing.</p>\r\n\r\n<p>Following are the number of common methods that each Keras layer have:</p>\r\n\r\n<ul>\r\n	<li><strong>get_weights()</strong>: It yields the layer&#39;s weights as a numpy arrays list.</li>\r\n	<li><strong>set_weights(weights)</strong>: It sets the layer&#39;s weight with the similar shapes as that of the output of get_weights() from numpy arrays list.</li>\r\n	<li><strong>get_config()</strong>: It returns a dictionary that includes the layer&#39;s configuration, so as to instantiate from its config through;</li>\r\n</ul>\r\n\r\n<ol start=\"1\">\r\n	<li>layer&nbsp;=&nbsp;Dense(32)&nbsp;&nbsp;</li>\r\n	<li>config&nbsp;=&nbsp;layer.get_config()&nbsp;&nbsp;</li>\r\n	<li>reconstructed_layer&nbsp;=&nbsp;Dense.from_config(config)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Alternatively,</p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;keras&nbsp;import&nbsp;layers&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>config&nbsp;=&nbsp;layer.get_config()&nbsp;&nbsp;</li>\r\n	<li>layer&nbsp;=&nbsp;layers.deserialize({&#39;class_name&#39;:&nbsp;layer.__class__.__name__,&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;config&#39;:&nbsp;config})&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>In case when layer isn&#39;t the shared layer or we can say the layer comprises of individual node, then we can get its input tensor, output tensor, input shape and output shape through the followings;</p>\r\n\r\n<ul>\r\n	<li>input</li>\r\n	<li>output</li>\r\n	<li>input_shape</li>\r\n	<li>output_shape</li>\r\n</ul>\r\n\r\n<p>Else, if the layer encompasses several nodes then in that case you can use the following methods given below;</p>\r\n\r\n<ul>\r\n	<li>get_input_at(node_index)</li>\r\n	<li>get_output_at(node_index)</li>\r\n	<li>get_input_shape_at(node_index)</li>\r\n	<li>get_output_shape_at(node_index)</li>\r\n</ul>\r\n\r\n<h2>Core Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.Dense(units,&nbsp;activation=None,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;bias_constraint=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Activation(activation)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Dropout(rate,&nbsp;noise_shape=None,&nbsp;seed=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Flatten()&nbsp;&nbsp;</li>\r\n	<li>keras.engine.topology.Input()&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Reshape(target_shape)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Permute(dims)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.RepeatVector(n)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Lambda(function,&nbsp;output_shape=None,&nbsp;mask=None,&nbsp;arguments=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.ActivityRegularization(l1=0.0,&nbsp;l2=0.0)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Masking(mask_value=0.0)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Convolution Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.Conv1D(filters,&nbsp;kernel_size,&nbsp;strides=1,&nbsp;padding=&#39;valid&#39;,&nbsp;dilation_rate=1,&nbsp;activation=None,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;bias_constraint=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Conv2D(filters,&nbsp;kernel_size,&nbsp;strides=(1,&nbsp;1),&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None,&nbsp;dilation_rate=(1,&nbsp;1),&nbsp;activation=None,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;bias_constraint=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.SeparableConv2D(filters,&nbsp;kernel_size,&nbsp;strides=(1,&nbsp;1),&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None,&nbsp;depth_multiplier=1,&nbsp;activation=None,&nbsp;use_bias=True,&nbsp;depthwise_initializer=&#39;glorot_uniform&#39;,&nbsp;pointwise_initializer=&#39;glorot_uniform&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;depthwise_regularizer=None,&nbsp;pointwise_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;depthwise_constraint=None,&nbsp;pointwise_constraint=None,&nbsp;bias_constraint=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Conv2DTranspose(filters,&nbsp;kernel_size,&nbsp;strides=(1,&nbsp;1),&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None,&nbsp;activation=None,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;bias_constraint=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Conv3D(filters,&nbsp;kernel_size,&nbsp;strides=(1,&nbsp;1,&nbsp;1),&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None,&nbsp;dilation_rate=(1,&nbsp;1,&nbsp;1),&nbsp;activation=None,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;bias_constraint=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Cropping1D(cropping=(1,&nbsp;1))&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Cropping2D(cropping=((0,&nbsp;0),&nbsp;(0,&nbsp;0)),&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Cropping3D(cropping=((1,&nbsp;1),&nbsp;(1,&nbsp;1),&nbsp;(1,&nbsp;1)),&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.UpSampling1D(size=2)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.UpSampling2D(size=(2,&nbsp;2),&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.UpSampling3D(size=(2,&nbsp;2,&nbsp;2),&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.ZeroPadding1D(padding=1)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.ZeroPadding2D(padding=(1,&nbsp;1),&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.ZeroPadding3D(padding=(1,&nbsp;1,&nbsp;1),&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Pooling Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.MaxPooling1D(pool_size=2,&nbsp;strides=None,&nbsp;padding=&#39;valid&#39;)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.MaxPooling2D(pool_size=(2,&nbsp;2),&nbsp;strides=None,&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.MaxPooling3D(pool_size=(2,&nbsp;2,&nbsp;2),&nbsp;strides=None,&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.AveragePooling1D(pool_size=2,&nbsp;strides=None,&nbsp;padding=&#39;valid&#39;)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.AveragePooling2D(pool_size=(2,&nbsp;2),&nbsp;strides=None,&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.AveragePooling3D(pool_size=(2,&nbsp;2,&nbsp;2),&nbsp;strides=None,&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GlobalMaxPooling1D()&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GlobalAveragePooling1D()&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GlobalMaxPooling1D()&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GlobalMaxPooling2D(data_format=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GlobalAveragePooling2D(data_format=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Locally Connected Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.LocallyConnected1D(filters,&nbsp;kernel_size,&nbsp;strides=1,&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None,&nbsp;activation=None,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;bias_constraint=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.LocallyConnected2D(filters,&nbsp;kernel_size,&nbsp;strides=(1,&nbsp;1),&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None,&nbsp;activation=None,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;bias_constraint=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>RNN Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.RNN(cell,&nbsp;return_sequences=False,&nbsp;return_state=False,&nbsp;go_backwards=False,&nbsp;stateful=False,&nbsp;unroll=False)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.SimpleRNN(units,&nbsp;activation=&#39;tanh&#39;,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;dropout=0.0,&nbsp;recurrent_dropout=0.0,&nbsp;return_sequences=False,&nbsp;return_state=False,&nbsp;go_backwards=False,&nbsp;stateful=False,&nbsp;unroll=False)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GRU(units,&nbsp;activation=&#39;tanh&#39;,&nbsp;recurrent_activation=&#39;hard_sigmoid&#39;,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;dropout=0.0,&nbsp;recurrent_dropout=0.0,&nbsp;implementation=1,&nbsp;return_sequences=False,&nbsp;return_state=False,&nbsp;go_backwards=False,&nbsp;stateful=False,&nbsp;unroll=False)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.LSTM(units,&nbsp;activation=&#39;tanh&#39;,&nbsp;recurrent_activation=&#39;hard_sigmoid&#39;,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;unit_forget_bias=True,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;dropout=0.0,&nbsp;recurrent_dropout=0.0,&nbsp;implementation=1,&nbsp;return_sequences=False,&nbsp;return_state=False,&nbsp;go_backwards=False,&nbsp;stateful=False,&nbsp;unroll=False)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.ConvLSTM2D(filters,&nbsp;kernel_size,&nbsp;strides=(1,&nbsp;1),&nbsp;padding=&#39;valid&#39;,&nbsp;data_format=None,&nbsp;dilation_rate=(1,&nbsp;1),&nbsp;activation=&#39;tanh&#39;,&nbsp;recurrent_activation=&#39;hard_sigmoid&#39;,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;unit_forget_bias=True,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;return_sequences=False,&nbsp;go_backwards=False,&nbsp;stateful=False,&nbsp;dropout=0.0,&nbsp;recurrent_dropout=0.0)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.SimpleRNNCell(units,&nbsp;activation=&#39;tanh&#39;,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;dropout=0.0,&nbsp;recurrent_dropout=0.0)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GRUCell(units,&nbsp;activation=&#39;tanh&#39;,&nbsp;recurrent_activation=&#39;hard_sigmoid&#39;,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;dropout=0.0,&nbsp;recurrent_dropout=0.0,&nbsp;implementation=1)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.LSTMCell(units,&nbsp;activation=&#39;tanh&#39;,&nbsp;recurrent_activation=&#39;hard_sigmoid&#39;,&nbsp;use_bias=True,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;unit_forget_bias=True,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;dropout=0.0,&nbsp;recurrent_dropout=0.0,&nbsp;implementation=1)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.StackedRNNCells(cells)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.CuDNNGRU(units,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;return_sequences=False,&nbsp;return_state=False,&nbsp;stateful=False)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.CuDNNLSTM(units,&nbsp;kernel_initializer=&#39;glorot_uniform&#39;,&nbsp;recurrent_initializer=&#39;orthogonal&#39;,&nbsp;bias_initializer=&#39;zeros&#39;,&nbsp;unit_forget_bias=True,&nbsp;kernel_regularizer=None,&nbsp;recurrent_regularizer=None,&nbsp;bias_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;kernel_constraint=None,&nbsp;recurrent_constraint=None,&nbsp;bias_constraint=None,&nbsp;return_sequences=False,&nbsp;return_state=False,&nbsp;stateful=False)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Noise Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.GaussianNoise(stddev)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GaussianDropout(rate)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.AlphaDropout(rate,&nbsp;noise_shape=None,&nbsp;seed=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Layer Wrapper</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.GaussianNoise(stddev)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.GaussianDropout(rate)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.AlphaDropout(rate,&nbsp;noise_shape=None,&nbsp;seed=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Normalization Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.BatchNormalization(axis=-1,&nbsp;momentum=0.99,&nbsp;epsilon=0.001,&nbsp;center=True,&nbsp;scale=True,&nbsp;beta_initializer=&#39;zeros&#39;,&nbsp;gamma_initializer=&#39;ones&#39;,&nbsp;moving_mean_initializer=&#39;zeros&#39;,&nbsp;moving_variance_initializer=&#39;ones&#39;,&nbsp;beta_regularizer=None,&nbsp;gamma_regularizer=None,&nbsp;beta_constraint=None,&nbsp;gamma_constraint=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Embedding Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.Embedding(input_dim,&nbsp;output_dim,&nbsp;embeddings_initializer=&#39;uniform&#39;,&nbsp;embeddings_regularizer=None,&nbsp;activity_regularizer=None,&nbsp;embeddings_constraint=None,&nbsp;mask_zero=False,&nbsp;input_length=None)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Advanced Activation Layer</h2>\r\n\r\n<ol start=\"1\">\r\n	<li>keras.layers.LeakyReLU(alpha=0.3)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.PReLU(alpha_initializer=&#39;zeros&#39;,&nbsp;alpha_regularizer=None,&nbsp;alpha_constraint=None,&nbsp;shared_axes=None)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.ELU(alpha=1.0)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.ThresholdedReLU(theta=1.0)&nbsp;&nbsp;</li>\r\n	<li>keras.layers.Softmax(axis=-1)&nbsp;&nbsp;</li>\r\n</ol>\r\n', 'Deep Learning'),
(39, 'Neural Networks - Introduction', '<h1>Artificial Neural Network - Basic Concepts</h1>\r\n\r\n<p>Neural networks are parallel computing devices, which is basically an attempt to make a computer model of the brain. The main objective is to develop a system to perform various computational tasks faster than the traditional systems. These tasks include pattern recognition and classification, approximation, optimization, and data clustering.</p>\r\n\r\n<h2>What is Artificial Neural Network?</h2>\r\n\r\n<p>Artificial Neural Network&nbsp;ANNANN&nbsp;is an efficient computing system whose central theme is borrowed from the analogy of biological neural networks. ANNs are also named as &ldquo;artificial neural systems,&rdquo; or &ldquo;parallel distributed processing systems,&rdquo; or &ldquo;connectionist systems.&rdquo; ANN acquires a large collection of units that are interconnected in some pattern to allow communication between the units. These units, also referred to as nodes or neurons, are simple processors which operate in parallel.</p>\r\n\r\n<p>Every neuron is connected with other neuron through a connection link. Each connection link is associated with a weight that has information about the input signal. This is the most useful information for neurons to solve a particular problem because the weight usually excites or inhibits the signal that is being communicated. Each neuron has an internal state, which is called an activation signal. Output signals, which are produced after combining the input signals and activation rule, may be sent to other units.</p>\r\n\r\n<h2>A Brief History of ANN</h2>\r\n\r\n<p>The history of ANN can be divided into the following three eras &minus;</p>\r\n\r\n<h3>ANN during 1940s to 1960s</h3>\r\n\r\n<p>Some key developments of this era are as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>1943</strong>&nbsp;&minus; It has been assumed that the concept of neural network started with the work of physiologist, Warren McCulloch, and mathematician, Walter Pitts, when in 1943 they modeled a simple neural network using electrical circuits in order to describe how neurons in the brain might work.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1949</strong>&nbsp;&minus; Donald Hebb&rsquo;s book,&nbsp;<em>The Organization of Behavior</em>, put forth the fact that repeated activation of one neuron by another increases its strength each time they are used.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1956</strong>&nbsp;&minus; An associative memory network was introduced by Taylor.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1958</strong>&nbsp;&minus; A learning method for McCulloch and Pitts neuron model named Perceptron was invented by Rosenblatt.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1960</strong>&nbsp;&minus; Bernard Widrow and Marcian Hoff developed models called &quot;ADALINE&quot; and &ldquo;MADALINE.&rdquo;</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>ANN during 1960s to 1980s</h3>\r\n\r\n<p>Some key developments of this era are as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>1961</strong>&nbsp;&minus; Rosenblatt made an unsuccessful attempt but proposed the &ldquo;backpropagation&rdquo; scheme for multilayer networks.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1964</strong>&nbsp;&minus; Taylor constructed a winner-take-all circuit with inhibitions among output units.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1969</strong>&nbsp;&minus; Multilayer perceptron&nbsp;MLPMLP&nbsp;was invented by Minsky and Papert.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1971</strong>&nbsp;&minus; Kohonen developed Associative memories.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1976</strong>&nbsp;&minus; Stephen Grossberg and Gail Carpenter developed Adaptive resonance theory.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>ANN from 1980s till Present</h3>\r\n\r\n<p>Some key developments of this era are as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>1982</strong>&nbsp;&minus; The major development was Hopfield&rsquo;s Energy approach.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1985</strong>&nbsp;&minus; Boltzmann machine was developed by Ackley, Hinton, and Sejnowski.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1986</strong>&nbsp;&minus; Rumelhart, Hinton, and Williams introduced Generalised Delta Rule.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>1988</strong>&nbsp;&minus; Kosko developed Binary Associative Memory&nbsp;BAMBAM&nbsp;and also gave the concept of Fuzzy Logic in ANN.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>The historical review shows that significant progress has been made in this field. Neural network based chips are emerging and applications to complex problems are being developed. Surely, today is a period of transition for neural network technology.</p>\r\n\r\n<h2>Biological Neuron</h2>\r\n\r\n<p>A nerve cell&nbsp;neuronneuron&nbsp;is a special biological cell that processes information. According to an estimation, there are huge number of neurons, approximately 10<sup>11</sup>&nbsp;with numerous interconnections, approximately 10<sup>15</sup>.</p>\r\n\r\n<h3>Schematic Diagram</h3>\r\n\r\n<p><img alt=\"Schematic Diagram\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/schematic_diagram.jpg\" /></p>\r\n\r\n<h3>Working of a Biological Neuron</h3>\r\n\r\n<p>As shown in the above diagram, a typical neuron consists of the following four parts with the help of which we can explain its working &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Dendrites</strong>&nbsp;&minus; They are tree-like branches, responsible for receiving the information from other neurons it is connected to. In other sense, we can say that they are like the ears of neuron.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Soma</strong>&nbsp;&minus; It is the cell body of the neuron and is responsible for processing of information, they have received from dendrites.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Axon</strong>&nbsp;&minus; It is just like a cable through which neurons send the information.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Synapses</strong>&nbsp;&minus; It is the connection between the axon and other neuron dendrites.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>ANN versus BNN</h3>\r\n\r\n<p>Before taking a look at the differences between Artificial Neural Network&nbsp;ANNANN&nbsp;and Biological Neural Network&nbsp;BNNBNN, let us take a look at the similarities based on the terminology between these two.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Biological Neural Network&nbsp;BNNBNN</th>\r\n			<th>Artificial Neural Network&nbsp;ANNANN</th>\r\n		</tr>\r\n		<tr>\r\n			<td>Soma</td>\r\n			<td>Node</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Dendrites</td>\r\n			<td>Input</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Synapse</td>\r\n			<td>Weights or Interconnections</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Axon</td>\r\n			<td>Output</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>The following table shows the comparison between ANN and BNN based on some criteria mentioned.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Criteria</th>\r\n			<th>BNN</th>\r\n			<th>ANN</th>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Processing</strong></td>\r\n			<td>Massively parallel, slow but superior than ANN</td>\r\n			<td>Massively parallel, fast but inferior than BNN</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Size</strong></td>\r\n			<td>10<sup>11</sup>&nbsp;neurons and 10<sup>15</sup>&nbsp;interconnections</td>\r\n			<td>10<sup>2</sup>&nbsp;to 10<sup>4</sup>&nbsp;nodes&nbsp;mainlydependsonthetypeofapplicationandnetworkdesignermainlydependsonthetypeofapplicationandnetworkdesigner</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Learning</strong></td>\r\n			<td>They can tolerate ambiguity</td>\r\n			<td>Very precise, structured and formatted data is required to tolerate ambiguity</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Fault tolerance</strong></td>\r\n			<td>Performance degrades with even partial damage</td>\r\n			<td>It is capable of robust performance, hence has the potential to be fault tolerant</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Storage capacity</strong></td>\r\n			<td>Stores the information in the synapse</td>\r\n			<td>Stores the information in continuous memory locations</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Model of Artificial Neural Network</h2>\r\n\r\n<p>The following diagram represents the general model of ANN followed by its processing.</p>\r\n\r\n<p><img alt=\"Model\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/model.jpg\" /></p>\r\n\r\n<p>For the above general model of artificial neural network, the net input can be calculated as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yin=x1.w1+x2.w2+x3.w3&hellip;xm.wmyin=x1.w1+x2.w2+x3.w3&hellip;xm.wm</p>\r\n\r\n<p>i.e., Net input&nbsp;yin=&sum;mixi.wiyin=&sum;imxi.wi</p>\r\n\r\n<p>The output can be calculated by applying the activation function over the net input.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Y=F(yin)Y=F(yin)</p>\r\n\r\n<p>Output = function&nbsp;netinputcalculated</p>\r\n\r\n<h1>Artificial Neural Network - Building Blocks</h1>\r\n\r\n<p>Processing of ANN depends upon the following three building blocks &minus;</p>\r\n\r\n<ul>\r\n	<li>Network Topology</li>\r\n	<li>Adjustments of Weights or Learning</li>\r\n	<li>Activation Functions</li>\r\n</ul>\r\n\r\n<p>In this chapter, we will discuss in detail about these three building blocks of ANN</p>\r\n\r\n<h2>Network Topology</h2>\r\n\r\n<p>A network topology is the arrangement of a network along with its nodes and connecting lines. According to the topology, ANN can be classified as the following kinds &minus;</p>\r\n\r\n<h3>Feedforward Network</h3>\r\n\r\n<p>It is a non-recurrent network having processing units/nodes in layers and all the nodes in a layer are connected with the nodes of the previous layers. The connection has different weights upon them. There is no feedback loop means the signal can only flow in one direction, from input to output. It may be divided into the following two types &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Single layer feedforward network</strong>&nbsp;&minus; The concept is of feedforward ANN having only one weighted layer. In other words, we can say the input layer is fully connected to the output layer.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p><img alt=\"Single layer feedforward network\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/single_layer_feedforward_network.jpg\" /></p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Multilayer feedforward network</strong>&nbsp;&minus; The concept is of feedforward ANN having more than one weighted layer. As this network has one or more layers between the input and the output layer, it is called hidden layers.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p><img alt=\"Multilayer feedforward network\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/multilayer_feedforward_network.jpg\" /></p>\r\n\r\n<h3>Feedback Network</h3>\r\n\r\n<p>As the name suggests, a feedback network has feedback paths, which means the signal can flow in both directions using loops. This makes it a non-linear dynamic system, which changes continuously until it reaches a state of equilibrium. It may be divided into the following types &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Recurrent networks</strong>&nbsp;&minus; They are feedback networks with closed loops. Following are the two types of recurrent networks.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Fully recurrent network</strong>&nbsp;&minus; It is the simplest neural network architecture because all nodes are connected to all other nodes and each node works as both input and output.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p><img alt=\"Fully recurrent network\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/fully_recurrent_network.jpg\" /></p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Jordan network</strong>&nbsp;&minus; It is a closed loop network in which the output will go to the input again as feedback as shown in the following diagram.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p><img alt=\"Jordan network\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/jordan_network.jpg\" /></p>\r\n\r\n<h2>Adjustments of Weights or Learning</h2>\r\n\r\n<p>Learning, in artificial neural network, is the method of modifying the weights of connections between the neurons of a specified network. Learning in ANN can be classified into three categories namely supervised learning, unsupervised learning, and reinforcement learning.</p>\r\n\r\n<h3>Supervised Learning</h3>\r\n\r\n<p>As the name suggests, this type of learning is done under the supervision of a teacher. This learning process is dependent.</p>\r\n\r\n<p>During the training of ANN under supervised learning, the input vector is presented to the network, which will give an output vector. This output vector is compared with the desired output vector. An error signal is generated, if there is a difference between the actual output and the desired output vector. On the basis of this error signal, the weights are adjusted until the actual output is matched with the desired output.</p>\r\n\r\n<p><img alt=\"Model\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/supervised_learning.jpg\" /></p>\r\n\r\n<h3>Unsupervised Learning</h3>\r\n\r\n<p>As the name suggests, this type of learning is done without the supervision of a teacher. This learning process is independent.</p>\r\n\r\n<p>During the training of ANN under unsupervised learning, the input vectors of similar type are combined to form clusters. When a new input pattern is applied, then the neural network gives an output response indicating the class to which the input pattern belongs.</p>\r\n\r\n<p>There is no feedback from the environment as to what should be the desired output and if it is correct or incorrect. Hence, in this type of learning, the network itself must discover the patterns and features from the input data, and the relation for the input data over the output.</p>\r\n\r\n<p><img alt=\"Unsupervised Learning\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/unsupervised_learning.jpg\" /></p>\r\n\r\n<h3>Reinforcement Learning</h3>\r\n\r\n<p>As the name suggests, this type of learning is used to reinforce or strengthen the network over some critic information. This learning process is similar to supervised learning, however we might have very less information.</p>\r\n\r\n<p>During the training of network under reinforcement learning, the network receives some feedback from the environment. This makes it somewhat similar to supervised learning. However, the feedback obtained here is evaluative not instructive, which means there is no teacher as in supervised learning. After receiving the feedback, the network performs adjustments of the weights to get better critic information in future.</p>\r\n\r\n<p><img alt=\"Reinforcement Learning\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/reinforcement_learning.jpg\" /></p>\r\n\r\n<h2>Activation Functions</h2>\r\n\r\n<p>It may be defined as the extra force or effort applied over the input to obtain an exact output. In ANN, we can also apply activation functions over the input to get the exact output. Followings are some activation functions of interest &minus;</p>\r\n\r\n<h3>Linear Activation Function</h3>\r\n\r\n<p>It is also called the identity function as it performs no input editing. It can be defined as &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>F(x)=xF(x)=x</p>\r\n\r\n<h3>Sigmoid Activation Function</h3>\r\n\r\n<p>It is of two type as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Binary sigmoidal function</strong>&nbsp;&minus; This activation function performs input editing between 0 and 1. It is positive in nature. It is always bounded, which means its output cannot be less than 0 and more than 1. It is also strictly increasing in nature, which means more the input higher would be the output. It can be defined as</p>\r\n\r\n	<p>&nbsp;</p>\r\n\r\n	<p>F(x)=sigm(x)=11+exp(&minus;x)F(x)=sigm(x)=11+exp(&minus;x)</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Bipolar sigmoidal function</strong>&nbsp;&minus; This activation function performs input editing between -1 and 1. It can be positive or negative in nature. It is always bounded, which means its output cannot be less than -1 and more than 1. It is also strictly increasing in nature like sigmoid function. It can be defined as</p>\r\n\r\n	<p>&nbsp;</p>\r\n\r\n	<p>F(x)=sigm(x)=21+exp(&minus;x)&minus;1=1&minus;exp(x)1+exp(x)</p>\r\n	</li>\r\n</ul>\r\n', 'Neural Networks');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(40, 'Neural Networks - Supervised Learning', '<h1>Supervised Learning</h1>\r\n\r\n<p>As the name suggests,&nbsp;<strong>supervised learning</strong>&nbsp;takes place under the supervision of a teacher. This learning process is dependent. During the training of ANN under supervised learning, the input vector is presented to the network, which will produce an output vector. This output vector is compared with the desired/target output vector. An error signal is generated if there is a difference between the actual output and the desired/target output vector. On the basis of this error signal, the weights would be adjusted until the actual output is matched with the desired output.</p>\r\n\r\n<h2>Perceptron</h2>\r\n\r\n<p>Developed by Frank Rosenblatt by using McCulloch and Pitts model, perceptron is the basic operational unit of artificial neural networks. It employs supervised learning rule and is able to classify the data into two classes.</p>\r\n\r\n<p>Operational characteristics of the perceptron: It consists of a single neuron with an arbitrary number of inputs along with adjustable weights, but the output of the neuron is 1 or 0 depending upon the threshold. It also consists of a bias whose weight is always 1. Following figure gives a schematic representation of the perceptron.</p>\r\n\r\n<p><img alt=\"Perceptron\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/perceptron.jpg\" /></p>\r\n\r\n<p>Perceptron thus has the following three basic elements &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Links</strong>&nbsp;&minus; It would have a set of connection links, which carries a weight including a bias always having weight 1.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Adder</strong>&nbsp;&minus; It adds the input after they are multiplied with their respective weights.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Activation function</strong>&nbsp;&minus; It limits the output of neuron. The most basic activation function is a Heaviside step function that has two possible outputs. This function returns 1, if the input is positive, and 0 for any negative input.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Training Algorithm</h3>\r\n\r\n<p>Perceptron network can be trained for single output unit as well as multiple output units.</p>\r\n\r\n<h3>Training Algorithm for Single Output Unit</h3>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Initialize the following to start the training &minus;</p>\r\n\r\n<ul>\r\n	<li>Weights</li>\r\n	<li>Bias</li>\r\n	<li>Learning rate&nbsp;&alpha;&alpha;</li>\r\n</ul>\r\n\r\n<p>For easy calculation and simplicity, weights and bias must be set equal to 0 and the learning rate must be set equal to 1.</p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Continue step 3-8 when the stopping condition is not true.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Continue step 4-6 for every training vector&nbsp;<strong>x</strong>.</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Activate each input unit as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>xi=si(i=1ton)xi=si(i=1ton)</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Now obtain the net input with the following relation &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yin=b+&sum;inxi.wiyin=b+&sum;inxi.wi</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;b&rsquo;</strong>&nbsp;is bias and&nbsp;<strong>&lsquo;n&rsquo;</strong>&nbsp;is the total number of input neurons.</p>\r\n\r\n<p><strong>Step 6</strong>&nbsp;&minus; Apply the following activation function to obtain the final output.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>f(yin)=âŽ§âŽ©âŽ¨10&minus;1ifyin&gt;&theta;if&minus;&theta;â©½yinâ©½&theta;ifyin&lt;&minus;&theta;f(yin)={1ifyin&gt;&theta;0if&minus;&theta;â©½yinâ©½&theta;&minus;1ifyin&lt;&minus;&theta;</p>\r\n\r\n<p><strong>Step 7</strong>&nbsp;&minus; Adjust the weight and bias as follows &minus;</p>\r\n\r\n<p><strong>Case 1</strong>&nbsp;&minus; if&nbsp;<strong>y &ne; t</strong>&nbsp;then,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wi(new)=wi(old)+&alpha;txiwi(new)=wi(old)+&alpha;txi</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>b(new)=b(old)+&alpha;tb(new)=b(old)+&alpha;t</p>\r\n\r\n<p><strong>Case 2</strong>&nbsp;&minus; if&nbsp;<strong>y = t</strong>&nbsp;then,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wi(new)=wi(old)wi(new)=wi(old)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>b(new)=b(old)b(new)=b(old)</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;y&rsquo;</strong>&nbsp;is the actual output and&nbsp;<strong>&lsquo;t&rsquo;</strong>&nbsp;is the desired/target output.</p>\r\n\r\n<p><strong>Step 8</strong>&nbsp;&minus; Test for the stopping condition, which would happen when there is no change in weight.</p>\r\n\r\n<h3>Training Algorithm for Multiple Output Units</h3>\r\n\r\n<p>The following diagram is the architecture of perceptron for multiple output classes.</p>\r\n\r\n<p><img alt=\"Training Algorithm\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/training_algorithm.jpg\" /></p>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Initialize the following to start the training &minus;</p>\r\n\r\n<ul>\r\n	<li>Weights</li>\r\n	<li>Bias</li>\r\n	<li>Learning rate&nbsp;&alpha;&alpha;</li>\r\n</ul>\r\n\r\n<p>For easy calculation and simplicity, weights and bias must be set equal to 0 and the learning rate must be set equal to 1.</p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Continue step 3-8 when the stopping condition is not true.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Continue step 4-6 for every training vector&nbsp;<strong>x</strong>.</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Activate each input unit as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>xi=si(i=1ton)xi=si(i=1ton)</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Obtain the net input with the following relation &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yin=b+&sum;inxiwijyin=b+&sum;inxiwij</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;b&rsquo;</strong>&nbsp;is bias and&nbsp;<strong>&lsquo;n&rsquo;</strong>&nbsp;is the total number of input neurons.</p>\r\n\r\n<p><strong>Step 6</strong>&nbsp;&minus; Apply the following activation function to obtain the final output for each output unit&nbsp;<strong>j = 1 to m</strong>&nbsp;&minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>f(yin)=âŽ§âŽ©âŽ¨âŽªâŽª10&minus;1ifyinj&gt;&theta;if&minus;&theta;â©½yinjâ©½&theta;ifyinj&lt;&minus;&theta;f(yin)={1ifyinj&gt;&theta;0if&minus;&theta;â©½yinjâ©½&theta;&minus;1ifyinj&lt;&minus;&theta;</p>\r\n\r\n<p><strong>Step 7</strong>&nbsp;&minus; Adjust the weight and bias for&nbsp;<strong>x = 1 to n</strong>&nbsp;and&nbsp;<strong>j = 1 to m</strong>&nbsp;as follows &minus;</p>\r\n\r\n<p><strong>Case 1</strong>&nbsp;&minus; if&nbsp;<strong>y<sub>j</sub>&nbsp;&ne; t<sub>j</sub></strong>&nbsp;then,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wij(new)=wij(old)+&alpha;tjxiwij(new)=wij(old)+&alpha;tjxi</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>bj(new)=bj(old)+&alpha;tjbj(new)=bj(old)+&alpha;tj</p>\r\n\r\n<p><strong>Case 2</strong>&nbsp;&minus; if&nbsp;<strong>y<sub>j</sub>&nbsp;= t<sub>j</sub></strong>&nbsp;then,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wij(new)=wij(old)wij(new)=wij(old)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>bj(new)=bj(old)bj(new)=bj(old)</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;y&rsquo;</strong>&nbsp;is the actual output and&nbsp;<strong>&lsquo;t&rsquo;</strong>&nbsp;is the desired/target output.</p>\r\n\r\n<p><strong>Step 8</strong>&nbsp;&minus; Test for the stopping condition, which will happen when there is no change in weight.</p>\r\n\r\n<h2>Adaptive Linear Neuron (Adaline)</h2>\r\n\r\n<p>Adaline which stands for Adaptive Linear Neuron, is a network having a single linear unit. It was developed by Widrow and Hoff in 1960. Some important points about Adaline are as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>It uses bipolar activation function.</p>\r\n	</li>\r\n	<li>\r\n	<p>It uses delta rule for training to minimize the Mean-Squared Error (MSE) between the actual output and the desired/target output.</p>\r\n	</li>\r\n	<li>\r\n	<p>The weights and the bias are adjustable.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Architecture</h3>\r\n\r\n<p>The basic structure of Adaline is similar to perceptron having an extra feedback loop with the help of which the actual output is compared with the desired/target output. After comparison on the basis of training algorithm, the weights and bias will be updated.</p>\r\n\r\n<p><img alt=\"Architecture Adaptive Linear\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/architecture_adaptive_linear.jpg\" /></p>\r\n\r\n<h3>Training Algorithm</h3>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Initialize the following to start the training &minus;</p>\r\n\r\n<ul>\r\n	<li>Weights</li>\r\n	<li>Bias</li>\r\n	<li>Learning rate&nbsp;&alpha;&alpha;</li>\r\n</ul>\r\n\r\n<p>For easy calculation and simplicity, weights and bias must be set equal to 0 and the learning rate must be set equal to 1.</p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Continue step 3-8 when the stopping condition is not true.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Continue step 4-6 for every bipolar training pair&nbsp;<strong>s:t</strong>.</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Activate each input unit as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>xi=si(i=1ton)xi=si(i=1ton)</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Obtain the net input with the following relation &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yin=b+&sum;inxiwiyin=b+&sum;inxiwi</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;b&rsquo;</strong>&nbsp;is bias and&nbsp;<strong>&lsquo;n&rsquo;</strong>&nbsp;is the total number of input neurons.</p>\r\n\r\n<p><strong>Step 6</strong>&nbsp;&minus; Apply the following activation function to obtain the final output &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>f(yin)={1&minus;1ifyinâ©¾0ifyin&lt;0f(yin)={1ifyinâ©¾0&minus;1ifyin&lt;0</p>\r\n\r\n<p><strong>Step 7</strong>&nbsp;&minus; Adjust the weight and bias as follows &minus;</p>\r\n\r\n<p><strong>Case 1</strong>&nbsp;&minus; if&nbsp;<strong>y &ne; t</strong>&nbsp;then,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wi(new)=wi(old)+&alpha;(t&minus;yin)xiwi(new)=wi(old)+&alpha;(t&minus;yin)xi</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>b(new)=b(old)+&alpha;(t&minus;yin)b(new)=b(old)+&alpha;(t&minus;yin)</p>\r\n\r\n<p><strong>Case 2</strong>&nbsp;&minus; if&nbsp;<strong>y = t</strong>&nbsp;then,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wi(new)=wi(old)wi(new)=wi(old)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>b(new)=b(old)b(new)=b(old)</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;y&rsquo;</strong>&nbsp;is the actual output and&nbsp;<strong>&lsquo;t&rsquo;</strong>&nbsp;is the desired/target output.</p>\r\n\r\n<p>(t&minus;yin)(t&minus;yin)&nbsp;is the computed error.</p>\r\n\r\n<p><strong>Step 8</strong>&nbsp;&minus; Test for the stopping condition, which will happen when there is no change in weight or the highest weight change occurred during training is smaller than the specified tolerance.</p>\r\n\r\n<h2>Multiple Adaptive Linear Neuron (Madaline)</h2>\r\n\r\n<p>Madaline which stands for Multiple Adaptive Linear Neuron, is a network which consists of many Adalines in parallel. It will have a single output unit. Some important points about Madaline are as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>It is just like a multilayer perceptron, where Adaline will act as a hidden unit between the input and the Madaline layer.</p>\r\n	</li>\r\n	<li>\r\n	<p>The weights and the bias between the input and Adaline layers, as in we see in the Adaline architecture, are adjustable.</p>\r\n	</li>\r\n	<li>\r\n	<p>The Adaline and Madaline layers have fixed weights and bias of 1.</p>\r\n	</li>\r\n	<li>\r\n	<p>Training can be done with the help of Delta rule.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Architecture</h3>\r\n\r\n<p>The architecture of Madaline consists of&nbsp;<strong>&ldquo;n&rdquo;</strong>&nbsp;neurons of the input layer,&nbsp;<strong>&ldquo;m&rdquo;</strong>&nbsp;neurons of the Adaline layer, and 1 neuron of the Madaline layer. The Adaline layer can be considered as the hidden layer as it is between the input layer and the output layer, i.e. the Madaline layer.</p>\r\n\r\n<p><img alt=\"Adaline\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/adaline.jpg\" /></p>\r\n\r\n<h3>Training Algorithm</h3>\r\n\r\n<p>By now we know that only the weights and bias between the input and the Adaline layer are to be adjusted, and the weights and bias between the Adaline and the Madaline layer are fixed.</p>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Initialize the following to start the training &minus;</p>\r\n\r\n<ul>\r\n	<li>Weights</li>\r\n	<li>Bias</li>\r\n	<li>Learning rate&nbsp;&alpha;&alpha;</li>\r\n</ul>\r\n\r\n<p>For easy calculation and simplicity, weights and bias must be set equal to 0 and the learning rate must be set equal to 1.</p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Continue step 3-8 when the stopping condition is not true.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Continue step 4-7 for every bipolar training pair&nbsp;<strong>s:t</strong>.</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Activate each input unit as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>xi=si(i=1ton)xi=si(i=1ton)</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Obtain the net input at each hidden layer, i.e. the Adaline layer with the following relation &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Qinj=bj+&sum;inxiwijj=1tomQinj=bj+&sum;inxiwijj=1tom</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;b&rsquo;</strong>&nbsp;is bias and&nbsp;<strong>&lsquo;n&rsquo;</strong>&nbsp;is the total number of input neurons.</p>\r\n\r\n<p><strong>Step 6</strong>&nbsp;&minus; Apply the following activation function to obtain the final output at the Adaline and the Madaline layer &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>f(x)={1&minus;1ifxâ©¾0ifx&lt;0f(x)={1ifxâ©¾0&minus;1ifx&lt;0</p>\r\n\r\n<p>Output at the hidden (Adaline) unit</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Qj=f(Qinj)Qj=f(Qinj)</p>\r\n\r\n<p>Final output of the network</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>y=f(yin)y=f(yin)</p>\r\n\r\n<p><strong>i.e.</strong>&nbsp;yinj=b0+&sum;mj=1Qjvjyinj=b0+&sum;j=1mQjvj</p>\r\n\r\n<p><strong>Step 7</strong>&nbsp;&minus; Calculate the error and adjust the weights as follows &minus;</p>\r\n\r\n<p><strong>Case 1</strong>&nbsp;&minus; if&nbsp;<strong>y &ne; t</strong>&nbsp;and&nbsp;<strong>t = 1</strong>&nbsp;then,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wij(new)=wij(old)+&alpha;(1&minus;Qinj)xiwij(new)=wij(old)+&alpha;(1&minus;Qinj)xi</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>bj(new)=bj(old)+&alpha;(1&minus;Qinj)bj(new)=bj(old)+&alpha;(1&minus;Qinj)</p>\r\n\r\n<p>In this case, the weights would be updated on&nbsp;<strong>Q<sub>j</sub></strong>&nbsp;where the net input is close to 0 because&nbsp;<strong>t = 1</strong>.</p>\r\n\r\n<p><strong>Case 2</strong>&nbsp;&minus; if&nbsp;<strong>y &ne; t</strong>&nbsp;and&nbsp;<strong>t = -1</strong>&nbsp;then,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wik(new)=wik(old)+&alpha;(&minus;1&minus;Qink)xiwik(new)=wik(old)+&alpha;(&minus;1&minus;Qink)xi</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>bk(new)=bk(old)+&alpha;(&minus;1&minus;Qink)bk(new)=bk(old)+&alpha;(&minus;1&minus;Qink)</p>\r\n\r\n<p>In this case, the weights would be updated on&nbsp;<strong>Q<sub>k</sub></strong>&nbsp;where the net input is positive because&nbsp;<strong>t = -1</strong>.</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;y&rsquo;</strong>&nbsp;is the actual output and&nbsp;<strong>&lsquo;t&rsquo;</strong>&nbsp;is the desired/target output.</p>\r\n\r\n<p><strong>Case 3</strong>&nbsp;&minus; if&nbsp;<strong>y = t</strong>&nbsp;then</p>\r\n\r\n<p>There would be no change in weights.</p>\r\n\r\n<p><strong>Step 8</strong>&nbsp;&minus; Test for the stopping condition, which will happen when there is no change in weight or the highest weight change occurred during training is smaller than the specified tolerance.</p>\r\n\r\n<h2>Back Propagation Neural Networks</h2>\r\n\r\n<p>Back Propagation Neural (BPN) is a multilayer neural network consisting of the input layer, at least one hidden layer and output layer. As its name suggests, back propagating will take place in this network. The error which is calculated at the output layer, by comparing the target output and the actual output, will be propagated back towards the input layer.</p>\r\n\r\n<h3>Architecture</h3>\r\n\r\n<p>As shown in the diagram, the architecture of BPN has three interconnected layers having weights on them. The hidden layer as well as the output layer also has bias, whose weight is always 1, on them. As is clear from the diagram, the working of BPN is in two phases. One phase sends the signal from the input layer to the output layer, and the other phase back propagates the error from the output layer to the input layer.</p>\r\n\r\n<p><img alt=\"Back Propogation\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/back_propogation.jpg\" /></p>\r\n\r\n<h3>Training Algorithm</h3>\r\n\r\n<p>For training, BPN will use binary sigmoid activation function. The training of BPN will have the following three phases.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Phase 1</strong>&nbsp;&minus; Feed Forward Phase</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Phase 2</strong>&nbsp;&minus; Back Propagation of error</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Phase 3</strong>&nbsp;&minus; Updating of weights</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>All these steps will be concluded in the algorithm as follows</p>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Initialize the following to start the training &minus;</p>\r\n\r\n<ul>\r\n	<li>Weights</li>\r\n	<li>Learning rate&nbsp;&alpha;&alpha;</li>\r\n</ul>\r\n\r\n<p>For easy calculation and simplicity, take some small random values.</p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Continue step 3-11 when the stopping condition is not true.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Continue step 4-10 for every training pair.</p>\r\n\r\n<h3>Phase 1</h3>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Each input unit receives input signal&nbsp;<strong>x<sub>i</sub></strong>&nbsp;and sends it to the hidden unit for all&nbsp;<strong>i = 1 to n</strong></p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Calculate the net input at the hidden unit using the following relation &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Qinj=b0j+&sum;i=1nxivijj=1topQinj=b0j+&sum;i=1nxivijj=1top</p>\r\n\r\n<p>Here&nbsp;<strong>b<sub>0j</sub></strong>&nbsp;is the bias on hidden unit,&nbsp;<strong>v<sub>ij</sub></strong>&nbsp;is the weight on&nbsp;<strong>j</strong>&nbsp;unit of the hidden layer coming from&nbsp;<strong>i</strong>&nbsp;unit of the input layer.</p>\r\n\r\n<p>Now calculate the net output by applying the following activation function</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Qj=f(Qinj)Qj=f(Qinj)</p>\r\n\r\n<p>Send these output signals of the hidden layer units to the output layer units.</p>\r\n\r\n<p><strong>Step 6</strong>&nbsp;&minus; Calculate the net input at the output layer unit using the following relation &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yink=b0k+&sum;j=1pQjwjkk=1tomyink=b0k+&sum;j=1pQjwjkk=1tom</p>\r\n\r\n<p>Here&nbsp;<strong>b<sub>0k</sub></strong>&nbsp;â¡is the bias on output unit,&nbsp;<strong>w<sub>jk</sub></strong>&nbsp;is the weight on&nbsp;<strong>k</strong>&nbsp;unit of the output layer coming from&nbsp;<strong>j</strong>&nbsp;unit of the hidden layer.</p>\r\n\r\n<p>Calculate the net output by applying the following activation function</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yk=f(yink)yk=f(yink)</p>\r\n\r\n<h3>Phase 2</h3>\r\n\r\n<p><strong>Step 7</strong>&nbsp;&minus; Compute the error correcting term, in correspondence with the target pattern received at each output unit, as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&delta;k=(tk&minus;yk)f&prime;(yink)&delta;k=(tk&minus;yk)f&prime;(yink)</p>\r\n\r\n<p>On this basis, update the weight and bias as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&Delta;vjk=&alpha;&delta;kQij&Delta;vjk=&alpha;&delta;kQij</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&Delta;b0k=&alpha;&delta;k&Delta;b0k=&alpha;&delta;k</p>\r\n\r\n<p>Then, send&nbsp;&delta;k&delta;k&nbsp;back to the hidden layer.</p>\r\n\r\n<p><strong>Step 8</strong>&nbsp;&minus; Now each hidden unit will be the sum of its delta inputs from the output units.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&delta;inj=&sum;k=1m&delta;kwjk&delta;inj=&sum;k=1m&delta;kwjk</p>\r\n\r\n<p>Error term can be calculated as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&delta;j=&delta;injf&prime;(Qinj)&delta;j=&delta;injf&prime;(Qinj)</p>\r\n\r\n<p>On this basis, update the weight and bias as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&Delta;wij=&alpha;&delta;jxi&Delta;wij=&alpha;&delta;jxi</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&Delta;b0j=&alpha;&delta;j&Delta;b0j=&alpha;&delta;j</p>\r\n\r\n<h3>Phase 3</h3>\r\n\r\n<p><strong>Step 9</strong>&nbsp;&minus; Each output unit&nbsp;<strong><em>(y<sub>k</sub>k = 1 to m)</em></strong>&nbsp;updates the weight and bias as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>vjk(new)=vjk(old)+&Delta;vjkvjk(new)=vjk(old)+&Delta;vjk</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>b0k(new)=b0k(old)+&Delta;b0kb0k(new)=b0k(old)+&Delta;b0k</p>\r\n\r\n<p><strong>Step 10</strong>&nbsp;&minus; Each output unit&nbsp;<strong><em>(z<sub>j</sub>j = 1 to p)</em></strong>&nbsp;updates the weight and bias as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wij(new)=wij(old)+&Delta;wijwij(new)=wij(old)+&Delta;wij</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>b0j(new)=b0j(old)+&Delta;b0jb0j(new)=b0j(old)+&Delta;b0j</p>\r\n\r\n<p><strong>Step 11</strong>&nbsp;&minus; Check for the stopping condition, which may be either the number of epochs reached or the target output matches the actual output.</p>\r\n\r\n<h2>Generalized Delta Learning Rule</h2>\r\n\r\n<p>Delta rule works only for the output layer. On the other hand, generalized delta rule, also called as&nbsp;<strong>back-propagation</strong>&nbsp;rule, is a way of creating the desired values of the hidden layer.</p>\r\n\r\n<h3>Mathematical Formulation</h3>\r\n\r\n<p>For the activation function&nbsp;yk=f(yink)yk=f(yink)&nbsp;the derivation of net input on Hidden layer as well as on output layer can be given by</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yink=&sum;iziwjkyink=&sum;iziwjk</p>\r\n\r\n<p>And&nbsp;yinj=&sum;ixivijyinj=&sum;ixivij</p>\r\n\r\n<p>Now the error which has to be minimized is</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>E=12&sum;k[tk&minus;yk]2E=12&sum;k[tk&minus;yk]2</p>\r\n\r\n<p>By using the chain rule, we have</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&part;E&part;wjk=&part;&part;wjk(12&sum;k[tk&minus;yk]2)&part;E&part;wjk=&part;&part;wjk(12&sum;k[tk&minus;yk]2)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>=&part;&part;wjkâŸ®12[tk&minus;t(yink)]2âŸ¯=&part;&part;wjkâŸ®12[tk&minus;t(yink)]2âŸ¯</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>=&minus;[tk&minus;yk]&part;&part;wjkf(yink)=&minus;[tk&minus;yk]&part;&part;wjkf(yink)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>=&minus;[tk&minus;yk]f(yink)&part;&part;wjk(yink)=&minus;[tk&minus;yk]f(yink)&part;&part;wjk(yink)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>=&minus;[tk&minus;yk]f&prime;(yink)zj=&minus;[tk&minus;yk]f&prime;(yink)zj</p>\r\n\r\n<p>Now let us say&nbsp;&delta;k=&minus;[tk&minus;yk]f&prime;(yink)&delta;k=&minus;[tk&minus;yk]f&prime;(yink)</p>\r\n\r\n<p>The weights on connections to the hidden unit&nbsp;<strong>z<sub>j</sub></strong>&nbsp;can be given by &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&part;E&part;vij=&minus;&sum;k&delta;k&part;&part;vij(yink)&part;E&part;vij=&minus;&sum;k&delta;k&part;&part;vij(yink)</p>\r\n\r\n<p>Putting the value of&nbsp;yinkyink&nbsp;we will get the following</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&delta;j=&minus;&sum;k&delta;kwjkf&prime;(zinj)&delta;j=&minus;&sum;k&delta;kwjkf&prime;(zinj)</p>\r\n\r\n<p>Weight updating can be done as follows &minus;</p>\r\n\r\n<p>For the output unit &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&Delta;wjk=&minus;&alpha;&part;E&part;wjk&Delta;wjk=&minus;&alpha;&part;E&part;wjk</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>=&alpha;&delta;kzj=&alpha;&delta;kzj</p>\r\n\r\n<p>For the hidden unit &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&Delta;vij=&minus;&alpha;&part;E&part;vij&Delta;vij=&minus;&alpha;&part;E&part;vij</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>=&alpha;&delta;jxi</p>\r\n', 'Neural Networks'),
(41, 'Neural Networks - Unupervised Learning', '<h1>Unsupervised Learning</h1>\r\n\r\n<p>As the name suggests, this type of learning is done without the supervision of a teacher. This learning process is independent. During the training of ANN under unsupervised learning, the input vectors of similar type are combined to form clusters. When a new input pattern is applied, then the neural network gives an output response indicating the class to which input pattern belongs. In this, there would be no feedback from the environment as to what should be the desired output and whether it is correct or incorrect. Hence, in this type of learning the network itself must discover the patterns, features from the input data and the relation for the input data over the output.</p>\r\n\r\n<h2>Winner-Takes-All Networks</h2>\r\n\r\n<p>These kinds of networks are based on the competitive learning rule and will use the strategy where it chooses the neuron with the greatest total inputs as a winner. The connections between the output neurons show the competition between them and one of them would be &lsquo;ON&rsquo; which means it would be the winner and others would be &lsquo;OFF&rsquo;.</p>\r\n\r\n<p>Following are some of the networks based on this simple concept using unsupervised learning.</p>\r\n\r\n<h3>Hamming Network</h3>\r\n\r\n<p>In most of the neural networks using unsupervised learning, it is essential to compute the distance and perform comparisons. This kind of network is Hamming network, where for every given input vectors, it would be clustered into different groups. Following are some important features of Hamming Networks &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Lippmann started working on Hamming networks in 1987.</p>\r\n	</li>\r\n	<li>\r\n	<p>It is a single layer network.</p>\r\n	</li>\r\n	<li>\r\n	<p>The inputs can be either binary {0, 1} of bipolar {-1, 1}.</p>\r\n	</li>\r\n	<li>\r\n	<p>The weights of the net are calculated by the exemplar vectors.</p>\r\n	</li>\r\n	<li>\r\n	<p>It is a fixed weight network which means the weights would remain the same even during training.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Max Net</h3>\r\n\r\n<p>This is also a fixed weight network, which serves as a subnet for selecting the node having the highest input. All the nodes are fully interconnected and there exists symmetrical weights in all these weighted interconnections.</p>\r\n\r\n<h3>Architecture</h3>\r\n\r\n<p><img alt=\"Max Net\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/max_net.jpg\" /></p>\r\n\r\n<p>It uses the mechanism which is an iterative process and each node receives inhibitory inputs from all other nodes through connections. The single node whose value is maximum would be active or winner and the activations of all other nodes would be inactive. Max Net uses identity activation function with</p>\r\n\r\n<p>f(x)={x0ifx&gt;0ifx&le;0f(x)={xifx&gt;00ifx&le;0</p>\r\n\r\n<p>The task of this net is accomplished by the self-excitation weight of +1 and mutual inhibition magnitude, which is set like [0 &lt; É› &lt;&nbsp;1m1m] where&nbsp;<strong>&ldquo;m&rdquo;</strong>&nbsp;is the total number of the nodes.</p>\r\n\r\n<h2>Competitive Learning in ANN</h2>\r\n\r\n<p>It is concerned with unsupervised training in which the output nodes try to compete with each other to represent the input pattern. To understand this learning rule we will have to understand competitive net which is explained as follows &minus;</p>\r\n\r\n<h3>Basic Concept of Competitive Network</h3>\r\n\r\n<p>This network is just like a single layer feed-forward network having feedback connection between the outputs. The connections between the outputs are inhibitory type, which is shown by dotted lines, which means the competitors never support themselves.</p>\r\n\r\n<p><img alt=\"Basic Concept\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/basic_concept.jpg\" /></p>\r\n\r\n<h2>Basic Concept of Competitive Learning Rule</h2>\r\n\r\n<p>As said earlier, there would be competition among the output nodes so the main concept is - during training, the output unit that has the highest activation to a given input pattern, will be declared the winner. This rule is also called Winner-takes-all because only the winning neuron is updated and the rest of the neurons are left unchanged.</p>\r\n\r\n<h3>Mathematical Formulation</h3>\r\n\r\n<p>Following are the three important factors for mathematical formulation of this learning rule &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Condition to be a winner</p>\r\n\r\n	<p>Suppose if a neuron&nbsp;<strong><em>y<sub>k</sub></em></strong>&nbsp;wants to be the winner, then there would be the following condition</p>\r\n\r\n	<p>&nbsp;</p>\r\n\r\n	<p>yk={10ifvk&gt;vjforallj,j&ne;kotherwiseyk={1ifvk&gt;vjforallj,j&ne;k0otherwise</p>\r\n\r\n	<p>It means that if any neuron, say,&nbsp;<strong>y<sub>k</sub></strong>&nbsp;wants to win, then its induced local field&nbsp;theoutputofthesummationunittheoutputofthesummationunit, say&nbsp;<strong>v<sub>k</sub></strong>, must be the largest among all the other neurons in the network.</p>\r\n	</li>\r\n	<li>\r\n	<p>Condition of the sum total of weight</p>\r\n\r\n	<p>Another constraint over the competitive learning rule is the sum total of weights to a particular output neuron is going to be 1. For example, if we consider neuron&nbsp;<strong>k</strong>&nbsp;then</p>\r\n\r\n	<p>&nbsp;</p>\r\n\r\n	<p>&sum;kwkj=1forallk&sum;kwkj=1forallk</p>\r\n	</li>\r\n	<li>\r\n	<p>Change of weight for the winner</p>\r\n\r\n	<p>If a neuron does not respond to the input pattern, then no learning takes place in that neuron. However, if a particular neuron wins, then the corresponding weights are adjusted as follows &minus;</p>\r\n\r\n	<p>&nbsp;</p>\r\n\r\n	<p>&Delta;wkj={&minus;&alpha;(xj&minus;wkj),0ifneuronkwinsifneuronklosses&Delta;wkj={&minus;&alpha;(xj&minus;wkj),ifneuronkwins0ifneuronklosses</p>\r\n\r\n	<p>Here&nbsp;&alpha;&alpha;&nbsp;is the learning rate.</p>\r\n\r\n	<p>This clearly shows that we are favoring the winning neuron by adjusting its weight and if a neuron is lost, then we need not bother to re-adjust its weight.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>K-means Clustering Algorithm</h3>\r\n\r\n<p>K-means is one of the most popular clustering algorithm in which we use the concept of partition procedure. We start with an initial partition and repeatedly move patterns from one cluster to another, until we get a satisfactory result.</p>\r\n\r\n<h3>Algorithm</h3>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Select&nbsp;<strong>k</strong>&nbsp;points as the initial centroids. Initialize&nbsp;<strong>k</strong>&nbsp;prototypes&nbsp;<strong>(w<sub>1</sub>,&hellip;,w<sub>k</sub>)</strong>, for example we can identifying them with randomly chosen input vectors &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Wj=ip,wherej&isin;{1,....,k}andp&isin;{1,....,n}Wj=ip,wherej&isin;{1,....,k}andp&isin;{1,....,n}</p>\r\n\r\n<p>Each cluster&nbsp;<strong>C<sub>j</sub></strong>&nbsp;is associated with prototype&nbsp;<strong>w<sub>j</sub></strong>.</p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Repeat step 3-5 until E no longer decreases, or the cluster membership no longer changes.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; For each input vector&nbsp;<strong>i<sub>p</sub></strong>&nbsp;where&nbsp;<strong>p &isin; {1,&hellip;,n}</strong>, put&nbsp;<strong>i<sub>p</sub></strong>&nbsp;in the cluster&nbsp;<strong>C<sub>j*</sub></strong>&nbsp;with the nearest prototype&nbsp;<strong>w<sub>j*</sub></strong>&nbsp;having the following relation</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>|ip&minus;wj&lowast;|&le;|ip&minus;wj|,j&isin;{1,....,k}|ip&minus;wj&lowast;|&le;|ip&minus;wj|,j&isin;{1,....,k}</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; For each cluster&nbsp;<strong>C<sub>j</sub></strong>, where&nbsp;<strong>j &isin; { 1,&hellip;,k}</strong>, update the prototype&nbsp;<strong>w<sub>j</sub></strong>&nbsp;to be the centroid of all samples currently in&nbsp;<strong>C<sub>j</sub></strong>&nbsp;, so that</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wj=&sum;ip&isin;Cjip|Cj|wj=&sum;ip&isin;Cjip|Cj|</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Compute the total quantization error as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>E=&sum;j=1k&sum;ip&isin;wj|ip&minus;wj|2E=&sum;j=1k&sum;ip&isin;wj|ip&minus;wj|2</p>\r\n\r\n<h2>Neocognitron</h2>\r\n\r\n<p>It is a multilayer feedforward network, which was developed by Fukushima in 1980s. This model is based on supervised learning and is used for visual pattern recognition, mainly hand-written characters. It is basically an extension of Cognitron network, which was also developed by Fukushima in 1975.</p>\r\n\r\n<h3>Architecture</h3>\r\n\r\n<p>It is a hierarchical network, which comprises many layers and there is a pattern of connectivity locally in those layers.</p>\r\n\r\n<p><img alt=\"Neocognitron\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/neocognitron.jpg\" /></p>\r\n\r\n<p>As we have seen in the above diagram, neocognitron is divided into different connected layers and each layer has two cells. Explanation of these cells is as follows &minus;</p>\r\n\r\n<p><strong>S-Cell</strong>&nbsp;&minus; It is called a simple cell, which is trained to respond to a particular pattern or a group of patterns.</p>\r\n\r\n<p><strong>C-Cell</strong>&nbsp;&minus; It is called a complex cell, which combines the output from S-cell and simultaneously lessens the number of units in each array. In another sense, C-cell displaces the result of S-cell.</p>\r\n\r\n<h3>Training Algorithm</h3>\r\n\r\n<p>Training of neocognitron is found to be progressed layer by layer. The weights from the input layer to the first layer are trained and frozen. Then, the weights from the first layer to the second layer are trained, and so on. The internal calculations between S-cell and Ccell depend upon the weights coming from the previous layers. Hence, we can say that the training algorithm depends upon the calculations on S-cell and C-cell.</p>\r\n\r\n<h3>Calculations in S-cell</h3>\r\n\r\n<p>The S-cell possesses the excitatory signal received from the previous layer and possesses inhibitory signals obtained within the same layer.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&theta;=&sum;&sum;tic2i&minus;&minus;&minus;&minus;&minus;&minus;&minus;&minus;&minus;&radic;&theta;=&sum;&sum;tici2</p>\r\n\r\n<p>Here,&nbsp;<strong>t<sub>i</sub></strong>&nbsp;is the fixed weight and&nbsp;<strong>c<sub>i</sub></strong>&nbsp;is the output from C-cell.</p>\r\n\r\n<p>The scaled input of S-cell can be calculated as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>x=1+e1+vw0&minus;1x=1+e1+vw0&minus;1</p>\r\n\r\n<p>Here,&nbsp;e=&sum;iciwie=&sum;iciwi</p>\r\n\r\n<p><strong>w<sub>i</sub></strong>&nbsp;is the weight adjusted from C-cell to S-cell.</p>\r\n\r\n<p><strong>w<sub>0</sub></strong>&nbsp;is the weight adjustable between the input and S-cell.</p>\r\n\r\n<p><strong>v</strong>&nbsp;is the excitatory input from C-cell.</p>\r\n\r\n<p>The activation of the output signal is,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>s={x,0,ifx&ge;0ifx&lt;0s={x,ifx&ge;00,ifx&lt;0</p>\r\n\r\n<h3>Calculations in C-cell</h3>\r\n\r\n<p>The net input of C-layer is</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>C=&sum;isixiC=&sum;isixi</p>\r\n\r\n<p>Here,&nbsp;<strong>s<sub>i</sub></strong>&nbsp;is the output from S-cell and&nbsp;<strong>x<sub>i</sub></strong>&nbsp;is the fixed weight from S-cell to C-cell.</p>\r\n\r\n<p>The final output is as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Cout={Ca+C,0,ifC&gt;0otherwiseCout={Ca+C,ifC&gt;00,otherwise</p>\r\n\r\n<p>Here&nbsp;<strong>&lsquo;a&rsquo;</strong>&nbsp;is the parameter that depends on the performance of the network.</p>\r\n', 'Neural Networks'),
(42, 'Neural Networks - Associate Memory Network', '<h1>Associate Memory Network</h1>\r\n\r\n<p>These kinds of neural networks work on the basis of pattern association, which means they can store different patterns and at the time of giving an output they can produce one of the stored patterns by matching them with the given input pattern. These types of memories are also called&nbsp;<strong>Content-Addressable Memory</strong>&nbsp;CAMCAM. Associative memory makes a parallel search with the stored patterns as data files.</p>\r\n\r\n<p>Following are the two types of associative memories we can observe &minus;</p>\r\n\r\n<ul>\r\n	<li>Auto Associative Memory</li>\r\n	<li>Hetero Associative memory</li>\r\n</ul>\r\n\r\n<h2>Auto Associative Memory</h2>\r\n\r\n<p>This is a single layer neural network in which the input training vector and the output target vectors are the same. The weights are determined so that the network stores a set of patterns.</p>\r\n\r\n<h3>Architecture</h3>\r\n\r\n<p>As shown in the following figure, the architecture of Auto Associative memory network has&nbsp;<strong>&lsquo;n&rsquo;</strong>&nbsp;number of input training vectors and similar&nbsp;<strong>&lsquo;n&rsquo;</strong>&nbsp;number of output target vectors.</p>\r\n\r\n<p><img alt=\"Auto Associative Memory\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/auto_associative_memory.jpg\" /></p>\r\n\r\n<h3>Training Algorithm</h3>\r\n\r\n<p>For training, this network is using the Hebb or Delta learning rule.</p>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Initialize all the weights to zero as&nbsp;<strong>w<sub>ij</sub>&nbsp;= 0&nbsp;i=1ton,j=1toni=1ton,j=1ton</strong></p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Perform steps 3-4 for each input vector.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Activate each input unit as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>xi=si(i=1ton)xi=si(i=1ton)</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Activate each output unit as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yj=sj(j=1ton)yj=sj(j=1ton)</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Adjust the weights as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wij(new)=wij(old)+xiyjwij(new)=wij(old)+xiyj</p>\r\n\r\n<h3>Testing Algorithm</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Set the weights obtained during training for Hebb&rsquo;s rule.</p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Perform steps 3-5 for each input vector.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Set the activation of the input units equal to that of the input vector.</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Calculate the net input to each output unit&nbsp;<strong>j = 1 to n</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yinj=&sum;i=1nxiwijyinj=&sum;i=1nxiwij</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Apply the following activation function to calculate the output</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yj=f(yinj)={+1&minus;1ifyinj&gt;0ifyinjâ©½0yj=f(yinj)={+1ifyinj&gt;0&minus;1ifyinjâ©½0</p>\r\n\r\n<h2>Hetero Associative memory</h2>\r\n\r\n<p>Similar to Auto Associative Memory network, this is also a single layer neural network. However, in this network the input training vector and the output target vectors are not the same. The weights are determined so that the network stores a set of patterns. Hetero associative network is static in nature, hence, there would be no non-linear and delay operations.</p>\r\n\r\n<h3>Architecture</h3>\r\n\r\n<p>As shown in the following figure, the architecture of Hetero Associative Memory network has&nbsp;<strong>&lsquo;n&rsquo;</strong>&nbsp;number of input training vectors and&nbsp;<strong>&lsquo;m&rsquo;</strong>&nbsp;number of output target vectors.</p>\r\n\r\n<p><img alt=\"Hetero Associative Memory\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/hetero_associative_memory.jpg\" /></p>\r\n\r\n<h3>Training Algorithm</h3>\r\n\r\n<p>For training, this network is using the Hebb or Delta learning rule.</p>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Initialize all the weights to zero as&nbsp;<strong>w<sub>ij</sub>&nbsp;= 0&nbsp;i=1ton,j=1tomi=1ton,j=1tom</strong></p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Perform steps 3-4 for each input vector.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Activate each input unit as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>xi=si(i=1ton)xi=si(i=1ton)</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Activate each output unit as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yj=sj(j=1tom)yj=sj(j=1tom)</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Adjust the weights as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wij(new)=wij(old)+xiyjwij(new)=wij(old)+xiyj</p>\r\n\r\n<h3>Testing Algorithm</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step 1</strong>&nbsp;&minus; Set the weights obtained during training for Hebb&rsquo;s rule.</p>\r\n\r\n<p><strong>Step 2</strong>&nbsp;&minus; Perform steps 3-5 for each input vector.</p>\r\n\r\n<p><strong>Step 3</strong>&nbsp;&minus; Set the activation of the input units equal to that of the input vector.</p>\r\n\r\n<p><strong>Step 4</strong>&nbsp;&minus; Calculate the net input to each output unit&nbsp;<strong>j = 1 to m;</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yinj=&sum;i=1nxiwijyinj=&sum;i=1nxiwij</p>\r\n\r\n<p><strong>Step 5</strong>&nbsp;&minus; Apply the following activation function to calculate the output</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>yj=f(yinj)=âŽ§âŽ©âŽ¨âŽªâŽª+10&minus;1ifyinj&gt;0ifyinj=0ifyinj&lt;0</p>\r\n', 'Neural Networks'),
(43, 'Neural Networks - Brain-State-in-a-Box Network', '<h1>Brain-State-in-a-Box Network</h1>\r\n\r\n<p>The Brain-State-in-a-Box&nbsp;BSBBSB&nbsp;neural network is a nonlinear auto-associative neural network and can be extended to hetero-association with two or more layers. It is also similar to Hopfield network. It was proposed by J.A. Anderson, J.W. Silverstein, S.A. Ritz and R.S. Jones in 1977.</p>\r\n\r\n<p>Some important points to remember about BSB Network &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>It is a fully connected network with the maximum number of nodes depending upon the dimensionality&nbsp;<strong>n</strong>&nbsp;of the input space.</p>\r\n	</li>\r\n	<li>\r\n	<p>All the neurons are updated simultaneously.</p>\r\n	</li>\r\n	<li>\r\n	<p>Neurons take values between -1 to +1.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Mathematical Formulations</h2>\r\n\r\n<p>The node function used in BSB network is a ramp function, which can be defined as follows &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>f(net)=min(1,max(&minus;1,net))f(net)=min(1,max(&minus;1,net))</p>\r\n\r\n<p>This ramp function is bounded and continuous.</p>\r\n\r\n<p>As we know that each node would change its state, it can be done with the help of the following mathematical relation &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>xt(t+1)=f(&sum;j=1nwi,jxj(t))xt(t+1)=f(&sum;j=1nwi,jxj(t))</p>\r\n\r\n<p>Here,&nbsp;<strong>x<sub>i</sub>tt</strong>&nbsp;is the state of the&nbsp;<strong>i<sub>th</sub></strong>&nbsp;node at time&nbsp;<strong>t</strong>.</p>\r\n\r\n<p>Weights from&nbsp;<strong>i<sub>th</sub></strong>&nbsp;node to&nbsp;<strong>j<sub>th</sub></strong>&nbsp;node can be measured with the following relation &minus;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wij=1P&sum;p=1P(vp,ivp,j)wij=1P&sum;p=1P(vp,ivp,j)</p>\r\n\r\n<p>Here,&nbsp;<strong>P</strong>&nbsp;is the number of training patterns, which are bipolar.</p>\r\n', 'Neural Networks');
INSERT INTO `course_topics` (`id`, `topic_name`, `description`, `course_name`) VALUES
(44, 'Neural Networks - Genetic Algorithm', '<h1>Artificial Neural Network - Genetic Algorithm</h1>\r\n\r\n<p>Nature has always been a great source of inspiration to all mankind. Genetic Algorithms&nbsp;GAsGAs&nbsp;are search-based algorithms based on the concepts of natural selection and genetics. GAs are a subset of a much larger branch of computation known as&nbsp;<strong>Evolutionary Computation</strong>.</p>\r\n\r\n<p>GAs was developed by John Holland and his students and colleagues at the University of Michigan, most notably David E. Goldberg and has since been tried on various optimization problems with a high degree of success.</p>\r\n\r\n<p>In GAs, we have a pool or a population of possible solutions to the given problem. These solutions then undergo recombination and mutation&nbsp;likeinnaturalgeneticslikeinnaturalgenetics, producing new children, and the process is repeated over various generations. Each individual&nbsp;orcandidatesolutionorcandidatesolution&nbsp;is assigned a fitness value&nbsp;basedonitsobjectivefunctionvaluebasedonitsobjectivefunctionvalue&nbsp;and the fitter individuals are given a higher chance to mate and yield more &ldquo;fitter&rdquo; individuals. This is in line with the Darwinian Theory of &ldquo;Survival of the Fittest&rdquo;.</p>\r\n\r\n<p>In this way, we keep &ldquo;evolving&rdquo; better individuals or solutions over generations, till we reach a stopping criterion.</p>\r\n\r\n<p>Genetic Algorithms are sufficiently randomized in nature, however they perform much better than random local search&nbsp;inwhichwejusttryvariousrandomsolutions,keepingtrackofthebestsofarinwhichwejusttryvariousrandomsolutions,keepingtrackofthebestsofar, as they exploit historical information as well.</p>\r\n\r\n<h2>Advantages of GAs</h2>\r\n\r\n<p>GAs have various advantages which have made them immensely popular. These include &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Does not require any derivative information&nbsp;whichmaynotbeavailableformanyreal&minus;worldproblemswhichmaynotbeavailableformanyreal&minus;worldproblems.</p>\r\n	</li>\r\n	<li>\r\n	<p>Is faster and more efficient as compared to the traditional methods.</p>\r\n	</li>\r\n	<li>\r\n	<p>Has very good parallel capabilities.</p>\r\n	</li>\r\n	<li>\r\n	<p>Optimizes both continuous and discrete functions as well as multi-objective problems.</p>\r\n	</li>\r\n	<li>\r\n	<p>Provides a list of &ldquo;good&rdquo; solutions and not just a single solution.</p>\r\n	</li>\r\n	<li>\r\n	<p>Always gets an answer to the problem, which gets better over the time.</p>\r\n	</li>\r\n	<li>\r\n	<p>Useful when the search space is very large and there are large number of parameters involved.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Limitations of GAs</h2>\r\n\r\n<p>Like any technique, GAs also suffers from a few limitations. These include &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>GAs are not suited for all problems, especially problems which are simple and for which derivative information is available.</p>\r\n	</li>\r\n	<li>\r\n	<p>Fitness value is calculated repeatedly, which might be computationally expensive for some problems.</p>\r\n	</li>\r\n	<li>\r\n	<p>Being stochastic, there are no guarantees on the optimality or the quality of the solution.</p>\r\n	</li>\r\n	<li>\r\n	<p>If not implemented properly, GA may not converge to the optimal solution.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>GA &ndash; Motivation</h2>\r\n\r\n<p>Genetic Algorithms have the ability to deliver a &ldquo;good-enough&rdquo; solution &ldquo;fast-enough&rdquo;. This makes Gas attractive for use in solving optimization problems. The reasons why GAs are needed are as follows &minus;</p>\r\n\r\n<h3>Solving Difficult Problems</h3>\r\n\r\n<p>In computer science, there is a large set of problems, which are&nbsp;<strong>NP-Hard</strong>. What this essentially means is that, even the most powerful computing systems take a very long time&nbsp;evenyears!evenyears!&nbsp;to solve that problem. In such a scenario, GAs prove to be an efficient tool to provide&nbsp;<strong>usable near-optimal solutions</strong>&nbsp;in a short amount of time.</p>\r\n\r\n<h3>Failure of Gradient Based Methods</h3>\r\n\r\n<p>Traditional calculus based methods work by starting at a random point and by moving in the direction of the gradient, till we reach the top of the hill. This technique is efficient and works very well for single-peaked objective functions like the cost function in linear regression. However, in most real-world situations, we have a very complex problem called as landscapes, made of many peaks and many valleys, which causes such methods to fail, as they suffer from an inherent tendency of getting stuck at the local optima as shown in the following figure.</p>\r\n\r\n<p><img alt=\"Failure GA\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/failure_ga.jpg\" /></p>\r\n\r\n<h3>Getting a Good Solution Fast</h3>\r\n\r\n<p>Some difficult problems like the Travelling Salesman Problem&nbsp;TSPTSP, have real-world applications like path finding and VLSI Design. Now imagine that you are using your GPS Navigation system, and it takes a few minutes&nbsp;orevenafewhoursorevenafewhours&nbsp;to compute the &ldquo;optimal&rdquo; path from the source to destination. Delay in such real-world applications is not acceptable and therefore a &ldquo;good-enough&rdquo; solution, which is delivered &ldquo;fast&rdquo; is what is required.</p>\r\n\r\n<h2>How to Use GA for Optimization Problems?</h2>\r\n\r\n<p>We already know that optimization is an action of making something such as design, situation, resource, and system as effective as possible. Optimization process is shown in the following diagram.</p>\r\n\r\n<p><img alt=\"How to Use\" src=\"https://www.tutorialspoint.com/artificial_neural_network/images/how_to_use.jpg\" /></p>\r\n\r\n<h3>Stages of GA Mechanism for Optimization Process</h3>\r\n\r\n<p>Followings are the stages of GA mechanism when used for optimization of problems.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Generate the initial population randomly.</p>\r\n	</li>\r\n	<li>\r\n	<p>Select the initial solution with the best fitness values.</p>\r\n	</li>\r\n	<li>\r\n	<p>Recombine the selected solutions using mutation and crossover operators.</p>\r\n	</li>\r\n	<li>\r\n	<p>Insert offspring into the population.</p>\r\n	</li>\r\n	<li>\r\n	<p>Now if the stop condition is met, then return the solution with their best fitness value. Else, go to step 2.</p>\r\n	</li>\r\n</ul>\r\n', 'Neural Networks'),
(45, 'Neural Networks - Applications', '<h1>Applications of Neural Networks</h1>\r\n\r\n<p>Before studying the fields where ANN has been used extensively, we need to understand why ANN would be the preferred choice of application.</p>\r\n\r\n<h2>Why Artificial Neural Networks?</h2>\r\n\r\n<p>We need to understand the answer to the above question with an example of a human being. As a child, we used to learn the things with the help of our elders, which includes our parents or teachers. Then later by self-learning or practice we keep learning throughout our life. Scientists and researchers are also making the machine intelligent, just like a human being, and ANN plays a very important role in the same due to the following reasons &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>With the help of neural networks, we can find the solution of such problems for which algorithmic method is expensive or does not exist.</p>\r\n	</li>\r\n	<li>\r\n	<p>Neural networks can learn by example, hence we do not need to program it at much extent.</p>\r\n	</li>\r\n	<li>\r\n	<p>Neural networks have the accuracy and significantly fast speed than conventional speed.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Areas of Application</h2>\r\n\r\n<p>Followings are some of the areas, where ANN is being used. It suggests that ANN has an interdisciplinary approach in its development and applications.</p>\r\n\r\n<h3>Speech Recognition</h3>\r\n\r\n<p>Speech occupies a prominent role in human-human interaction. Therefore, it is natural for people to expect speech interfaces with computers. In the present era, for communication with machines, humans still need sophisticated languages which are difficult to learn and use. To ease this communication barrier, a simple solution could be, communication in a spoken language that is possible for the machine to understand.</p>\r\n\r\n<p>Great progress has been made in this field, however, still such kinds of systems are facing the problem of limited vocabulary or grammar along with the issue of retraining of the system for different speakers in different conditions. ANN is playing a major role in this area. Following ANNs have been used for speech recognition &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Multilayer networks</p>\r\n	</li>\r\n	<li>\r\n	<p>Multilayer networks with recurrent connections</p>\r\n	</li>\r\n	<li>\r\n	<p>Kohonen self-organizing feature map</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>The most useful network for this is Kohonen Self-Organizing feature map, which has its input as short segments of the speech waveform. It will map the same kind of phonemes as the output array, called feature extraction technique. After extracting the features, with the help of some acoustic models as back-end processing, it will recognize the utterance.</p>\r\n\r\n<h3>Character Recognition</h3>\r\n\r\n<p>It is an interesting problem which falls under the general area of Pattern Recognition. Many neural networks have been developed for automatic recognition of handwritten characters, either letters or digits. Following are some ANNs which have been used for character recognition &minus;</p>\r\n\r\n<ul>\r\n	<li>Multilayer neural networks such as Backpropagation neural networks.</li>\r\n	<li>Neocognitron</li>\r\n</ul>\r\n\r\n<p>Though back-propagation neural networks have several hidden layers, the pattern of connection from one layer to the next is localized. Similarly, neocognitron also has several hidden layers and its training is done layer by layer for such kind of applications.</p>\r\n\r\n<h3>Signature Verification Application</h3>\r\n\r\n<p>Signatures are one of the most useful ways to authorize and authenticate a person in legal transactions. Signature verification technique is a non-vision based technique.</p>\r\n\r\n<p>For this application, the first approach is to extract the feature or rather the geometrical feature set representing the signature. With these feature sets, we have to train the neural networks using an efficient neural network algorithm. This trained neural network will classify the signature as being genuine or forged under the verification stage.</p>\r\n\r\n<h3>Human Face Recognition</h3>\r\n\r\n<p>It is one of the biometric methods to identify the given face. It is a typical task because of the characterization of &ldquo;non-face&rdquo; images. However, if a neural network is well trained, then it can be divided into two classes namely images having faces and images that do not have faces.</p>\r\n\r\n<p>First, all the input images must be preprocessed. Then, the dimensionality of that image must be reduced. And, at last it must be classified using neural network training algorithm. Following neural networks are used for training purposes with preprocessed image &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Fully-connected multilayer feed-forward neural network trained with the help of back-propagation algorithm.</p>\r\n	</li>\r\n	<li>\r\n	<p>For dimensionality reduction, Principal Component Analysis&nbsp;PCAPCA&nbsp;is used.</p>\r\n	</li>\r\n</ul>\r\n', 'Neural Networks');

-- --------------------------------------------------------

--
-- Table structure for table `faq`
--

CREATE TABLE `faq` (
  `id` int(11) NOT NULL,
  `faq_title` varchar(255) NOT NULL,
  `faq_description` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `faq`
--

INSERT INTO `faq` (`id`, `faq_title`, `faq_description`) VALUES
(1, 'Can i learn at my own pace?\r\n', 'Yes, you\'re not bound to complete the course materials within a certain time limit, Datacademy lets you access their premium material forever, FOR FREE!'),
(2, 'What are the technology requirements? \r\n', 'The minimum technology requirements to study on Datacademy is to own a laptop/PC, with minimum 4 gigs of RAM.'),
(3, 'How much do courses cost?\r\n', 'ALL the courses in Datacademy don\'t cost you anything as they\'re for FREE!'),
(4, 'How long does each course take?', 'The minimum time each course takes to complete is about 6-7 hours.');

-- --------------------------------------------------------

--
-- Table structure for table `question_test`
--

CREATE TABLE `question_test` (
  `id` int(255) NOT NULL,
  `question` varchar(255) NOT NULL,
  `opt1` varchar(255) NOT NULL,
  `opt2` varchar(255) NOT NULL,
  `opt3` varchar(255) NOT NULL,
  `opt4` varchar(255) NOT NULL,
  `answer` int(100) NOT NULL,
  `course_id` int(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `question_test`
--

INSERT INTO `question_test` (`id`, `question`, `opt1`, `opt2`, `opt3`, `opt4`, `answer`, `course_id`) VALUES
(1, 'What is a correct syntax to output \"Hello World\" in Python?\r\n', 'echo(\"Hello World\");\r\n', 'print(\"Hello World\");', 'echo \"Hello World\" \r\n', 'p(\"Hello World\")', 1, 1),
(2, 'How do you insert COMMENTS in Python code?', '//This is a comment', '/This is a comment/', '#This is a comment', 'None', 2, 1),
(3, 'Which one is NOT a legal variable name?', '_myvar', 'my_var', 'my-var', 'Myvar', 2, 1),
(4, 'What is the correct file extension for Python files?', '.pyth', '.py', '.pyt', '.pt', 1, 1),
(5, 'R was named partly after the first names of ___ R authors?', 'One', 'Two', 'Three', 'Four', 1, 2),
(6, 'How many types of R objects are present in R data type?', '4', '5', '6', '7', 2, 2),
(7, 'In R every operation has a ___ call?', 'System', 'Function', 'None of the above', 'Both A &amp; B', 1, 2),
(8, 'Which of the following graph can be used for simple summarization of data?', 'Scatterplot', 'Barplot', 'Overlaying', 'None of these', 1, 2),
(9, 'What does SQL stand for?', 'Strong Question Language', 'Structured Question Language', 'Structured Query Language', 'None', 2, 3),
(10, 'Which SQL statement is used to extract data from a database?', 'GET', 'SELECT', 'EXTRACT', 'OPEN', 1, 3),
(11, 'Which SQL statement is used to insert new data in a database?', 'INSERT INTO', 'INSERT NEW', 'ADD NEW', 'ADD RECORD', 0, 3),
(12, 'Which SQL statement is used to update data in a database?', 'SAVE AS ', 'MODIFY', 'UPDATE', 'SAVE', 2, 3),
(13, 'What is the application of machine learning methods to a large database called?', 'Big data computing', 'Internet of things', 'Data mining', 'Artificial intelligence', 2, 4),
(14, 'Identify the type of learning in which labeled training data is used.', 'Semi unsupervised learning', 'Supervised learning', 'Reinforcement learning', 'Unsupervised learning', 1, 4),
(15, 'The father of machine learning is', 'Geoffrey Everest Hinton', 'Geoffrey Hill', 'Geoffrey Chaucer', 'None of the above', 0, 4),
(16, 'Machine learning is a subset of which of the following.', 'Artificial intelligence', 'Deep learning', 'Data learning', 'None of the above', 0, 4),
(17, 'Which of the following is a subset of machine learning?', 'Numpy', 'Artificial intelligence ', 'Deep Learning', 'None of these', 2, 5),
(18, 'How many layers Deep learning algorithms are constructed?', '2', '3', '4', '5', 1, 5),
(19, 'RNNs stands for?', 'Receives neural networks', 'Report neural networks', 'Recording neural networks', 'Recurrent neural networks', 3, 5),
(20, 'Which of the following is/are Limitations of deep learning?', 'Data labeling ', 'Obtain huge training datasets ', 'Both A and B', 'None of the above', 2, 5),
(21, 'A perceptron is:  ', 'a single layer feed-forward neural network with pre-processing', 'an auto-associative neural network', 'a double layer auto-associative neural network  ', 'a neural network that contains feedback', 0, 6),
(22, 'An auto-associative network is:        ', 'a neural network that has only one loop', 'a neural network that contains no loops', 'a neural network that contains feedback', 'a single layer feed-forward neural network with pre-processing', 2, 6),
(23, 'What are the advantages of neural networks over conventional computers?', 'They have the ability to learn by example', 'They are more fault tolerant', 'They are more suited for real time operation due to their high computational rates', 'All of the above', 3, 6),
(24, 'Which is true for neural networks?\r\n', 'It has set of nodes and connections\r\n', 'Each node computes it\'s weighted input \r\n', 'Node could be in excited state or nonexcited state\r\n', 'All of the above', 3, 6);

-- --------------------------------------------------------

--
-- Table structure for table `quizzes`
--

CREATE TABLE `quizzes` (
  `id` int(4) NOT NULL,
  `cat_name` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `quizzes`
--

INSERT INTO `quizzes` (`id`, `cat_name`) VALUES
(1, 'Python'),
(2, 'R-Programming'),
(3, 'SQL'),
(4, 'Machine Learning'),
(5, 'Deep Learning'),
(6, 'Neural Networks');

-- --------------------------------------------------------

--
-- Table structure for table `quiz_history`
--

CREATE TABLE `quiz_history` (
  `id` int(255) NOT NULL,
  `course_id` int(255) NOT NULL,
  `user_id` int(255) NOT NULL,
  `total_ques` int(255) NOT NULL,
  `attempted` int(255) NOT NULL,
  `unattempted` int(255) NOT NULL,
  `right_ans` int(255) NOT NULL,
  `wrong_ans` int(255) NOT NULL,
  `percentage` decimal(65,0) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `quiz_history`
--

INSERT INTO `quiz_history` (`id`, `course_id`, `user_id`, `total_ques`, `attempted`, `unattempted`, `right_ans`, `wrong_ans`, `percentage`) VALUES
(1, 5, 3, 4, 4, 0, 2, 2, '50'),
(2, 4, 1, 4, 4, 0, 2, 2, '50');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(255) NOT NULL,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `username`, `password`, `email`) VALUES
(1, 'sunyah', 'sunyah82', 'su.faisal24@gmail.com'),
(2, 'safia', 'safia58', 'safia.faiz2002@gmail.com'),
(3, 'aleena', 'aleena47', 'aleenayameen50@gmail.com'),
(4, 'mubashir', 'mubashir71', 'smmubbashirrizvi@gmail.com'),
(5, 'admin', 'admin', 'su.faisal24@gmail.com');

-- --------------------------------------------------------

--
-- Table structure for table `videos`
--

CREATE TABLE `videos` (
  `video_id` int(255) NOT NULL,
  `video_path` varchar(255) NOT NULL,
  `video_name` varchar(255) NOT NULL,
  `course_name` varchar(255) NOT NULL,
  `video_image` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `videos`
--

INSERT INTO `videos` (`video_id`, `video_path`, `video_name`, `course_name`, `video_image`) VALUES
(1, 'https://www.youtube.com/embed/rfscVS0vtbw', 'Python', 'Python', '../../uploadimg/python_online.png'),
(2, 'https://www.youtube.com/embed/_V8eKsto3Ug', 'R-Programming', 'R-Programming', '../../uploadimg/R-Programming.png'),
(3, 'https://www.youtube.com/embed/HXV3zeQKqGY', 'SQL', 'SQL', '../../uploadimg/Sql_logo.png'),
(4, 'https://www.youtube.com/embed/NWONeJKn6kc', 'Machine Learning', 'Machine Learning', '../../uploadimg/machine_learning.png'),
(5, 'https://www.youtube.com/embed/VyWAvY2CF9c', 'Deep Learning', 'Deep Learning', '../../uploadimg/Deep_learning.jpg'),
(6, 'https://www.youtube.com/embed/ob1yS9g-Zcs', 'Neural Networks', 'Neural Networks', '../../uploadimg/neural_networks.png');

-- --------------------------------------------------------

--
-- Table structure for table `video_info`
--

CREATE TABLE `video_info` (
  `course_id` int(255) NOT NULL,
  `image` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `course_name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `video_info`
--

INSERT INTO `video_info` (`course_id`, `image`, `description`, `course_name`) VALUES
(1, '../../uploadimg/PYTHON.png', 'See python online videos', 'Python'),
(2, '../../uploadimg/rOnlinejpg.jpg', 'See R-programming online videos', 'R-Programming'),
(3, '../../uploadimg/sqlOnlinepng.png', 'See SQL online videos', 'SQL'),
(4, '../../uploadimg/MLonline1_fLP6wCYm5I-sXYV0YbtMkg.png', 'See ML online videos', 'Machine Learning'),
(5, '../../uploadimg/DLonline.jpg', 'See DL online videos', 'Deep Learning'),
(6, '../../uploadimg/neuralNetOnline.jpg', 'See Neural Networks online videos', 'Neural Networks');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `available_courses`
--
ALTER TABLE `available_courses`
  ADD PRIMARY KEY (`course_id`),
  ADD UNIQUE KEY `course_name` (`course_name`);

--
-- Indexes for table `commentsection`
--
ALTER TABLE `commentsection`
  ADD PRIMARY KEY (`comment_id`),
  ADD KEY `video_id` (`video_id`);

--
-- Indexes for table `course_topics`
--
ALTER TABLE `course_topics`
  ADD PRIMARY KEY (`id`),
  ADD KEY `course_name` (`course_name`);

--
-- Indexes for table `faq`
--
ALTER TABLE `faq`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `question_test`
--
ALTER TABLE `question_test`
  ADD PRIMARY KEY (`id`),
  ADD KEY `course_id` (`course_id`);

--
-- Indexes for table `quizzes`
--
ALTER TABLE `quizzes`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `quiz_history`
--
ALTER TABLE `quiz_history`
  ADD PRIMARY KEY (`id`),
  ADD KEY `course_id` (`course_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `videos`
--
ALTER TABLE `videos`
  ADD PRIMARY KEY (`video_id`);

--
-- Indexes for table `video_info`
--
ALTER TABLE `video_info`
  ADD PRIMARY KEY (`course_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `available_courses`
--
ALTER TABLE `available_courses`
  MODIFY `course_id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT for table `commentsection`
--
ALTER TABLE `commentsection`
  MODIFY `comment_id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `course_topics`
--
ALTER TABLE `course_topics`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=46;

--
-- AUTO_INCREMENT for table `faq`
--
ALTER TABLE `faq`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT for table `question_test`
--
ALTER TABLE `question_test`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=25;

--
-- AUTO_INCREMENT for table `quizzes`
--
ALTER TABLE `quizzes`
  MODIFY `id` int(4) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT for table `quiz_history`
--
ALTER TABLE `quiz_history`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT for table `videos`
--
ALTER TABLE `videos`
  MODIFY `video_id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT for table `video_info`
--
ALTER TABLE `video_info`
  MODIFY `course_id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `commentsection`
--
ALTER TABLE `commentsection`
  ADD CONSTRAINT `commentsection_ibfk_1` FOREIGN KEY (`video_id`) REFERENCES `videos` (`video_id`);

--
-- Constraints for table `course_topics`
--
ALTER TABLE `course_topics`
  ADD CONSTRAINT `course_topics_ibfk_1` FOREIGN KEY (`course_name`) REFERENCES `available_courses` (`course_name`);

--
-- Constraints for table `question_test`
--
ALTER TABLE `question_test`
  ADD CONSTRAINT `question_test_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `quizzes` (`id`);

--
-- Constraints for table `quiz_history`
--
ALTER TABLE `quiz_history`
  ADD CONSTRAINT `quiz_history_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `quizzes` (`id`),
  ADD CONSTRAINT `quiz_history_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
